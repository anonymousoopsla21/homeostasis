//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(CParser)
import java.util.*;
import syntaxtree.*;
import java.util.Vector;


public class CParser 
{
   public static Hashtable types = new Hashtable();
   public static Stack typedefParsingStack = new Stack();
   public static boolean isType(String type)
   {
      if ( types.get(type) != null )
      {
         return true;
      }
      return false;
   }
   public static void addType(String type)
   {
      types.put(type,Boolean.TRUE);
   }
   public static void printTypes()
   {
      Enumeration enum1 = types.keys();
      while ( enum1.hasMoreElements() )
      {
         System.out.println(enum1.nextElement());
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CParser)

TOKEN_MGR_DECLS:{
   static int attributeMatchingParens;
}


SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
}

<DEFAULT, AfterCrossbar, Pragma, Omp> TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "\'" (~["\'", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
   | <STRING_LITERAL: "\"" (~["\"", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
}

<DEFAULT> MORE :
{
   "__attribute__"
      {
         attributeMatchingParens = 0;
      } : AfterAttrib
}

<AfterAttrib> MORE :
{
   "("
      {
         attributeMatchingParens++;
      }
   | ")"
      {
         attributeMatchingParens--;
         if ( attributeMatchingParens == 1 )
            SwitchTo(AtAttribEnd);
      }
   | <~[]>
}

<AtAttribEnd> MORE :
{
   "("
      {
         attributeMatchingParens++;
      } : AfterAttrib
   | <~[")"]>
}

<AtAttribEnd> SPECIAL_TOKEN :
{
   <__ATTRIBUTE: ")">
      {
         attributeMatchingParens--;
      } : DEFAULT
}

<DEFAULT, Omp> TOKEN :
{
   <RESTRICT: "__restrict">
   | <CONTINUE: "continue">
   | <VOLATILE: "volatile">
   | <REGISTER: "register">
   | <UNSIGNED: "unsigned">
   | <TYPEDEF: "typedef">
   | <DFLT: "default">
   | <DOUBLE: "double">
   | <SIZEOF: "sizeof">
   | <SWITCH: "switch">
   | <RETURN: "return">
   | <EXTERN: "extern">
   | <STRUCT: "struct">
   | <STATIC: "static">
   | <SIGNED: "signed">
   | <WHILE: "while">
   | <BREAK: "break">
   | <UNION: "union">
   | <CONST: "const">
   | <CCONST: "__const">
   | <FLOAT: "float">
   | <SHORT: "short">
   | <ELSE: "else">
   | <CASE: "case">
   | <LONG: "long">
   | <ENUM: "enum">
   | <AUTO: "auto">
   | <VOID: "void">
   | <CHAR: "char">
   | <GOTO: "goto">
   | <FOR: "for">
   | <INT: "int">
   | <IF: "if">
   | <DO: "do">
}

<DEFAULT, AfterCrossbar, Pragma, Omp> TOKEN :
{
   <ELLIPSIS: "...">
   | <OP_SLASS: "<<=">
   | <OP_SRASS: ">>=">
   | <OP_EQ: "==">
   | <OP_AND: "&&">
   | <OP_OR: "||">
   | <OP_MULASS: "*=">
   | <OP_DIVASS: "/=">
   | <OP_MODASS: "%=">
   | <OP_ADDASS: "+=">
   | <OP_SUBASS: "-=">
   | <OP_ANDASS: "&=">
   | <OP_XORASS: "^=">
   | <OP_ORASS: "|=">
   | <OP_SL: "<<">
   | <OP_SR: ">>">
   | <OP_NEQ: "!=">
   | <OP_GE: ">=">
   | <OP_LE: "<=">
   | <OP_DEREF: "->">
   | <OP_INCR: "++">
   | <OP_DECR: "--">
   | <OP_GT: ">">
   | <OP_LT: "<">
   | <OP_ADD: "+">
   | <OP_SUB: "-">
   | <OP_MUL: "*">
   | <OP_DIV: "/">
   | <OP_MOD: "%">
   | <OP_ASS: "=">
   | <OP_BITAND: "&">
   | <OP_BITOR: "|">
   | <OP_BITXOR: "^">
   | <OP_NOT: "!">
   | <OP_BITNOT: "~">
   | <COLON: ":">
   | <SEMICOLON: ";">
   | <QUESTION: "?">
   | <DOT: ".">
   | <LEFTPAREN: "(">
   | <RIGHTPAREN: ")">
   | <LEFTBRACKET: "[">
   | <RIGHTBRACKET: "]">
   | <LEFTBRACE: "{">
   | <RIGHTBRACE: "}">
   | <COMMA: ",">
}

TOKEN :
{
   <CROSSBAR: "#"> : AfterCrossbar
}

<AfterCrossbar, Cpp> TOKEN :
{
   <UNKNOWN_CPP: ("\r" | "\n")+> : DEFAULT
}

<AfterCrossbar> TOKEN :
{
   <PRAGMA: "pragma"> : Pragma
}

<AfterCrossbar> MORE :
{
   "include" : Cpp
   | "import" : Cpp
   | "define" : Cpp
   | "ifndef" : Cpp
   | "ident" : Cpp
   | "undef" : Cpp
   | "ifdef" : Cpp
   | "endif" : Cpp
   | "line" : Cpp
}

<Cpp> SKIP :
{
   <"\\" (("\r" ["\n"]) | "\n")>
}

<Cpp> MORE :
{
   <~[]>
}

<Pragma, Omp> SKIP :
{
   " "
   | "\t"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
}

<Pragma> SKIP :
{
   "\n" : DEFAULT
   | "\r" : DEFAULT
}

<Omp> TOKEN :
{
   <OMP_NL: "\n"> : DEFAULT
   | <OMP_CR: "\r"> : DEFAULT
}

<AfterCrossbar> SKIP :
{
   " "
   | "\t"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
}

<Pragma> TOKEN :
{
   <OMP: "omp"> : Omp
}

<Pragma> MORE :
{
   <~[]> : Cpp
}

<Omp> TOKEN :
{
   <PARALLEL: "parallel">
   | <SECTIONS: "sections">
   | <SECTION: "section">
   | <SINGLE: "single">
   | <ORDERED: "ordered">
   | <MASTER: "master">
   | <CRITICAL: "critical">
   | <ATOMIC: "atomic">
   | <BARRIER: "barrier">
   | <FLUSH: "flush">
   | <NOWAIT: "nowait">
   | <SCHEDULE: "schedule">
   | <DYNAMIC: "dynamic">
   | <GUIDED: "guided">
   | <RUNTIME: "runtime">
   | <NONE: "none">
   | <REDUCTION: "reduction">
   | <PRIVATE: "private">
   | <FIRSTPRIVATE: "firstprivate">
   | <LASTPRIVATE: "lastprivate">
   | <SHARED: "shared">
   | <COPYIN: "copyin">
   | <THREADPRIVATE: "threadprivate">
}

<DEFAULT, AfterCrossbar, Omp> TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z"]>
   | <#DIGIT: ["0"-"9"]>
}

TranslationUnit TranslationUnit() :
{
   NodeList n0 = new NodeList();
   NodeChoice n1;
   ExternalDeclaration n2;
   UnknownCpp n3;
   UnknownPragma n4;

   
}
{
   (
      (
         LOOKAHEAD(3)
         n2=ExternalDeclaration()
         { n1 = new NodeChoice(n2, 0); }
      |
         LOOKAHEAD(3)
         n3=UnknownCpp()
         { n1 = new NodeChoice(n3, 1); }
      |
         n4=UnknownPragma()
         { n1 = new NodeChoice(n4, 2); }
      )
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new TranslationUnit(n0); }
}

ExternalDeclaration ExternalDeclaration() :
{
   NodeChoice n0;
   FunctionDefinition n1;
   Declaration n2;
   ThreadprivateDirective n3;

   
}
{
   (
      (
         LOOKAHEAD(FunctionDefinition())
         n1=FunctionDefinition()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Declaration()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=ThreadprivateDirective()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
   { return new ExternalDeclaration(n0); }
}

FunctionDefinition FunctionDefinition() :
{
   NodeOptional n0 = new NodeOptional();
   DeclarationSpecifiers n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationList n4;
   CompoundStatement n5;

   
}
{
   (
      LOOKAHEAD(DeclarationSpecifiers())
      n1=DeclarationSpecifiers()
      { n0.addNode(n1); }
   )?
   n2=Declarator()
   (
      n4=DeclarationList()
      { n3.addNode(n4); }
   )?
   n5=CompoundStatement()
   
   { return new FunctionDefinition(n0,n2,n3,n5); }
}

Declaration Declaration() :
{
   DeclarationSpecifiers n0;
   NodeOptional n1 = new NodeOptional();
   InitDeclaratorList n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=DeclarationSpecifiers()
   (
      n2=InitDeclaratorList()
      { n1.addNode(n2); }
   )?
   n4=<SEMICOLON> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Declaration(n0,n1,n3); }
}

DeclarationList DeclarationList() :
{
   NodeList n0 = new NodeList();
   Declaration n1;

   
}
{
   (
      LOOKAHEAD(Declaration())
      n1=Declaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new DeclarationList(n0); }
}

DeclarationSpecifiers DeclarationSpecifiers() :
{
   NodeList n0 = new NodeList();
   NodeChoice n1;
   StorageClassSpecifier n2;
   TypeSpecifier n3;
   TypeQualifier n4;

   
}
{
   (
      (
         n2=StorageClassSpecifier()
         { n1 = new NodeChoice(n2, 0); }
      |
         n3=TypeSpecifier()
         { n1 = new NodeChoice(n3, 1); }
      |
         n4=TypeQualifier()
         { n1 = new NodeChoice(n4, 2); }
      )
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new DeclarationSpecifiers(n0); }
}

StorageClassSpecifier StorageClassSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<AUTO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<REGISTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<STATIC> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<EXTERN> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<TYPEDEF> { n9 = JTBToolkit.makeNodeToken(n10); }
      
      {
         typedefParsingStack.push(Boolean.TRUE);
      }
      
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new StorageClassSpecifier(n0); }
}

TypeSpecifier TypeSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   StructOrUnionSpecifier n19;
   EnumSpecifier n20;
   TypedefName n21;

   
}
{
   (
      n2=<VOID> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<SHORT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<INT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LONG> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<FLOAT> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<DOUBLE> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<SIGNED> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<UNSIGNED> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n19=StructOrUnionSpecifier()
      { n0 = new NodeChoice(n19, 9); }
   |
      n20=EnumSpecifier()
      { n0 = new NodeChoice(n20, 10); }
   |
      LOOKAHEAD({ isType(getToken(1).image) })
      n21=TypedefName()
      { n0 = new NodeChoice(n21, 11); }
   )
   
   { return new TypeSpecifier(n0); }
}

TypeQualifier TypeQualifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<RESTRICT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CONST> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<VOLATILE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<CCONST> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new TypeQualifier(n0); }
}

StructOrUnionSpecifier StructOrUnionSpecifier() :
{
   StructOrUnion n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   StructDeclarationList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   
   {
      typedefParsingStack.push(Boolean.FALSE);
   }
   
   n0=StructOrUnion()
   (
      (
         LOOKAHEAD(3)
         { n2 = new NodeSequence(5); }
         (
            n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         n7=<LEFTBRACE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n2.addNode(n6); }
         n8=StructDeclarationList()
         { n2.addNode(n8); }
         n10=<RIGHTBRACE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2.addNode(n9); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n12=<IDENTIFIER> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n1 = new NodeChoice(n11, 1); }
      )
      
   )
   
   {
      typedefParsingStack.pop();
   }
   
   
   { return new StructOrUnionSpecifier(n0,n1); }
}

StructOrUnion StructOrUnion() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<STRUCT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<UNION> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new StructOrUnion(n0); }
}

StructDeclarationList StructDeclarationList() :
{
   NodeList n0 = new NodeList();
   StructDeclaration n1;

   
}
{
   (
      n1=StructDeclaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StructDeclarationList(n0); }
}

InitDeclaratorList InitDeclaratorList() :
{
   InitDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitDeclarator n5;

   
}
{
   n0=InitDeclarator()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InitDeclarator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   {
      if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
      {
         typedefParsingStack.pop();
      }
   }
   
   
   { return new InitDeclaratorList(n0,n1); }
}

InitDeclarator InitDeclarator() :
{
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Declarator()
   (
      { n2 = new NodeSequence(2); }
      n4=<OP_ASS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InitDeclarator(n0,n1); }
}

StructDeclaration StructDeclaration() :
{
   SpecifierQualifierList n0;
   StructDeclaratorList n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=SpecifierQualifierList()
   n1=StructDeclaratorList()
   n3=<SEMICOLON> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new StructDeclaration(n0,n1,n2); }
}

SpecifierQualifierList SpecifierQualifierList() :
{
   NodeList n0 = new NodeList();
   NodeChoice n1;
   TypeSpecifier n2;
   TypeQualifier n3;

   
}
{
   (
      (
         n2=TypeSpecifier()
         { n1 = new NodeChoice(n2, 0); }
      |
         n3=TypeQualifier()
         { n1 = new NodeChoice(n3, 1); }
      )
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new SpecifierQualifierList(n0); }
}

StructDeclaratorList StructDeclaratorList() :
{
   StructDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StructDeclarator n5;

   
}
{
   n0=StructDeclarator()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=StructDeclarator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new StructDeclaratorList(n0,n1); }
}

StructDeclarator StructDeclarator() :
{
   NodeChoice n0;
   NodeSequence n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ConstantExpression n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   ConstantExpression n11;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Declarator()
      { n1.addNode(n2); }
      (
         { n4 = new NodeSequence(2); }
         n6=<COLON> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=ConstantExpression()
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(2); }
      n10=<COLON> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=ConstantExpression()
      { n8.addNode(n11); }
      { n0 = new NodeChoice(n8, 1); }
   )
   
   { return new StructDeclarator(n0); }
}

EnumSpecifier EnumSpecifier() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   EnumeratorList n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1=<ENUM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         LOOKAHEAD(3)
         { n3 = new NodeSequence(5); }
         (
            n6=<IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n8=<LEFTBRACE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         n9=EnumeratorList()
         { n3.addNode(n9); }
         n11=<RIGHTBRACE> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n3.addNode(n10); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n13=<IDENTIFIER> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n2 = new NodeChoice(n12, 1); }
      )
      
   )
   
   { return new EnumSpecifier(n0,n2); }
}

EnumeratorList EnumeratorList() :
{
   Enumerator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Enumerator n5;

   
}
{
   n0=Enumerator()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Enumerator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new EnumeratorList(n0,n1); }
}

Enumerator Enumerator() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<OP_ASS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=ConstantExpression()
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Enumerator(n0,n2); }
}

Declarator Declarator() :
{
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectDeclarator n2;

   
}
{
   (
      n1=Pointer()
      { n0.addNode(n1); }
   )?
   n2=DirectDeclarator()
   
   { return new Declarator(n0,n2); }
}

DirectDeclarator DirectDeclarator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Declarator n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   ConstantExpression n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   ParameterTypeList n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   IdentifierList n28;
   NodeToken n29;
   Token n30;

   
}
{
   (
      (
         n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
         
         {
            if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
               addType(n2.image);
         }
         
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(3); }
         n5=<LEFTPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Declarator()
         { n3.addNode(n6); }
         n8=<RIGHTPAREN> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      { n14 = new NodeOptional(); }
      { n27 = new NodeOptional(); }
      (
         LOOKAHEAD(3)
         { n11 = new NodeSequence(4); }
         n13=<LEFTBRACKET> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         (
            n15=ConstantExpression()
            { n14.addNode(n15); }
         )?
         { n11.addNode(n14); }
         n17=<RIGHTBRACKET> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n11.addNode(n16); }
         { n10 = new NodeChoice(n11, 0); }
      |
         LOOKAHEAD(3)
         { n18 = new NodeSequence(4); }
         n20=<LEFTPAREN> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         n21=ParameterTypeList()
         { n18.addNode(n21); }
         n23=<RIGHTPAREN> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n18.addNode(n22); }
         { n10 = new NodeChoice(n18, 1); }
      |
         LOOKAHEAD(3)
         { n24 = new NodeSequence(4); }
         n26=<LEFTPAREN> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         (
            n28=IdentifierList()
            { n27.addNode(n28); }
         )?
         { n24.addNode(n27); }
         n30=<RIGHTPAREN> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n24.addNode(n29); }
         { n10 = new NodeChoice(n24, 2); }
      )
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   
   { return new DirectDeclarator(n0,n9); }
}

Pointer Pointer() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeQualifierList n3;
   NodeOptional n4 = new NodeOptional();
   Pointer n5;

   
}
{
   n1=<OP_MUL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=TypeQualifierList()
      { n2.addNode(n3); }
   )?
   (
      n5=Pointer()
      { n4.addNode(n5); }
   )?
   
   { return new Pointer(n0,n2,n4); }
}

TypeQualifierList TypeQualifierList() :
{
   NodeList n0 = new NodeList();
   TypeQualifier n1;

   
}
{
   (
      n1=TypeQualifier()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new TypeQualifierList(n0); }
}

ParameterTypeList ParameterTypeList() :
{
   ParameterList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=ParameterList()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6=<ELLIPSIS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ParameterTypeList(n0,n1); }
}

ParameterList ParameterList() :
{
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;

   
}
{
   n0=ParameterDeclaration()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ParameterDeclaration()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ParameterList(n0,n1); }
}

ParameterDeclaration ParameterDeclaration() :
{
   DeclarationSpecifiers n0;
   NodeChoice n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   AbstractDeclarator n4;

   
}
{
   n0=DeclarationSpecifiers()
   (
      (
         LOOKAHEAD(Declarator())
         n2=Declarator()
         { n1 = new NodeChoice(n2, 0); }
      |
         (
            n4=AbstractDeclarator()
            { n3.addNode(n4); }
         )?
         { n1 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new ParameterDeclaration(n0,n1); }
}

IdentifierList IdentifierList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<COMMA> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new IdentifierList(n0,n2); }
}

Initializer Initializer() :
{
   NodeChoice n0;
   AssignmentExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitializerList n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n1=AssignmentExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(4); }
      n4=<LEFTBRACE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InitializerList()
      { n2.addNode(n5); }
      (
         n8=<COMMA> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n2.addNode(n6); }
      n10=<RIGHTBRACE> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n2.addNode(n9); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Initializer(n0); }
}

InitializerList InitializerList() :
{
   Initializer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Initializer()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new InitializerList(n0,n1); }
}

TypeName TypeName() :
{
   SpecifierQualifierList n0;
   NodeOptional n1 = new NodeOptional();
   AbstractDeclarator n2;

   
}
{
   n0=SpecifierQualifierList()
   (
      n2=AbstractDeclarator()
      { n1.addNode(n2); }
   )?
   
   { return new TypeName(n0,n1); }
}

AbstractDeclarator AbstractDeclarator() :
{
   NodeChoice n0;
   NodeSequence n1;
   Pointer n2;
   NodeOptional n3 = new NodeOptional();
   DirectAbstractDeclarator n4;
   DirectAbstractDeclarator n5;

   
}
{
   (
      (
         LOOKAHEAD(3)
         { n1 = new NodeSequence(3); }
         n2=Pointer()
         { n1.addNode(n2); }
         (
            n4=DirectAbstractDeclarator()
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n5=DirectAbstractDeclarator()
         { n0 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new AbstractDeclarator(n0); }
}

DirectAbstractDeclarator DirectAbstractDeclarator() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   AbstractDeclarator n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ConstantExpression n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   ParameterTypeList n18;
   NodeToken n19;
   Token n20;
   NodeListOptional n21 = new NodeListOptional();
   NodeChoice n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   ConstantExpression n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33;
   ParameterTypeList n34;
   NodeToken n35;
   Token n36;

   
}
{
   (
      (
         LOOKAHEAD(2)
         { n1 = new NodeSequence(4); }
         n3=<LEFTPAREN> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=AbstractDeclarator()
         { n1.addNode(n4); }
         n6=<RIGHTPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(3); }
         n9=<LEFTBRACKET> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n11=ConstantExpression()
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         n13=<RIGHTBRACKET> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7.addNode(n12); }
         { n0 = new NodeChoice(n7, 1); }
      |
         { n14 = new NodeSequence(3); }
         n16=<LEFTPAREN> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         (
            n18=ParameterTypeList()
            { n17.addNode(n18); }
         )?
         { n14.addNode(n17); }
         n20=<RIGHTPAREN> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n14.addNode(n19); }
         { n0 = new NodeChoice(n14, 2); }
      )
      
   )
   (
      { n26 = new NodeOptional(); }
      { n33 = new NodeOptional(); }
      (
         { n23 = new NodeSequence(3); }
         n25=<LEFTBRACKET> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         (
            n27=ConstantExpression()
            { n26.addNode(n27); }
         )?
         { n23.addNode(n26); }
         n29=<RIGHTBRACKET> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n23.addNode(n28); }
         { n22 = new NodeChoice(n23, 0); }
      |
         { n30 = new NodeSequence(3); }
         n32=<LEFTPAREN> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n30.addNode(n31); }
         (
            n34=ParameterTypeList()
            { n33.addNode(n34); }
         )?
         { n30.addNode(n33); }
         n36=<RIGHTPAREN> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n30.addNode(n35); }
         { n22 = new NodeChoice(n30, 1); }
      )
      { n21.addNode(n22); }
   )*
   { n21.nodes.trimToSize(); }
   
   { return new DirectAbstractDeclarator(n0,n21); }
}

TypedefName TypedefName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TypedefName(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   LabeledStatement n1;
   ExpressionStatement n2;
   CompoundStatement n3;
   SelectionStatement n4;
   IterationStatement n5;
   JumpStatement n6;
   UnknownPragma n7;
   OmpConstruct n8;
   OmpDirective n9;
   UnknownCpp n10;

   
}
{
   (
      (
         LOOKAHEAD(2)
         n1=LabeledStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=ExpressionStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=CompoundStatement()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=SelectionStatement()
         { n0 = new NodeChoice(n4, 3); }
      |
         n5=IterationStatement()
         { n0 = new NodeChoice(n5, 4); }
      |
         n6=JumpStatement()
         { n0 = new NodeChoice(n6, 5); }
      |
         LOOKAHEAD(4)
         n7=UnknownPragma()
         { n0 = new NodeChoice(n7, 6); }
      |
         LOOKAHEAD(4)
         n8=OmpConstruct()
         { n0 = new NodeChoice(n8, 7); }
      |
         LOOKAHEAD(2)
         n9=OmpDirective()
         { n0 = new NodeChoice(n9, 8); }
      |
         n10=UnknownCpp()
         { n0 = new NodeChoice(n10, 9); }
      )
      
   )
   
   { return new Statement(n0); }
}

UnknownCpp UnknownCpp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<CROSSBAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<UNKNOWN_CPP> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new UnknownCpp(n0,n2); }
}

OmpEol OmpEol() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<OMP_CR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<OMP_NL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new OmpEol(n0); }
}

OmpConstruct OmpConstruct() :
{
   OmpPragma n0;
   NodeChoice n1;
   ParallelConstruct n2;
   ParallelForConstruct n3;
   ParallelSectionsConstruct n4;
   ForConstruct n5;
   SectionsConstruct n6;
   SingleConstruct n7;
   MasterConstruct n8;
   CriticalConstruct n9;
   AtomicConstruct n10;
   OrderedConstruct n11;

   
}
{
   n0=OmpPragma()
   (
      (
         LOOKAHEAD(2)
         n2=ParallelConstruct()
         { n1 = new NodeChoice(n2, 0); }
      |
         LOOKAHEAD(2)
         n3=ParallelForConstruct()
         { n1 = new NodeChoice(n3, 1); }
      |
         LOOKAHEAD(2)
         n4=ParallelSectionsConstruct()
         { n1 = new NodeChoice(n4, 2); }
      |
         n5=ForConstruct()
         { n1 = new NodeChoice(n5, 3); }
      |
         n6=SectionsConstruct()
         { n1 = new NodeChoice(n6, 4); }
      |
         n7=SingleConstruct()
         { n1 = new NodeChoice(n7, 5); }
      |
         n8=MasterConstruct()
         { n1 = new NodeChoice(n8, 6); }
      |
         n9=CriticalConstruct()
         { n1 = new NodeChoice(n9, 7); }
      |
         n10=AtomicConstruct()
         { n1 = new NodeChoice(n10, 8); }
      |
         n11=OrderedConstruct()
         { n1 = new NodeChoice(n11, 9); }
      )
      
   )
   
   { return new OmpConstruct(n0,n1); }
}

OmpDirective OmpDirective() :
{
   OmpPragma n0;
   NodeChoice n1;
   BarrierDirective n2;
   FlushDirective n3;

   
}
{
   n0=OmpPragma()
   (
      (
         n2=BarrierDirective()
         { n1 = new NodeChoice(n2, 0); }
      |
         n3=FlushDirective()
         { n1 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new OmpDirective(n0,n1); }
}

ParallelConstruct ParallelConstruct() :
{
   ParallelDirective n0;
   Statement n1;

   
}
{
   n0=ParallelDirective()
   n1=Statement()
   
   { return new ParallelConstruct(n0,n1); }
}

OmpPragma OmpPragma() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<CROSSBAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PRAGMA> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<OMP> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new OmpPragma(n0,n2,n4); }
}

UnknownPragma UnknownPragma() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<CROSSBAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PRAGMA> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<UNKNOWN_CPP> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new UnknownPragma(n0,n2,n4); }
}

ParallelDirective ParallelDirective() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   UniqueParallelClause n4;
   DataClause n5;
   OmpEol n6;

   
}
{
   n1=<PARALLEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=UniqueParallelClause()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=DataClause()
         { n3 = new NodeChoice(n5, 1); }
      )
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n6=OmpEol()
   
   { return new ParallelDirective(n0,n2,n6); }
}

UniqueParallelClause UniqueParallelClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<LEFTPAREN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=<RIGHTPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new UniqueParallelClause(n0,n2,n4,n5); }
}

ForConstruct ForConstruct() :
{
   ForDirective n0;
   OmpForHeader n1;
   Statement n2;

   
}
{
   n0=ForDirective()
   n1=OmpForHeader()
   n2=Statement()
   
   { return new ForConstruct(n0,n1,n2); }
}

ForDirective ForDirective() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   UniqueForClause n4;
   DataClause n5;
   NodeToken n6;
   Token n7;
   OmpEol n8;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=UniqueForClause()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=DataClause()
         { n3 = new NodeChoice(n5, 1); }
      |
         n7=<NOWAIT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 2); }
      )
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n8=OmpEol()
   
   { return new ForDirective(n0,n2,n8); }
}

UniqueForClause UniqueForClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ScheduleKind n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Expression n13;
   NodeToken n14;
   Token n15;

   
}
{
   (
      n2=<ORDERED> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(5); }
      n5=<SCHEDULE> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<LEFTPAREN> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      n8=ScheduleKind()
      { n3.addNode(n8); }
      (
         { n10 = new NodeSequence(2); }
         n12=<COMMA> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=Expression()
         { n10.addNode(n13); }
         { n9.addNode(n10); }
      )?
      { n3.addNode(n9); }
      n15=<RIGHTPAREN> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n3.addNode(n14); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new UniqueForClause(n0); }
}

ScheduleKind ScheduleKind() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<STATIC> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DYNAMIC> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<GUIDED> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<RUNTIME> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new ScheduleKind(n0); }
}

OmpForHeader OmpForHeader() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   OmpForInitExpression n4;
   NodeToken n5;
   Token n6;
   OmpForCondition n7;
   NodeToken n8;
   Token n9;
   OmpForReinitExpression n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<LEFTPAREN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=OmpForInitExpression()
   n6=<SEMICOLON> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=OmpForCondition()
   n9=<SEMICOLON> { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=OmpForReinitExpression()
   n12=<RIGHTPAREN> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new OmpForHeader(n0,n2,n4,n5,n7,n8,n10,n11); }
}

OmpForInitExpression OmpForInitExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<OP_ASS> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new OmpForInitExpression(n0,n2,n4); }
}

OmpForCondition OmpForCondition() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   Expression n11;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<OP_LT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<OP_LE> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n8=<OP_GT> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 2); }
      |
         n10=<OP_GE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2 = new NodeChoice(n9, 3); }
      )
      
   )
   n11=Expression()
   
   { return new OmpForCondition(n0,n2,n11); }
}

OmpForReinitExpression OmpForReinitExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeChoice n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Expression n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeChoice n31;
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeChoice n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   AdditiveExpression n40;
   NodeSequence n41;
   MultiplicativeExpression n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(3); }
      (
         (
            n4=<OP_INCR> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<OP_DECR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      n8=<IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      { n9 = new NodeSequence(3); }
      n11=<IDENTIFIER> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         (
            n14=<OP_INCR> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12 = new NodeChoice(n13, 0); }
         |
            n16=<OP_DECR> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n12 = new NodeChoice(n15, 1); }
         )
         
      )
      { n9.addNode(n12); }
      { n0 = new NodeChoice(n9, 1); }
   |
      LOOKAHEAD(2)
      { n17 = new NodeSequence(4); }
      n19=<IDENTIFIER> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      (
         (
            n22=<OP_ADDASS> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20 = new NodeChoice(n21, 0); }
         |
            n24=<OP_SUBASS> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n20 = new NodeChoice(n23, 1); }
         )
         
      )
      { n17.addNode(n20); }
      n25=Expression()
      { n17.addNode(n25); }
      { n0 = new NodeChoice(n17, 2); }
   |
      { n26 = new NodeSequence(3); }
      n28=<IDENTIFIER> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
      n30=<OP_ASS> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n26.addNode(n29); }
      (
         (
            LOOKAHEAD(2)
            { n32 = new NodeSequence(4); }
            n34=<IDENTIFIER> { n33 = JTBToolkit.makeNodeToken(n34); }
            { n32.addNode(n33); }
            (
               (
                  n37=<OP_ADD> { n36 = JTBToolkit.makeNodeToken(n37); }
                  { n35 = new NodeChoice(n36, 0); }
               |
                  n39=<OP_SUB> { n38 = JTBToolkit.makeNodeToken(n39); }
                  { n35 = new NodeChoice(n38, 1); }
               )
               
            )
            { n32.addNode(n35); }
            n40=AdditiveExpression()
            { n32.addNode(n40); }
            { n31 = new NodeChoice(n32, 0); }
         |
            { n41 = new NodeSequence(3); }
            n42=MultiplicativeExpression()
            { n41.addNode(n42); }
            n44=<OP_ADD> { n43 = JTBToolkit.makeNodeToken(n44); }
            { n41.addNode(n43); }
            n46=<IDENTIFIER> { n45 = JTBToolkit.makeNodeToken(n46); }
            { n41.addNode(n45); }
            { n31 = new NodeChoice(n41, 1); }
         )
         
      )
      { n26.addNode(n31); }
      { n0 = new NodeChoice(n26, 3); }
   )
   
   { return new OmpForReinitExpression(n0); }
}

SectionsConstruct SectionsConstruct() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   DataClause n6;
   OmpEol n7;
   SectionsScope n8;

   
}
{
   n1=<SECTIONS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<NOWAIT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n6=DataClause()
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n7=OmpEol()
   n8=SectionsScope()
   
   { return new SectionsConstruct(n0,n2,n7,n8); }
}

SectionsScope SectionsScope() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Statement n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   OmpPragma n6;
   NodeToken n7;
   Token n8;
   OmpEol n9;
   Statement n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<LEFTBRACE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      n3=Statement()
      { n2.addNode(n3); }
   )?
   (
      { n5 = new NodeSequence(4); }
      n6=OmpPragma()
      { n5.addNode(n6); }
      n8=<SECTION> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      n9=OmpEol()
      { n5.addNode(n9); }
      n10=Statement()
      { n5.addNode(n10); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n12=<RIGHTBRACE> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new SectionsScope(n0,n2,n4,n11); }
}

SingleConstruct SingleConstruct() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   DataClause n6;
   OmpEol n7;
   Statement n8;

   
}
{
   n1=<SINGLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<NOWAIT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n6=DataClause()
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n7=OmpEol()
   n8=Statement()
   
   { return new SingleConstruct(n0,n2,n7,n8); }
}

ParallelForConstruct ParallelForConstruct() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeChoice n5;
   UniqueParallelClause n6;
   UniqueForClause n7;
   DataClause n8;
   OmpEol n9;
   OmpForHeader n10;
   Statement n11;

   
}
{
   n1=<PARALLEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FOR> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=UniqueParallelClause()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=UniqueForClause()
         { n5 = new NodeChoice(n7, 1); }
      |
         n8=DataClause()
         { n5 = new NodeChoice(n8, 2); }
      )
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n9=OmpEol()
   n10=OmpForHeader()
   n11=Statement()
   
   { return new ParallelForConstruct(n0,n2,n4,n9,n10,n11); }
}

ParallelSectionsConstruct ParallelSectionsConstruct() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeChoice n5;
   UniqueParallelClause n6;
   DataClause n7;
   OmpEol n8;
   SectionsScope n9;

   
}
{
   n1=<PARALLEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTIONS> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=UniqueParallelClause()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=DataClause()
         { n5 = new NodeChoice(n7, 1); }
      )
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n8=OmpEol()
   n9=SectionsScope()
   
   { return new ParallelSectionsConstruct(n0,n2,n4,n8,n9); }
}

MasterConstruct MasterConstruct() :
{
   NodeToken n0;
   Token n1;
   OmpEol n2;
   Statement n3;

   
}
{
   n1=<MASTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=OmpEol()
   n3=Statement()
   
   { return new MasterConstruct(n0,n2,n3); }
}

CriticalConstruct CriticalConstruct() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   OmpEol n10;
   Statement n11;

   
}
{
   n1=<CRITICAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<LEFTPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      n9=<RIGHTPAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n3.addNode(n8); }
      { n2.addNode(n3); }
   )?
   n10=OmpEol()
   n11=Statement()
   
   { return new CriticalConstruct(n0,n2,n10,n11); }
}

AtomicConstruct AtomicConstruct() :
{
   NodeToken n0;
   Token n1;
   OmpEol n2;
   ExpressionStatement n3;

   
}
{
   n1=<ATOMIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=OmpEol()
   n3=ExpressionStatement()
   
   { return new AtomicConstruct(n0,n2,n3); }
}

FlushDirective FlushDirective() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   VariableList n6;
   NodeToken n7;
   Token n8;
   OmpEol n9;

   
}
{
   n1=<FLUSH> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      { n3 = new NodeSequence(3); }
      n5=<LEFTPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=VariableList()
      { n3.addNode(n6); }
      n8=<RIGHTPAREN> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   n9=OmpEol()
   
   { return new FlushDirective(n0,n2,n9); }
}

OrderedConstruct OrderedConstruct() :
{
   NodeToken n0;
   Token n1;
   OmpEol n2;
   Statement n3;

   
}
{
   n1=<ORDERED> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=OmpEol()
   n3=Statement()
   
   { return new OrderedConstruct(n0,n2,n3); }
}

BarrierDirective BarrierDirective() :
{
   NodeToken n0;
   Token n1;
   OmpEol n2;

   
}
{
   n1=<BARRIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=OmpEol()
   
   { return new BarrierDirective(n0,n2); }
}

ThreadprivateDirective ThreadprivateDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   VariableList n5;
   NodeToken n6;
   Token n7;
   OmpEol n8;

   
}
{
   n0=OmpPragma()
   n2=<THREADPRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LEFTPAREN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=VariableList()
   n7=<RIGHTPAREN> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=OmpEol()
   
   { return new ThreadprivateDirective(n0,n1,n3,n5,n6,n8); }
}

DataClause DataClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   VariableList n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   VariableList n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   VariableList n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   VariableList n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   VariableList n38;
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeChoice n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeSequence n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   ReductionOp n58;
   NodeToken n59;
   Token n60;
   VariableList n61;
   NodeToken n62;
   Token n63;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<PRIVATE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<LEFTPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n6=VariableList()
      { n1.addNode(n6); }
      n8=<RIGHTPAREN> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(4); }
      n11=<FIRSTPRIVATE> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<LEFTPAREN> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      n14=VariableList()
      { n9.addNode(n14); }
      n16=<RIGHTPAREN> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n9.addNode(n15); }
      { n0 = new NodeChoice(n9, 1); }
   |
      { n17 = new NodeSequence(4); }
      n19=<LASTPRIVATE> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n21=<LEFTPAREN> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n17.addNode(n20); }
      n22=VariableList()
      { n17.addNode(n22); }
      n24=<RIGHTPAREN> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n17.addNode(n23); }
      { n0 = new NodeChoice(n17, 2); }
   |
      { n25 = new NodeSequence(4); }
      n27=<SHARED> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      n29=<LEFTPAREN> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n25.addNode(n28); }
      n30=VariableList()
      { n25.addNode(n30); }
      n32=<RIGHTPAREN> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n25.addNode(n31); }
      { n0 = new NodeChoice(n25, 3); }
   |
      { n33 = new NodeSequence(4); }
      n35=<COPYIN> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      n37=<LEFTPAREN> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n33.addNode(n36); }
      n38=VariableList()
      { n33.addNode(n38); }
      n40=<RIGHTPAREN> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n33.addNode(n39); }
      { n0 = new NodeChoice(n33, 4); }
   |
      { n41 = new NodeSequence(4); }
      n43=<DFLT> { n42 = JTBToolkit.makeNodeToken(n43); }
      { n41.addNode(n42); }
      n45=<LEFTPAREN> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n41.addNode(n44); }
      (
         (
            n48=<SHARED> { n47 = JTBToolkit.makeNodeToken(n48); }
            { n46 = new NodeChoice(n47, 0); }
         |
            n50=<NONE> { n49 = JTBToolkit.makeNodeToken(n50); }
            { n46 = new NodeChoice(n49, 1); }
         )
         
      )
      { n41.addNode(n46); }
      n52=<RIGHTPAREN> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n41.addNode(n51); }
      { n0 = new NodeChoice(n41, 5); }
   |
      { n53 = new NodeSequence(6); }
      n55=<REDUCTION> { n54 = JTBToolkit.makeNodeToken(n55); }
      { n53.addNode(n54); }
      n57=<LEFTPAREN> { n56 = JTBToolkit.makeNodeToken(n57); }
      { n53.addNode(n56); }
      n58=ReductionOp()
      { n53.addNode(n58); }
      n60=<COLON> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n53.addNode(n59); }
      n61=VariableList()
      { n53.addNode(n61); }
      n63=<RIGHTPAREN> { n62 = JTBToolkit.makeNodeToken(n63); }
      { n53.addNode(n62); }
      { n0 = new NodeChoice(n53, 6); }
   )
   
   { return new DataClause(n0); }
}

ReductionOp ReductionOp() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2=<OP_ADD> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<OP_MUL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<OP_SUB> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<OP_BITAND> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<OP_BITXOR> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<OP_BITOR> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<OP_OR> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<OP_AND> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new ReductionOp(n0); }
}

VariableList VariableList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<COMMA> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new VariableList(n0,n2); }
}

LabeledStatement LabeledStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Statement n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   ConstantExpression n10;
   NodeToken n11;
   Token n12;
   Statement n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   Statement n19;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<COLON> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=Statement()
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(4); }
         n9=<CASE> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=ConstantExpression()
         { n7.addNode(n10); }
         n12=<COLON> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n7.addNode(n11); }
         n13=Statement()
         { n7.addNode(n13); }
         { n0 = new NodeChoice(n7, 1); }
      |
         { n14 = new NodeSequence(3); }
         n16=<DFLT> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n18=<COLON> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n14.addNode(n17); }
         n19=Statement()
         { n14.addNode(n19); }
         { n0 = new NodeChoice(n14, 2); }
      )
      
   )
   
   { return new LabeledStatement(n0); }
}

ExpressionStatement ExpressionStatement() :
{
   NodeOptional n0 = new NodeOptional();
   Expression n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=Expression()
      { n0.addNode(n1); }
   )?
   n3=<SEMICOLON> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExpressionStatement(n0,n2); }
}

CompoundStatement CompoundStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   DeclarationList n3;
   NodeOptional n4 = new NodeOptional();
   StatementList n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<LEFTBRACE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(DeclarationList())
      n3=DeclarationList()
      { n2.addNode(n3); }
   )?
   (
      n5=StatementList()
      { n4.addNode(n5); }
   )?
   n7=<RIGHTBRACE> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new CompoundStatement(n0,n2,n4,n6); }
}

StatementList StatementList() :
{
   NodeList n0 = new NodeList();
   Statement n1;

   
}
{
   (
      n1=Statement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StatementList(n0); }
}

SelectionStatement SelectionStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   Statement n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   Statement n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   Expression n20;
   NodeToken n21;
   Token n22;
   Statement n23;

   
}
{
   (
      (
         { n1 = new NodeSequence(6); }
         n3=<IF> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<LEFTPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=Expression()
         { n1.addNode(n6); }
         n8=<RIGHTPAREN> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n1.addNode(n7); }
         n9=Statement()
         { n1.addNode(n9); }
         (
            LOOKAHEAD(2)
            { n11 = new NodeSequence(2); }
            n13=<ELSE> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            n14=Statement()
            { n11.addNode(n14); }
            { n10.addNode(n11); }
         )?
         { n1.addNode(n10); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n15 = new NodeSequence(5); }
         n17=<SWITCH> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
         n19=<LEFTPAREN> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n15.addNode(n18); }
         n20=Expression()
         { n15.addNode(n20); }
         n22=<RIGHTPAREN> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n15.addNode(n21); }
         n23=Statement()
         { n15.addNode(n23); }
         { n0 = new NodeChoice(n15, 1); }
      )
      
   )
   
   { return new SelectionStatement(n0); }
}

IterationStatement IterationStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   Statement n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Statement n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   Expression n29;
   NodeToken n30;
   Token n31;
   NodeOptional n32 = new NodeOptional();
   Expression n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   Expression n37;
   NodeToken n38;
   Token n39;
   Statement n40;

   
}
{
   (
      (
         { n1 = new NodeSequence(5); }
         n3=<WHILE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<LEFTPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=Expression()
         { n1.addNode(n6); }
         n8=<RIGHTPAREN> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n1.addNode(n7); }
         n9=Statement()
         { n1.addNode(n9); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n10 = new NodeSequence(7); }
         n12=<DO> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=Statement()
         { n10.addNode(n13); }
         n15=<WHILE> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n10.addNode(n14); }
         n17=<LEFTPAREN> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n10.addNode(n16); }
         n18=Expression()
         { n10.addNode(n18); }
         n20=<RIGHTPAREN> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n10.addNode(n19); }
         n22=<SEMICOLON> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n10.addNode(n21); }
         { n0 = new NodeChoice(n10, 1); }
      |
         { n23 = new NodeSequence(9); }
         n25=<FOR> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         n27=<LEFTPAREN> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n23.addNode(n26); }
         (
            n29=Expression()
            { n28.addNode(n29); }
         )?
         { n23.addNode(n28); }
         n31=<SEMICOLON> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n23.addNode(n30); }
         (
            n33=Expression()
            { n32.addNode(n33); }
         )?
         { n23.addNode(n32); }
         n35=<SEMICOLON> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n23.addNode(n34); }
         (
            n37=Expression()
            { n36.addNode(n37); }
         )?
         { n23.addNode(n36); }
         n39=<RIGHTPAREN> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n23.addNode(n38); }
         n40=Statement()
         { n23.addNode(n40); }
         { n0 = new NodeChoice(n23, 2); }
      )
      
   )
   
   { return new IterationStatement(n0); }
}

JumpStatement JumpStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   Expression n22;
   NodeToken n23;
   Token n24;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<GOTO> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n7=<SEMICOLON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n8 = new NodeSequence(2); }
         n10=<CONTINUE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<SEMICOLON> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         { n0 = new NodeChoice(n8, 1); }
      |
         { n13 = new NodeSequence(2); }
         n15=<BREAK> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         n17=<SEMICOLON> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13.addNode(n16); }
         { n0 = new NodeChoice(n13, 2); }
      |
         { n18 = new NodeSequence(3); }
         n20=<RETURN> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         (
            n22=Expression()
            { n21.addNode(n22); }
         )?
         { n18.addNode(n21); }
         n24=<SEMICOLON> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n18.addNode(n23); }
         { n0 = new NodeChoice(n18, 3); }
      )
      
   )
   
   { return new JumpStatement(n0); }
}

Expression Expression() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Expression(n0,n1); }
}

AssignmentExpression AssignmentExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   UnaryExpression n2;
   AssignmentOperator n3;
   AssignmentExpression n4;
   ConditionalExpression n5;

   
}
{
   (
      LOOKAHEAD(UnaryExpression() AssignmentOperator())
      { n1 = new NodeSequence(4); }
      n2=UnaryExpression()
      { n1.addNode(n2); }
      n3=AssignmentOperator()
      { n1.addNode(n3); }
      n4=AssignmentExpression()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n5=ConditionalExpression()
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new AssignmentExpression(n0); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      (
         n2=<OP_ASS> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<OP_MULASS> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<OP_DIVASS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<OP_MODASS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<OP_ADDASS> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<OP_SUBASS> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<OP_SLASS> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<OP_SRASS> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<OP_ANDASS> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20=<OP_XORASS> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      |
         n22=<OP_ORASS> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 10); }
      )
      
   )
   
   { return new AssignmentOperator(n0); }
}

ConditionalExpression ConditionalExpression() :
{
   LogicalORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   ConditionalExpression n8;

   
}
{
   n0=LogicalORExpression()
   (
      { n2 = new NodeSequence(4); }
      n4=<QUESTION> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      n7=<COLON> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      n8=ConditionalExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new ConditionalExpression(n0,n1); }
}

ConstantExpression ConstantExpression() :
{
   ConditionalExpression n0;

   
}
{
   n0=ConditionalExpression()
   
   { return new ConstantExpression(n0); }
}

LogicalORExpression LogicalORExpression() :
{
   LogicalANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalORExpression n5;

   
}
{
   n0=LogicalANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<OP_OR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalORExpression(n0,n1); }
}

LogicalANDExpression LogicalANDExpression() :
{
   InclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalANDExpression n5;

   
}
{
   n0=InclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<OP_AND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalANDExpression(n0,n1); }
}

InclusiveORExpression InclusiveORExpression() :
{
   ExclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveORExpression n5;

   
}
{
   n0=ExclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<OP_BITOR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InclusiveORExpression(n0,n1); }
}

ExclusiveORExpression ExclusiveORExpression() :
{
   ANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveORExpression n5;

   
}
{
   n0=ANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<OP_BITXOR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ExclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ExclusiveORExpression(n0,n1); }
}

ANDExpression ANDExpression() :
{
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ANDExpression n5;

   
}
{
   n0=EqualityExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<OP_BITAND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ANDExpression(n0,n1); }
}

EqualityExpression EqualityExpression() :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   EqualityExpression n8;

   
}
{
   n0=RelationalExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<OP_EQ> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OP_NEQ> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=EqualityExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

RelationalExpression RelationalExpression() :
{
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   RelationalExpression n12;

   
}
{
   n0=ShiftExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<OP_LT> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OP_GT> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<OP_LE> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         |
            n11=<OP_GE> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3 = new NodeChoice(n10, 3); }
         )
         
      )
      { n2.addNode(n3); }
      n12=RelationalExpression()
      { n2.addNode(n12); }
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExpression(n0,n1); }
}

ShiftExpression ShiftExpression() :
{
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ShiftExpression n8;

   
}
{
   n0=AdditiveExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<OP_SL> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OP_SR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=ShiftExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new ShiftExpression(n0,n1); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   AdditiveExpression n8;

   
}
{
   n0=MultiplicativeExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<OP_ADD> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OP_SUB> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=AdditiveExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new AdditiveExpression(n0,n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   CastExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   MultiplicativeExpression n10;

   
}
{
   n0=CastExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<OP_MUL> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OP_DIV> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<OP_MOD> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n10=MultiplicativeExpression()
      { n2.addNode(n10); }
      { n1.addNode(n2); }
   )?
   
   { return new MultiplicativeExpression(n0,n1); }
}

CastExpression CastExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   TypeName n4;
   NodeToken n5;
   Token n6;
   CastExpression n7;
   UnaryExpression n8;

   
}
{
   (
      (
         LOOKAHEAD(<LEFTPAREN> TypeName() <RIGHTPAREN> CastExpression())
         { n1 = new NodeSequence(5); }
         n3=<LEFTPAREN> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=TypeName()
         { n1.addNode(n4); }
         n6=<RIGHTPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         n7=CastExpression()
         { n1.addNode(n7); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8=UnaryExpression()
         { n0 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new CastExpression(n0); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   PostfixExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   UnaryExpression n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   UnaryExpression n9;
   NodeSequence n10;
   UnaryOperator n11;
   CastExpression n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeChoice n16;
   UnaryExpression n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   TypeName n21;
   NodeToken n22;
   Token n23;

   
}
{
   (
      (
         LOOKAHEAD(3)
         n1=PostfixExpression()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(2); }
         n4=<OP_INCR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=UnaryExpression()
         { n2.addNode(n5); }
         { n0 = new NodeChoice(n2, 1); }
      |
         { n6 = new NodeSequence(2); }
         n8=<OP_DECR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=UnaryExpression()
         { n6.addNode(n9); }
         { n0 = new NodeChoice(n6, 2); }
      |
         { n10 = new NodeSequence(2); }
         n11=UnaryOperator()
         { n10.addNode(n11); }
         n12=CastExpression()
         { n10.addNode(n12); }
         { n0 = new NodeChoice(n10, 3); }
      |
         { n13 = new NodeSequence(2); }
         n15=<SIZEOF> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         (
            (
               LOOKAHEAD(UnaryExpression())
               n17=UnaryExpression()
               { n16 = new NodeChoice(n17, 0); }
            |
               { n18 = new NodeSequence(3); }
               n20=<LEFTPAREN> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
               n21=TypeName()
               { n18.addNode(n21); }
               n23=<RIGHTPAREN> { n22 = JTBToolkit.makeNodeToken(n23); }
               { n18.addNode(n22); }
               { n16 = new NodeChoice(n18, 1); }
            )
            
         )
         { n13.addNode(n16); }
         { n0 = new NodeChoice(n13, 4); }
      )
      
   )
   
   { return new UnaryExpression(n0); }
}

UnaryOperator UnaryOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      (
         n2=<OP_BITAND> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<OP_MUL> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<OP_ADD> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<OP_SUB> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<OP_BITNOT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<OP_NOT> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      )
      
   )
   
   { return new UnaryOperator(n0); }
}

PostfixExpression PostfixExpression() :
{
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   ArgumentExpressionList n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;

   
}
{
   n0=PrimaryExpression()
   (
      { n12 = new NodeOptional(); }
      (
         { n3 = new NodeSequence(3); }
         n5=<LEFTBRACKET> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Expression()
         { n3.addNode(n6); }
         n8=<RIGHTBRACKET> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n9 = new NodeSequence(3); }
         n11=<LEFTPAREN> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            LOOKAHEAD(ArgumentExpressionList())
            n13=ArgumentExpressionList()
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         n15=<RIGHTPAREN> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n9.addNode(n14); }
         { n2 = new NodeChoice(n9, 1); }
      |
         { n16 = new NodeSequence(2); }
         n18=<DOT> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
         n20=<IDENTIFIER> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n16.addNode(n19); }
         { n2 = new NodeChoice(n16, 2); }
      |
         { n21 = new NodeSequence(2); }
         n23=<OP_DEREF> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         n25=<IDENTIFIER> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n21.addNode(n24); }
         { n2 = new NodeChoice(n21, 3); }
      |
         n27=<OP_INCR> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n2 = new NodeChoice(n26, 4); }
      |
         n29=<OP_DECR> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n2 = new NodeChoice(n28, 5); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PostfixExpression(n0,n1); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Constant n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      (
         n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n3=Constant()
         { n0 = new NodeChoice(n3, 1); }
      |
         { n4 = new NodeSequence(3); }
         n6=<LEFTPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=Expression()
         { n4.addNode(n7); }
         n9=<RIGHTPAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n4.addNode(n8); }
         { n0 = new NodeChoice(n4, 2); }
      )
      
   )
   
   { return new PrimaryExpression(n0); }
}

ArgumentExpressionList ArgumentExpressionList() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgumentExpressionList(n0,n1); }
}

Constant Constant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeList n7 = new NodeList();
   NodeToken n8;
   Token n9;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHARACTER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      (
         n9=<STRING_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new Constant(n0); }
}
