/* Generated By:JavaCC: Do not edit this line. CParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 8;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 9;
  /** RegularExpression Id. */
  int HEX_LITERAL = 10;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 11;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 12;
  /** RegularExpression Id. */
  int EXPONENT = 13;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 14;
  /** RegularExpression Id. */
  int STRING_LITERAL = 15;
  /** RegularExpression Id. */
  int __ATTRIBUTE = 22;
  /** RegularExpression Id. */
  int RESTRICT = 23;
  /** RegularExpression Id. */
  int CONTINUE = 24;
  /** RegularExpression Id. */
  int VOLATILE = 25;
  /** RegularExpression Id. */
  int REGISTER = 26;
  /** RegularExpression Id. */
  int UNSIGNED = 27;
  /** RegularExpression Id. */
  int TYPEDEF = 28;
  /** RegularExpression Id. */
  int DFLT = 29;
  /** RegularExpression Id. */
  int DOUBLE = 30;
  /** RegularExpression Id. */
  int SIZEOF = 31;
  /** RegularExpression Id. */
  int SWITCH = 32;
  /** RegularExpression Id. */
  int RETURN = 33;
  /** RegularExpression Id. */
  int EXTERN = 34;
  /** RegularExpression Id. */
  int STRUCT = 35;
  /** RegularExpression Id. */
  int STATIC = 36;
  /** RegularExpression Id. */
  int SIGNED = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int BREAK = 39;
  /** RegularExpression Id. */
  int UNION = 40;
  /** RegularExpression Id. */
  int CONST = 41;
  /** RegularExpression Id. */
  int CCONST = 42;
  /** RegularExpression Id. */
  int FLOAT = 43;
  /** RegularExpression Id. */
  int SHORT = 44;
  /** RegularExpression Id. */
  int ELSE = 45;
  /** RegularExpression Id. */
  int CASE = 46;
  /** RegularExpression Id. */
  int LONG = 47;
  /** RegularExpression Id. */
  int ENUM = 48;
  /** RegularExpression Id. */
  int AUTO = 49;
  /** RegularExpression Id. */
  int VOID = 50;
  /** RegularExpression Id. */
  int CHAR = 51;
  /** RegularExpression Id. */
  int GOTO = 52;
  /** RegularExpression Id. */
  int FOR = 53;
  /** RegularExpression Id. */
  int INT = 54;
  /** RegularExpression Id. */
  int IF = 55;
  /** RegularExpression Id. */
  int DO = 56;
  /** RegularExpression Id. */
  int ELLIPSIS = 57;
  /** RegularExpression Id. */
  int OP_SLASS = 58;
  /** RegularExpression Id. */
  int OP_SRASS = 59;
  /** RegularExpression Id. */
  int OP_EQ = 60;
  /** RegularExpression Id. */
  int OP_AND = 61;
  /** RegularExpression Id. */
  int OP_OR = 62;
  /** RegularExpression Id. */
  int OP_MULASS = 63;
  /** RegularExpression Id. */
  int OP_DIVASS = 64;
  /** RegularExpression Id. */
  int OP_MODASS = 65;
  /** RegularExpression Id. */
  int OP_ADDASS = 66;
  /** RegularExpression Id. */
  int OP_SUBASS = 67;
  /** RegularExpression Id. */
  int OP_ANDASS = 68;
  /** RegularExpression Id. */
  int OP_XORASS = 69;
  /** RegularExpression Id. */
  int OP_ORASS = 70;
  /** RegularExpression Id. */
  int OP_SL = 71;
  /** RegularExpression Id. */
  int OP_SR = 72;
  /** RegularExpression Id. */
  int OP_NEQ = 73;
  /** RegularExpression Id. */
  int OP_GE = 74;
  /** RegularExpression Id. */
  int OP_LE = 75;
  /** RegularExpression Id. */
  int OP_DEREF = 76;
  /** RegularExpression Id. */
  int OP_INCR = 77;
  /** RegularExpression Id. */
  int OP_DECR = 78;
  /** RegularExpression Id. */
  int OP_GT = 79;
  /** RegularExpression Id. */
  int OP_LT = 80;
  /** RegularExpression Id. */
  int OP_ADD = 81;
  /** RegularExpression Id. */
  int OP_SUB = 82;
  /** RegularExpression Id. */
  int OP_MUL = 83;
  /** RegularExpression Id. */
  int OP_DIV = 84;
  /** RegularExpression Id. */
  int OP_MOD = 85;
  /** RegularExpression Id. */
  int OP_ASS = 86;
  /** RegularExpression Id. */
  int OP_BITAND = 87;
  /** RegularExpression Id. */
  int OP_BITOR = 88;
  /** RegularExpression Id. */
  int OP_BITXOR = 89;
  /** RegularExpression Id. */
  int OP_NOT = 90;
  /** RegularExpression Id. */
  int OP_BITNOT = 91;
  /** RegularExpression Id. */
  int COLON = 92;
  /** RegularExpression Id. */
  int SEMICOLON = 93;
  /** RegularExpression Id. */
  int QUESTION = 94;
  /** RegularExpression Id. */
  int DOT = 95;
  /** RegularExpression Id. */
  int LEFTPAREN = 96;
  /** RegularExpression Id. */
  int RIGHTPAREN = 97;
  /** RegularExpression Id. */
  int LEFTBRACKET = 98;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 99;
  /** RegularExpression Id. */
  int LEFTBRACE = 100;
  /** RegularExpression Id. */
  int RIGHTBRACE = 101;
  /** RegularExpression Id. */
  int COMMA = 102;
  /** RegularExpression Id. */
  int CROSSBAR = 103;
  /** RegularExpression Id. */
  int UNKNOWN_CPP = 104;
  /** RegularExpression Id. */
  int PRAGMA = 105;
  /** RegularExpression Id. */
  int OMP_NL = 123;
  /** RegularExpression Id. */
  int OMP_CR = 124;
  /** RegularExpression Id. */
  int OMP = 129;
  /** RegularExpression Id. */
  int PARALLEL = 131;
  /** RegularExpression Id. */
  int SECTIONS = 132;
  /** RegularExpression Id. */
  int SECTION = 133;
  /** RegularExpression Id. */
  int SINGLE = 134;
  /** RegularExpression Id. */
  int ORDERED = 135;
  /** RegularExpression Id. */
  int MASTER = 136;
  /** RegularExpression Id. */
  int CRITICAL = 137;
  /** RegularExpression Id. */
  int ATOMIC = 138;
  /** RegularExpression Id. */
  int BARRIER = 139;
  /** RegularExpression Id. */
  int FLUSH = 140;
  /** RegularExpression Id. */
  int NOWAIT = 141;
  /** RegularExpression Id. */
  int SCHEDULE = 142;
  /** RegularExpression Id. */
  int DYNAMIC = 143;
  /** RegularExpression Id. */
  int GUIDED = 144;
  /** RegularExpression Id. */
  int RUNTIME = 145;
  /** RegularExpression Id. */
  int NONE = 146;
  /** RegularExpression Id. */
  int REDUCTION = 147;
  /** RegularExpression Id. */
  int PRIVATE = 148;
  /** RegularExpression Id. */
  int FIRSTPRIVATE = 149;
  /** RegularExpression Id. */
  int LASTPRIVATE = 150;
  /** RegularExpression Id. */
  int SHARED = 151;
  /** RegularExpression Id. */
  int COPYIN = 152;
  /** RegularExpression Id. */
  int THREADPRIVATE = 153;
  /** RegularExpression Id. */
  int IDENTIFIER = 154;
  /** RegularExpression Id. */
  int LETTER = 155;
  /** RegularExpression Id. */
  int DIGIT = 156;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int AfterCrossbar = 1;
  /** Lexical state. */
  int Pragma = 2;
  /** Lexical state. */
  int Omp = 3;
  /** Lexical state. */
  int AfterAttrib = 4;
  /** Lexical state. */
  int AtAttribEnd = 5;
  /** Lexical state. */
  int Cpp = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"__attribute__\"",
    "\"(\"",
    "\")\"",
    "<token of kind 19>",
    "\"(\"",
    "<token of kind 21>",
    "\")\"",
    "\"__restrict\"",
    "\"continue\"",
    "\"volatile\"",
    "\"register\"",
    "\"unsigned\"",
    "\"typedef\"",
    "\"default\"",
    "\"double\"",
    "\"sizeof\"",
    "\"switch\"",
    "\"return\"",
    "\"extern\"",
    "\"struct\"",
    "\"static\"",
    "\"signed\"",
    "\"while\"",
    "\"break\"",
    "\"union\"",
    "\"const\"",
    "\"__const\"",
    "\"float\"",
    "\"short\"",
    "\"else\"",
    "\"case\"",
    "\"long\"",
    "\"enum\"",
    "\"auto\"",
    "\"void\"",
    "\"char\"",
    "\"goto\"",
    "\"for\"",
    "\"int\"",
    "\"if\"",
    "\"do\"",
    "\"...\"",
    "\"<<=\"",
    "\">>=\"",
    "\"==\"",
    "\"&&\"",
    "\"||\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"<<\"",
    "\">>\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\"->\"",
    "\"++\"",
    "\"--\"",
    "\">\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"~\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"#\"",
    "<UNKNOWN_CPP>",
    "\"pragma\"",
    "\"include\"",
    "\"import\"",
    "\"define\"",
    "\"ifndef\"",
    "\"ident\"",
    "\"undef\"",
    "\"ifdef\"",
    "\"endif\"",
    "\"line\"",
    "<token of kind 115>",
    "<token of kind 116>",
    "\" \"",
    "\"\\t\"",
    "<token of kind 119>",
    "<token of kind 120>",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\r\"",
    "\" \"",
    "\"\\t\"",
    "<token of kind 127>",
    "<token of kind 128>",
    "\"omp\"",
    "<token of kind 130>",
    "\"parallel\"",
    "\"sections\"",
    "\"section\"",
    "\"single\"",
    "\"ordered\"",
    "\"master\"",
    "\"critical\"",
    "\"atomic\"",
    "\"barrier\"",
    "\"flush\"",
    "\"nowait\"",
    "\"schedule\"",
    "\"dynamic\"",
    "\"guided\"",
    "\"runtime\"",
    "\"none\"",
    "\"reduction\"",
    "\"private\"",
    "\"firstprivate\"",
    "\"lastprivate\"",
    "\"shared\"",
    "\"copyin\"",
    "\"threadprivate\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
