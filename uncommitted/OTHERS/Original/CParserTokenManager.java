/* Generated By:JavaCC: Do not edit this line. CParserTokenManager.java */
import java.util.*;
import syntaxtree.*;
import java.util.Vector;

/** Token Manager. */
public class CParserTokenManager implements CParserConstants
{
   static int attributeMatchingParens;

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x80000000L) != 0L)
            return 4;
         if ((active0 & 0x1ffffffff810000L) != 0L)
         {
            jjmatchedKind = 154;
            return 28;
         }
         if ((active1 & 0x100001L) != 0L)
            return 49;
         return -1;
      case 1:
         if ((active0 & 0x180000040000000L) != 0L)
            return 28;
         if ((active0 & 0x7fffffbf810000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 154;
               jjmatchedPos = 1;
            }
            return 28;
         }
         return -1;
      case 2:
         if ((active0 & 0x60000000000000L) != 0L)
            return 28;
         if ((active0 & 0x1fffffff810000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 2;
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0x1fffff810000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
            return 28;
         }
         if ((active0 & 0x1fe00000000000L) != 0L)
            return 28;
         return -1;
      case 4:
         if ((active0 & 0x1bc000000000L) != 0L)
            return 28;
         if ((active0 & 0x43fff810000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 4;
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x3fc0000000L) != 0L)
            return 28;
         if ((active0 & 0x4003f810000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 5;
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0xf810000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 6;
            return 28;
         }
         if ((active0 & 0x40030000000L) != 0L)
            return 28;
         return -1;
      case 7:
         if ((active0 & 0xf000000L) != 0L)
            return 28;
         if ((active0 & 0x810000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x810000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 9;
            return 28;
         }
         if ((active0 & 0x800000L) != 0L)
            return 28;
         return -1;
      case 10:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      case 11:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 11;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 35:
         return jjStopAtPos(0, 103);
      case 37:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 38:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x10L);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2004L);
      case 44:
         return jjStopAtPos(0, 102);
      case 45:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5008L);
      case 46:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 58:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 93);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x880L);
      case 61:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x500L);
      case 63:
         return jjStopAtPos(0, 94);
      case 91:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 99);
      case 94:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x40000810000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8420001000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000060000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1200400000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20080000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x204000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x103980000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10008000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000002000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 100);
      case 124:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x40L);
      case 125:
         return jjStopAtPos(0, 101);
      case 126:
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 60:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 62:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000810000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x224000000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8104000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x280000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x41010008000000L, active1, 0L);
      case 111:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x34820043000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 124:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         break;
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000010000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4014100000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x820001000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x800800000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x600008000000L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x12000600000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000040000000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x88022000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 28);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 28);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x490800000L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 111:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 28);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x50000000000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1101010000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x900000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1001000000L);
      case 107:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 28);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4800000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 28);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 28);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x2010000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 28);
         break;
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 28);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 28);
         break;
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 28);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x9000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x4800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L);
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 28);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 28);
         break;
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 28);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 28);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 154)
                        kind = 154;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(17, 19);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(27, 29);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(35, 8);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(39, 8);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(17, 19);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 47:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 48:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 52:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddStates(33, 35);
                  break;
               case 57:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 59:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 50:
                  jjAddStates(0, 2);
                  break;
               case 55:
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  jjCheckNAddTwoStates(58, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 20);
      case 41:
         return jjStopAtPos(0, 22);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
static private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     kind = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 21)
                     kind = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x80000000L) != 0L)
            return 4;
         if ((active1 & 0x100001L) != 0L)
            return 47;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 121);
      case 13:
         return jjStopAtPos(0, 122);
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200L, 0x0L);
      case 37:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2L, 0x0L);
      case 38:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_2(0x2000000000000000L, 0x10L, 0x0L);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_2(0x8000000000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2004L, 0x0L);
      case 44:
         return jjStopAtPos(0, 102);
      case 45:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x5008L, 0x0L);
      case 46:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_2(0x200000000000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1L, 0x0L);
      case 58:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 93);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_2(0x400000000000000L, 0x880L, 0x0L);
      case 61:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_2(0x1000000000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_2(0x800000000000000L, 0x500L, 0x0L);
      case 63:
         return jjStopAtPos(0, 94);
      case 91:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 99);
      case 94:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x2L);
      case 123:
         return jjStopAtPos(0, 100);
      case 124:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_2(0x4000000000000000L, 0x40L, 0x0L);
      case 125:
         return jjStopAtPos(0, 101);
      case 126:
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 60:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 62:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         return jjMoveStringLiteralDfa2_2(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x2L);
      case 124:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         break;
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 112:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(2, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L, active2);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 47:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 47)
                     jjCheckNAddStates(50, 52);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 59);
                  else if (curChar == 47)
                     jjAddStates(60, 61);
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(62, 64);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 59);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(65, 67);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(65, 67);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(33, 8);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(37, 8);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 8);
                  break;
               case 42:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(62, 64);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(44, 2);
                  break;
               case 45:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(45, 2);
                  break;
               case 46:
                  if (curChar == 47)
                     jjAddStates(60, 61);
                  break;
               case 48:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 49:
                  if ((0x2400L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 50:
                  if (curChar == 10 && kind > 119)
                     kind = 119;
                  break;
               case 51:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddStates(71, 73);
                  break;
               case 55:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               case 56:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               case 57:
                  if (curChar == 47 && kind > 120)
                     kind = 120;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 43:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(44, 2);
                  break;
               case 48:
                  jjAddStates(50, 52);
                  break;
               case 53:
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
               case 56:
                  jjCheckNAddTwoStates(56, 54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(50, 52);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 17);
      case 41:
         return jjStopAtPos(0, 18);
      default :
         return 1;
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x80000000L) != 0L)
            return 4;
         if ((active1 & 0x100001L) != 0L)
            return 50;
         if ((active1 & 0x7fe0000000000L) != 0L)
         {
            jjmatchedKind = 154;
            return 29;
         }
         return -1;
      case 1:
         if ((active1 & 0x7fe0000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 154;
               jjmatchedPos = 1;
            }
            return 29;
         }
         return -1;
      case 2:
         if ((active1 & 0x7fe0000000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 2;
            return 29;
         }
         return -1;
      case 3:
         if ((active1 & 0x3fe0000000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active1 & 0x4000000000000L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active1 & 0x3e0000000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 4;
            return 29;
         }
         if ((active1 & 0x3c00000000000L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active1 & 0x3a0000000000L) != 0L)
            return 29;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200L);
      case 37:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2L);
      case 38:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_1(0x2000000000000000L, 0x10L);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2004L);
      case 44:
         return jjStopAtPos(0, 102);
      case 45:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x5008L);
      case 46:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_1(0x200000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1L);
      case 58:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 93);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_1(0x400000000000000L, 0x880L);
      case 61:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_1(0x1000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_1(0x800000000000000L, 0x500L);
      case 63:
         return jjStopAtPos(0, 94);
      case 91:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 99);
      case 94:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x16c0000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800000000000L);
      case 123:
         return jjStopAtPos(0, 100);
      case 124:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_1(0x4000000000000000L, 0x40L);
      case 125:
         return jjStopAtPos(0, 101);
      case 126:
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000000000L, active1, 0L);
      case 60:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 62:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100000000000L);
      case 102:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1200000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4000000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x2840000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20000000000L);
      case 124:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         break;
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x20000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x3800000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x400000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x4200000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_1(active1, 0x200000000000L);
      case 101:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 114, 29);
         return jjMoveStringLiteralDfa4_1(active1, 0x1800000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_1(active1, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active1, 0x2100000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active1, 0x40000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_1(active1, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, active1);
}
static private int jjMoveStringLiteralDfa4_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_1(active1, 0x200000000000L);
      case 102:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 111, 29);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 112, 29);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 113, 29);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_1(active1, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active1, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active1, 0x80000000000L);
      case 116:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 110, 29);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_1(active1, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, active1);
}
static private int jjMoveStringLiteralDfa5_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 105, 29);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_1(active1, 0x40000000000L);
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 108, 29);
         break;
      case 102:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 109, 29);
         break;
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 107, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, active1);
}
static private int jjMoveStringLiteralDfa6_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 106, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, active1);
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(56, 57);
                  else if (curChar == 47)
                     jjCheckNAddStates(80, 82);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(83, 89);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 47)
                     jjAddStates(90, 91);
                  else if (curChar == 36)
                  {
                     if (kind > 154)
                        kind = 154;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(92, 94);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(83, 89);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(95, 97);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(95, 97);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(36, 8);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(40, 8);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(98, 100);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 8);
                  break;
               case 45:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(92, 94);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 48:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(48, 2);
                  break;
               case 49:
                  if (curChar == 47)
                     jjAddStates(90, 91);
                  break;
               case 51:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(80, 82);
                  break;
               case 52:
                  if ((0x2400L & l) != 0L && kind > 127)
                     kind = 127;
                  break;
               case 53:
                  if (curChar == 10 && kind > 127)
                     kind = 127;
                  break;
               case 54:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 42)
                     jjCheckNAddStates(101, 103);
                  break;
               case 58:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 57);
                  break;
               case 59:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 57);
                  break;
               case 60:
                  if (curChar == 47 && kind > 128)
                     kind = 128;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(29);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(104, 105);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(108, 109);
                  break;
               case 46:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 51:
                  jjAddStates(80, 82);
                  break;
               case 56:
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
               case 59:
                  jjCheckNAddTwoStates(59, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 51:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(80, 82);
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(59, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(1, 0);
}
static private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 10 && kind > 115)
                     kind = 115;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 92)
                     jjAddStates(110, 111);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x80000000L) != 0L)
            return 4;
         if ((active0 & 0x1ffffffff800000L) != 0L || (active2 & 0x3fffff8L) != 0L)
         {
            jjmatchedKind = 154;
            return 28;
         }
         if ((active1 & 0x100001L) != 0L)
            return 49;
         return -1;
      case 1:
         if ((active0 & 0x180000040000000L) != 0L)
            return 28;
         if ((active0 & 0x7fffffbf800000L) != 0L || (active2 & 0x3fffff8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 154;
               jjmatchedPos = 1;
            }
            return 28;
         }
         return -1;
      case 2:
         if ((active0 & 0x60000000000000L) != 0L)
            return 28;
         if ((active0 & 0x1fffffff800000L) != 0L || (active2 & 0x3fffff8L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 2;
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0x1fffff800000L) != 0L || (active2 & 0x3fbfff8L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
            return 28;
         }
         if ((active0 & 0x1fe00000000000L) != 0L || (active2 & 0x40000L) != 0L)
            return 28;
         return -1;
      case 4:
         if ((active0 & 0x1bc000000000L) != 0L || (active2 & 0x1000L) != 0L)
            return 28;
         if ((active0 & 0x43fff800000L) != 0L || (active2 & 0x3fbeff8L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 4;
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x3fc0000000L) != 0L || (active2 & 0x1812540L) != 0L)
            return 28;
         if ((active0 & 0x4003f800000L) != 0L || (active2 & 0x27acab8L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 5;
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0xf800000L) != 0L || (active2 & 0x2684208L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 154;
               jjmatchedPos = 6;
            }
            return 28;
         }
         if ((active0 & 0x40030000000L) != 0L || (active2 & 0x1288b0L) != 0L)
            return 28;
         return -1;
      case 7:
         if ((active0 & 0xf000000L) != 0L || (active2 & 0x4218L) != 0L)
            return 28;
         if ((active0 & 0x800000L) != 0L || (active2 & 0x2680000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active2 & 0x80000L) != 0L)
            return 28;
         if ((active0 & 0x800000L) != 0L || (active2 & 0x2600000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active2 & 0x2600000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 9;
            return 28;
         }
         if ((active0 & 0x800000L) != 0L)
            return 28;
         return -1;
      case 10:
         if ((active2 & 0x400000L) != 0L)
            return 28;
         if ((active2 & 0x2200000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      case 11:
         if ((active2 & 0x200000L) != 0L)
            return 28;
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 11;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 123);
      case 13:
         return jjStopAtPos(0, 124);
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200L, 0x0L);
      case 37:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x2L, 0x0L);
      case 38:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_3(0x2000000000000000L, 0x10L, 0x0L);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_3(0x8000000000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x2004L, 0x0L);
      case 44:
         return jjStopAtPos(0, 102);
      case 45:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x5008L, 0x0L);
      case 46:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_3(0x200000000000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1L, 0x0L);
      case 58:
         return jjStopAtPos(0, 92);
      case 59:
         return jjStopAtPos(0, 93);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_3(0x400000000000000L, 0x880L, 0x0L);
      case 61:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_3(0x1000000000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_3(0x800000000000000L, 0x500L, 0x0L);
      case 63:
         return jjStopAtPos(0, 94);
      case 91:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 99);
      case 94:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x20L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_3(0x40000800000L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x2000000000000L, 0x0L, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x8000000000L, 0x0L, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x8420001000000L, 0x0L, 0x1000200L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x100000060000000L, 0x0L, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x1200400000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x20080000000000L, 0x0L, 0x201000L);
      case 103:
         return jjMoveStringLiteralDfa1_3(0x10000000000000L, 0x0L, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0xc0000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x800000000000L, 0x0L, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x42000L);
      case 111:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x100008L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x204000000L, 0x0L, 0xa0000L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x103980000000L, 0x0L, 0x804070L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x10000000L, 0x0L, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa1_3(0x10008000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x4000002000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_3(0x4000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 100);
      case 124:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_3(0x4000000000000000L, 0x40L, 0x0L);
      case 125:
         return jjStopAtPos(0, 101);
      case 126:
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_3(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 60:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 62:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         return jjMoveStringLiteralDfa2_3(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_3(active0, 0x40000800000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x400000000000L, active1, 0L, active2, 0x400908L);
      case 99:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x224000000L, active1, 0L, active2, 0x80030L);
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 55, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0x8104000000000L, active1, 0L, active2, 0x2800000L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x2080000000L, active1, 0L, active2, 0x200040L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x280000000000L, active1, 0L, active2, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa2_3(active0, 0x41010008000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x34820043000000L, active1, 0L, active2, 0x1042000L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x8000000000L, active1, 0L, active2, 0x100280L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active0, 0x1800000000L, active1, 0L, active2, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000000000L, active1, 0L, active2, 0x30000L);
      case 119:
         return jjMoveStringLiteralDfa2_3(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_3(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active0, 0x10000000L, active1, 0L, active2, 0x8000L);
      case 124:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         break;
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x8001000000000L, active2, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0x40000000000L, active2, 0x30L);
      case 100:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active2, 0x80080L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x8000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_3(active0, 0x20000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_3(active0, 0x2004000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active2, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x4014100000000L, active2, 0x110200L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x820001000000L, active2, 0x68040L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active0, 0x180000000000L, active2, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa3_3(active0, 0x10000000L, active2, 0x1000000L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 53, 28);
         return jjMoveStringLiteralDfa3_3(active0, 0x800800000L, active2, 0x2200808L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x600008000000L, active2, 0x400100L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 54, 28);
         return jjMoveStringLiteralDfa3_3(active0, 0x12000600000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000040000000L, active2, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active2, 0x2000L);
      case 122:
         return jjMoveStringLiteralDfa3_3(active0, 0x80000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa3_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(1, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active0, 0x88022000000L, active2, 0xa008L);
      case 98:
         return jjMoveStringLiteralDfa4_3(active0, 0x40000000L, active2, 0L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 50, 28);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active2, 0x10000L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 45, 28);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 46, 28);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(3, 146, 28);
         return jjMoveStringLiteralDfa4_3(active0, 0x490800000L, active2, 0x2004080L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 47, 28);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active2, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active0, 0xc000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000L, active2, 0L);
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 48, 28);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active2, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 49, 28);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 52, 28);
         return jjMoveStringLiteralDfa4_3(active0, 0x50000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 51, 28);
         return jjMoveStringLiteralDfa4_3(active0, 0x100000000000L, active2, 0x800800L);
      case 115:
         return jjMoveStringLiteralDfa4_3(active0, 0x20000000000L, active2, 0x201000L);
      case 116:
         return jjMoveStringLiteralDfa4_3(active0, 0x1101000000L, active2, 0x420330L);
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0xa00000000L, active2, 0x80000L);
      case 118:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active2, 0x100000L);
      case 121:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa4_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(2, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active2, 0x2100000L);
      case 99:
         return jjMoveStringLiteralDfa5_3(active0, 0x900000000L, active2, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa5_3(active0, 0x10000000L, active2, 0x4000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 38, 28);
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000000L, active2, 0x810100L);
      case 103:
         return jjMoveStringLiteralDfa5_3(active0, 0x8000000L, active2, 0L);
      case 104:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(4, 140, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0x1001000000L, active2, 0x1022e30L);
      case 107:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 39, 28);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_3(active0, 0x40000000L, active2, 0x48L);
      case 109:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active2, 0x8000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 40, 28);
         return jjMoveStringLiteralDfa5_3(active0, 0x40000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_3(active0, 0x80000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active2, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa5_3(active0, 0x600000000L, active2, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa5_3(active0, 0x4800000L, active2, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 41, 28);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 43, 28);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 44, 28);
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000L, active2, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa5_3(active0, 0x20000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa5_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(3, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 36, 28);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(5, 138, 28);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active2, 0x200L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 37, 28);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_3(5, 144, 28);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(5, 151, 28);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active2, 0x2000000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(5, 30, 28);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_3(5, 134, 28);
         return jjMoveStringLiteralDfa6_3(active0, 0x10000000L, active2, 0x880L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(5, 31, 28);
         break;
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(5, 32, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0x2000000L, active2, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa6_3(active0, 0x20000000L, active2, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active2, 0x20000L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_3(5, 33, 28);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_3(5, 34, 28);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(5, 152, 28);
         return jjMoveStringLiteralDfa6_3(active0, 0x9000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active2, 0x30L);
      case 112:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active2, 0x200000L);
      case 114:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(5, 136, 28);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active2, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa6_3(active0, 0x40000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(5, 35, 28);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_3(5, 141, 28);
         return jjMoveStringLiteralDfa6_3(active0, 0x4800000L, active2, 0x180000L);
      case 117:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active2, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_3(4, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa6_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(4, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x200L);
      case 99:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(6, 143, 28);
         break;
      case 100:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(6, 135, 28);
         break;
      case 101:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(6, 145, 28);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(6, 148, 28);
         return jjMoveStringLiteralDfa7_3(active0, 0xc000000L, active2, 0x8L);
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_3(6, 28, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x480000L);
      case 108:
         return jjMoveStringLiteralDfa7_3(active0, 0x2000000L, active2, 0x4000L);
      case 110:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x2000000L);
      case 114:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(6, 139, 28);
         return jjMoveStringLiteralDfa7_3(active0, 0x800000L, active2, 0x200000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(6, 29, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 42, 28);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_3(5, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa7_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(5, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(7, 27, 28);
         break;
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(7, 24, 28);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(7, 25, 28);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_3(7, 142, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_3(active0, 0x800000L, active2, 0x200000L);
      case 108:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_3(7, 131, 28);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(7, 137, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0x80000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(7, 26, 28);
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0x2000000L);
      case 115:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_3(7, 132, 28);
         break;
      case 118:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_3(6, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa8_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(6, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa9_3(active0, 0x800000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x2000000L);
      case 110:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(8, 147, 28);
         break;
      case 118:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa9_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(7, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0, 0L, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x200000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(9, 23, 28);
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_3(8, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa10_3(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(8, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, 0L, active2);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_3(active2, 0x2000000L);
      case 101:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_3(10, 150, 28);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_3(active2, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa11_3(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_3(9, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, 0L, 0L, active2);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(11, 149, 28);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_3(active2, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_3(10, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa12_3(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_3(10, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(11, 0L, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(12, 153, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_3(11, 0L, 0L, active2);
}
static private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 154)
                        kind = 154;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(17, 19);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(27, 29);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(35, 8);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(39, 8);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(17, 19);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 47:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 48:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 52:
                  if (curChar == 10 && kind > 119)
                     kind = 119;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddStates(33, 35);
                  break;
               case 57:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 59:
                  if (curChar == 47 && kind > 120)
                     kind = 120;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 50:
                  jjAddStates(0, 2);
                  break;
               case 55:
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  jjCheckNAddTwoStates(58, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   50, 51, 53, 30, 31, 36, 37, 40, 41, 8, 49, 54, 19, 20, 22, 10, 
   12, 45, 47, 2, 4, 5, 8, 19, 20, 24, 22, 32, 33, 8, 40, 41, 
   8, 56, 57, 59, 6, 7, 13, 14, 16, 21, 23, 25, 34, 35, 38, 39, 
   42, 43, 48, 49, 51, 28, 29, 34, 35, 38, 39, 8, 47, 52, 43, 45, 
   2, 30, 31, 8, 38, 39, 8, 54, 55, 57, 32, 33, 36, 37, 40, 41, 
   51, 52, 54, 31, 32, 37, 38, 41, 42, 8, 50, 55, 46, 48, 2, 33, 
   34, 8, 41, 42, 8, 57, 58, 60, 35, 36, 39, 40, 43, 44, 2, 3, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, 
"\137\137\162\145\163\164\162\151\143\164", "\143\157\156\164\151\156\165\145", "\166\157\154\141\164\151\154\145", 
"\162\145\147\151\163\164\145\162", "\165\156\163\151\147\156\145\144", "\164\171\160\145\144\145\146", 
"\144\145\146\141\165\154\164", "\144\157\165\142\154\145", "\163\151\172\145\157\146", 
"\163\167\151\164\143\150", "\162\145\164\165\162\156", "\145\170\164\145\162\156", 
"\163\164\162\165\143\164", "\163\164\141\164\151\143", "\163\151\147\156\145\144", 
"\167\150\151\154\145", "\142\162\145\141\153", "\165\156\151\157\156", "\143\157\156\163\164", 
"\137\137\143\157\156\163\164", "\146\154\157\141\164", "\163\150\157\162\164", "\145\154\163\145", 
"\143\141\163\145", "\154\157\156\147", "\145\156\165\155", "\141\165\164\157", 
"\166\157\151\144", "\143\150\141\162", "\147\157\164\157", "\146\157\162", "\151\156\164", 
"\151\146", "\144\157", "\56\56\56", "\74\74\75", "\76\76\75", "\75\75", "\46\46", 
"\174\174", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\46\75", "\136\75", 
"\174\75", "\74\74", "\76\76", "\41\75", "\76\75", "\74\75", "\55\76", "\53\53", 
"\55\55", "\76", "\74", "\53", "\55", "\52", "\57", "\45", "\75", "\46", "\174", "\136", 
"\41", "\176", "\72", "\73", "\77", "\56", "\50", "\51", "\133", "\135", "\173", 
"\175", "\54", "\43", null, "\160\162\141\147\155\141", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\12", 
"\15", null, null, null, null, "\157\155\160", null, 
"\160\141\162\141\154\154\145\154", "\163\145\143\164\151\157\156\163", "\163\145\143\164\151\157\156", 
"\163\151\156\147\154\145", "\157\162\144\145\162\145\144", "\155\141\163\164\145\162", 
"\143\162\151\164\151\143\141\154", "\141\164\157\155\151\143", "\142\141\162\162\151\145\162", 
"\146\154\165\163\150", "\156\157\167\141\151\164", "\163\143\150\145\144\165\154\145", 
"\144\171\156\141\155\151\143", "\147\165\151\144\145\144", "\162\165\156\164\151\155\145", 
"\156\157\156\145", "\162\145\144\165\143\164\151\157\156", "\160\162\151\166\141\164\145", 
"\146\151\162\163\164\160\162\151\166\141\164\145", "\154\141\163\164\160\162\151\166\141\164\145", "\163\150\141\162\145\144", 
"\143\157\160\171\151\156", "\164\150\162\145\141\144\160\162\151\166\141\164\145", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "AfterCrossbar",
   "Pragma",
   "Omp",
   "AfterAttrib",
   "AtAttribEnd",
   "Cpp",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, 4, -1, 0, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 1, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 
   -1, -1, -1, -1, 3, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffff80d101L, 0x180003ffffffffffL, 0x7fffffaL, 
};
static final long[] jjtoSkip = {
   0x4000feL, 0xe7e8000000000000L, 0x1L, 
};
static final long[] jjtoSpecial = {
   0x400000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x3f0000L, 0x17fc0000000000L, 0x4L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[61];
static private final int[] jjstateSet = new int[122];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public CParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public CParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 130)
         {
            jjmatchedKind = 130;
         }
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 19)
         {
            jjmatchedKind = 19;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 116)
         {
            jjmatchedKind = 116;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 22 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         attributeMatchingParens--;
         break;
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens = 0;
         break;
      case 17 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens++;
         break;
      case 18 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens--;
         if ( attributeMatchingParens == 1 )
            SwitchTo(AtAttribEnd);
         break;
      case 20 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens++;
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
