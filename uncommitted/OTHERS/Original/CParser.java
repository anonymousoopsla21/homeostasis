/* Generated By:JavaCC: Do not edit this line. CParser.java */
import java.util.*;
import syntaxtree.*;
import java.util.Vector;


public class CParser implements CParserConstants {
   public static Hashtable types = new Hashtable();
   public static Stack typedefParsingStack = new Stack();
   public static boolean isType(String type)
   {
      if ( types.get(type) != null )
      {
         return true;
      }
      return false;
   }
   public static void addType(String type)
   {
      types.put(type,Boolean.TRUE);
   }
   public static void printTypes()
   {
      Enumeration enum1 = types.keys();
      while ( enum1.hasMoreElements() )
      {
         System.out.println(enum1.nextElement());
      }
   }

  static final public TranslationUnit TranslationUnit() throws ParseException {
   NodeList n0 = new NodeList();
   NodeChoice n1;
   ExternalDeclaration n2;
   UnknownCpp n3;
   UnknownPragma n4;
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        n2 = ExternalDeclaration();
           n1 = new NodeChoice(n2, 0);
      } else if (jj_2_2(3)) {
        n3 = UnknownCpp();
           n1 = new NodeChoice(n3, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CROSSBAR:
          n4 = UnknownPragma();
           n1 = new NodeChoice(n4, 2);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n0.addNode(n1);
      if (jj_2_3(1)) {
        ;
      } else {
        break label_1;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new TranslationUnit(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExternalDeclaration ExternalDeclaration() throws ParseException {
   NodeChoice n0;
   FunctionDefinition n1;
   Declaration n2;
   ThreadprivateDirective n3;
    if (jj_2_4(2147483647)) {
      n1 = FunctionDefinition();
           n0 = new NodeChoice(n1, 0);
    } else if (jj_2_5(1)) {
      n2 = Declaration();
           n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROSSBAR:
        n3 = ThreadprivateDirective();
           n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ExternalDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDefinition FunctionDefinition() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   DeclarationSpecifiers n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationList n4;
   CompoundStatement n5;
    if (jj_2_6(2147483647)) {
      n1 = DeclarationSpecifiers();
        n0.addNode(n1);
    } else {
      ;
    }
    n2 = Declarator();
    if (jj_2_7(1)) {
      n4 = DeclarationList();
        n3.addNode(n4);
    } else {
      ;
    }
    n5 = CompoundStatement();
     {if (true) return new FunctionDefinition(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Declaration Declaration() throws ParseException {
   DeclarationSpecifiers n0;
   NodeOptional n1 = new NodeOptional();
   InitDeclaratorList n2;
   NodeToken n3;
   Token n4;
    n0 = DeclarationSpecifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_MUL:
    case LEFTPAREN:
    case IDENTIFIER:
      n2 = InitDeclaratorList();
        n1.addNode(n2);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n4 = jj_consume_token(SEMICOLON);
                    n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Declaration(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DeclarationList DeclarationList() throws ParseException {
   NodeList n0 = new NodeList();
   Declaration n1;
    label_2:
    while (true) {
      n1 = Declaration();
        n0.addNode(n1);
      if (jj_2_8(2147483647)) {
        ;
      } else {
        break label_2;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new DeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DeclarationSpecifiers DeclarationSpecifiers() throws ParseException {
   NodeList n0 = new NodeList();
   NodeChoice n1;
   StorageClassSpecifier n2;
   TypeSpecifier n3;
   TypeQualifier n4;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:
        n2 = StorageClassSpecifier();
           n1 = new NodeChoice(n2, 0);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_9(1)) {
          n3 = TypeSpecifier();
           n1 = new NodeChoice(n3, 1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESTRICT:
          case VOLATILE:
          case CONST:
          case CCONST:
            n4 = TypeQualifier();
           n1 = new NodeChoice(n4, 2);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
        n0.addNode(n1);
      if (jj_2_10(1)) {
        ;
      } else {
        break label_3;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new DeclarationSpecifiers(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StorageClassSpecifier StorageClassSpecifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
      n2 = jj_consume_token(AUTO);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case REGISTER:
      n4 = jj_consume_token(REGISTER);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case STATIC:
      n6 = jj_consume_token(STATIC);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case EXTERN:
      n8 = jj_consume_token(EXTERN);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case TYPEDEF:
      n10 = jj_consume_token(TYPEDEF);
                      n9 = JTBToolkit.makeNodeToken(n10);
         typedefParsingStack.push(Boolean.TRUE);
        n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StorageClassSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeSpecifier TypeSpecifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   StructOrUnionSpecifier n19;
   EnumSpecifier n20;
   TypedefName n21;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n2 = jj_consume_token(VOID);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CHAR:
      n4 = jj_consume_token(CHAR);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case SHORT:
      n6 = jj_consume_token(SHORT);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case INT:
      n8 = jj_consume_token(INT);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case LONG:
      n10 = jj_consume_token(LONG);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case FLOAT:
      n12 = jj_consume_token(FLOAT);
                    n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case DOUBLE:
      n14 = jj_consume_token(DOUBLE);
                     n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case SIGNED:
      n16 = jj_consume_token(SIGNED);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case UNSIGNED:
      n18 = jj_consume_token(UNSIGNED);
                       n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case STRUCT:
    case UNION:
      n19 = StructOrUnionSpecifier();
        n0 = new NodeChoice(n19, 9);
      break;
    case ENUM:
      n20 = EnumSpecifier();
        n0 = new NodeChoice(n20, 10);
      break;
    default:
      jj_la1[6] = jj_gen;
      if (isType(getToken(1).image)) {
        n21 = TypedefName();
        n0 = new NodeChoice(n21, 11);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new TypeSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeQualifier TypeQualifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTRICT:
      n2 = jj_consume_token(RESTRICT);
                      n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CONST:
      n4 = jj_consume_token(CONST);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case VOLATILE:
      n6 = jj_consume_token(VOLATILE);
                      n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case CCONST:
      n8 = jj_consume_token(CCONST);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeQualifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StructOrUnionSpecifier StructOrUnionSpecifier() throws ParseException {
   StructOrUnion n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   StructDeclarationList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
      typedefParsingStack.push(Boolean.FALSE);
    n0 = StructOrUnion();
    if (jj_2_11(3)) {
           n2 = new NodeSequence(5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n5 = jj_consume_token(IDENTIFIER);
                              n4 = JTBToolkit.makeNodeToken(n5);
              n3.addNode(n4);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
           n2.addNode(n3);
      n7 = jj_consume_token(LEFTBRACE);
                          n6 = JTBToolkit.makeNodeToken(n7);
           n2.addNode(n6);
      n8 = StructDeclarationList();
           n2.addNode(n8);
      n10 = jj_consume_token(RIGHTBRACE);
                            n9 = JTBToolkit.makeNodeToken(n10);
           n2.addNode(n9);
           n1 = new NodeChoice(n2, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n12 = jj_consume_token(IDENTIFIER);
                            n11 = JTBToolkit.makeNodeToken(n12);
           n1 = new NodeChoice(n11, 1);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      typedefParsingStack.pop();
     {if (true) return new StructOrUnionSpecifier(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public StructOrUnion StructOrUnion() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      n2 = jj_consume_token(STRUCT);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case UNION:
      n4 = jj_consume_token(UNION);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StructOrUnion(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StructDeclarationList StructDeclarationList() throws ParseException {
   NodeList n0 = new NodeList();
   StructDeclaration n1;
    label_4:
    while (true) {
      n1 = StructDeclaration();
        n0.addNode(n1);
      if (jj_2_12(1)) {
        ;
      } else {
        break label_4;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new StructDeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public InitDeclaratorList InitDeclaratorList() throws ParseException {
   InitDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitDeclarator n5;
    n0 = InitDeclarator();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InitDeclarator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
      if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
      {
         typedefParsingStack.pop();
      }
     {if (true) return new InitDeclaratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public InitDeclarator InitDeclarator() throws ParseException {
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;
    n0 = Declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ASS:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OP_ASS);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Initializer();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
     {if (true) return new InitDeclarator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public StructDeclaration StructDeclaration() throws ParseException {
   SpecifierQualifierList n0;
   StructDeclaratorList n1;
   NodeToken n2;
   Token n3;
    n0 = SpecifierQualifierList();
    n1 = StructDeclaratorList();
    n3 = jj_consume_token(SEMICOLON);
                    n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new StructDeclaration(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public SpecifierQualifierList SpecifierQualifierList() throws ParseException {
   NodeList n0 = new NodeList();
   NodeChoice n1;
   TypeSpecifier n2;
   TypeQualifier n3;
    label_6:
    while (true) {
      if (jj_2_13(1)) {
        n2 = TypeSpecifier();
           n1 = new NodeChoice(n2, 0);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESTRICT:
        case VOLATILE:
        case CONST:
        case CCONST:
          n3 = TypeQualifier();
           n1 = new NodeChoice(n3, 1);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n0.addNode(n1);
      if (jj_2_14(1)) {
        ;
      } else {
        break label_6;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new SpecifierQualifierList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StructDeclaratorList StructDeclaratorList() throws ParseException {
   StructDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StructDeclarator n5;
    n0 = StructDeclarator();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = StructDeclarator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new StructDeclaratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public StructDeclarator StructDeclarator() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ConstantExpression n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   ConstantExpression n11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_MUL:
    case LEFTPAREN:
    case IDENTIFIER:
        n1 = new NodeSequence(2);
      n2 = Declarator();
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
           n4 = new NodeSequence(2);
        n6 = jj_consume_token(COLON);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n7 = ConstantExpression();
           n4.addNode(n7);
           n3.addNode(n4);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case COLON:
        n8 = new NodeSequence(2);
      n10 = jj_consume_token(COLON);
                    n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n11 = ConstantExpression();
        n8.addNode(n11);
        n0 = new NodeChoice(n8, 1);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StructDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public EnumSpecifier EnumSpecifier() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   EnumeratorList n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(ENUM);
               n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_15(3)) {
           n3 = new NodeSequence(5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n6 = jj_consume_token(IDENTIFIER);
                              n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
           n3.addNode(n4);
      n8 = jj_consume_token(LEFTBRACE);
                          n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
      n9 = EnumeratorList();
           n3.addNode(n9);
      n11 = jj_consume_token(RIGHTBRACE);
                            n10 = JTBToolkit.makeNodeToken(n11);
           n3.addNode(n10);
           n2 = new NodeChoice(n3, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n13 = jj_consume_token(IDENTIFIER);
                            n12 = JTBToolkit.makeNodeToken(n13);
           n2 = new NodeChoice(n12, 1);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new EnumSpecifier(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public EnumeratorList EnumeratorList() throws ParseException {
   Enumerator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Enumerator n5;
    n0 = Enumerator();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Enumerator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new EnumeratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Enumerator Enumerator() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ASS:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(OP_ASS);
                    n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = ConstantExpression();
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
     {if (true) return new Enumerator(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Declarator Declarator() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectDeclarator n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_MUL:
      n1 = Pointer();
        n0.addNode(n1);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    n2 = DirectDeclarator();
     {if (true) return new Declarator(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DirectDeclarator DirectDeclarator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Declarator n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   ConstantExpression n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   ParameterTypeList n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   IdentifierList n28;
   NodeToken n29;
   Token n30;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                           n1 = JTBToolkit.makeNodeToken(n2);
            if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
               addType(n2.image);
           n0 = new NodeChoice(n1, 0);
      break;
    case LEFTPAREN:
           n3 = new NodeSequence(3);
      n5 = jj_consume_token(LEFTPAREN);
                          n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
      n6 = Declarator();
           n3.addNode(n6);
      n8 = jj_consume_token(RIGHTPAREN);
                           n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case LEFTBRACKET:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
        n14 = new NodeOptional();
        n27 = new NodeOptional();
      if (jj_2_16(3)) {
           n11 = new NodeSequence(4);
        n13 = jj_consume_token(LEFTBRACKET);
                             n12 = JTBToolkit.makeNodeToken(n13);
           n11.addNode(n12);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case OP_INCR:
        case OP_DECR:
        case OP_ADD:
        case OP_SUB:
        case OP_MUL:
        case OP_BITAND:
        case OP_NOT:
        case OP_BITNOT:
        case LEFTPAREN:
        case IDENTIFIER:
          n15 = ConstantExpression();
              n14.addNode(n15);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
           n11.addNode(n14);
        n17 = jj_consume_token(RIGHTBRACKET);
                              n16 = JTBToolkit.makeNodeToken(n17);
           n11.addNode(n16);
           n10 = new NodeChoice(n11, 0);
      } else if (jj_2_17(3)) {
           n18 = new NodeSequence(4);
        n20 = jj_consume_token(LEFTPAREN);
                           n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
        n21 = ParameterTypeList();
           n18.addNode(n21);
        n23 = jj_consume_token(RIGHTPAREN);
                            n22 = JTBToolkit.makeNodeToken(n23);
           n18.addNode(n22);
           n10 = new NodeChoice(n18, 1);
      } else if (jj_2_18(3)) {
           n24 = new NodeSequence(4);
        n26 = jj_consume_token(LEFTPAREN);
                           n25 = JTBToolkit.makeNodeToken(n26);
           n24.addNode(n25);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          n28 = IdentifierList();
              n27.addNode(n28);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
           n24.addNode(n27);
        n30 = jj_consume_token(RIGHTPAREN);
                            n29 = JTBToolkit.makeNodeToken(n30);
           n24.addNode(n29);
           n10 = new NodeChoice(n24, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
     {if (true) return new DirectDeclarator(n0,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Pointer Pointer() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeQualifierList n3;
   NodeOptional n4 = new NodeOptional();
   Pointer n5;
    n1 = jj_consume_token(OP_MUL);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTRICT:
    case VOLATILE:
    case CONST:
    case CCONST:
      n3 = TypeQualifierList();
        n2.addNode(n3);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_MUL:
      n5 = Pointer();
        n4.addNode(n5);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
     {if (true) return new Pointer(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeQualifierList TypeQualifierList() throws ParseException {
   NodeList n0 = new NodeList();
   TypeQualifier n1;
    label_10:
    while (true) {
      n1 = TypeQualifier();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTRICT:
      case VOLATILE:
      case CONST:
      case CCONST:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new TypeQualifierList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterTypeList ParameterTypeList() throws ParseException {
   ParameterList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n0 = ParameterList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(ELLIPSIS);
                      n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
     {if (true) return new ParameterTypeList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterList ParameterList() throws ParseException {
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;
    n0 = ParameterDeclaration();
    label_11:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_11;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ParameterDeclaration();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterDeclaration ParameterDeclaration() throws ParseException {
   DeclarationSpecifiers n0;
   NodeChoice n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   AbstractDeclarator n4;
    n0 = DeclarationSpecifiers();
    if (jj_2_20(2147483647)) {
      n2 = Declarator();
           n1 = new NodeChoice(n2, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_MUL:
      case LEFTPAREN:
      case LEFTBRACKET:
        n4 = AbstractDeclarator();
              n3.addNode(n4);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
           n1 = new NodeChoice(n3, 1);
    }
     {if (true) return new ParameterDeclaration(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierList IdentifierList() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(COMMA);
                   n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new IdentifierList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Initializer Initializer() throws ParseException {
   NodeChoice n0;
   AssignmentExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitializerList n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case SIZEOF:
    case OP_INCR:
    case OP_DECR:
    case OP_ADD:
    case OP_SUB:
    case OP_MUL:
    case OP_BITAND:
    case OP_NOT:
    case OP_BITNOT:
    case LEFTPAREN:
    case IDENTIFIER:
      n1 = AssignmentExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case LEFTBRACE:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(LEFTBRACE);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InitializerList();
        n2.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n8 = jj_consume_token(COMMA);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
        n2.addNode(n6);
      n10 = jj_consume_token(RIGHTBRACE);
                         n9 = JTBToolkit.makeNodeToken(n10);
        n2.addNode(n9);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Initializer(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public InitializerList InitializerList() throws ParseException {
   Initializer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;
    n0 = Initializer();
    label_13:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_13;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Initializer();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new InitializerList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeName TypeName() throws ParseException {
   SpecifierQualifierList n0;
   NodeOptional n1 = new NodeOptional();
   AbstractDeclarator n2;
    n0 = SpecifierQualifierList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_MUL:
    case LEFTPAREN:
    case LEFTBRACKET:
      n2 = AbstractDeclarator();
        n1.addNode(n2);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
     {if (true) return new TypeName(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractDeclarator AbstractDeclarator() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Pointer n2;
   NodeOptional n3 = new NodeOptional();
   DirectAbstractDeclarator n4;
   DirectAbstractDeclarator n5;
    if (jj_2_22(3)) {
           n1 = new NodeSequence(3);
      n2 = Pointer();
           n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case LEFTBRACKET:
        n4 = DirectAbstractDeclarator();
              n3.addNode(n4);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
           n1.addNode(n3);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case LEFTBRACKET:
        n5 = DirectAbstractDeclarator();
           n0 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AbstractDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DirectAbstractDeclarator DirectAbstractDeclarator() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   AbstractDeclarator n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ConstantExpression n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   ParameterTypeList n18;
   NodeToken n19;
   Token n20;
   NodeListOptional n21 = new NodeListOptional();
   NodeChoice n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   ConstantExpression n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33;
   ParameterTypeList n34;
   NodeToken n35;
   Token n36;
    if (jj_2_24(2)) {
           n1 = new NodeSequence(4);
      n3 = jj_consume_token(LEFTPAREN);
                          n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = AbstractDeclarator();
           n1.addNode(n4);
      n6 = jj_consume_token(RIGHTPAREN);
                           n5 = JTBToolkit.makeNodeToken(n6);
           n1.addNode(n5);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACKET:
           n7 = new NodeSequence(3);
        n9 = jj_consume_token(LEFTBRACKET);
                            n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case OP_INCR:
        case OP_DECR:
        case OP_ADD:
        case OP_SUB:
        case OP_MUL:
        case OP_BITAND:
        case OP_NOT:
        case OP_BITNOT:
        case LEFTPAREN:
        case IDENTIFIER:
          n11 = ConstantExpression();
              n10.addNode(n11);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
           n7.addNode(n10);
        n13 = jj_consume_token(RIGHTBRACKET);
                              n12 = JTBToolkit.makeNodeToken(n13);
           n7.addNode(n12);
           n0 = new NodeChoice(n7, 1);
        break;
      case LEFTPAREN:
           n14 = new NodeSequence(3);
        n16 = jj_consume_token(LEFTPAREN);
                           n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        if (jj_2_23(1)) {
          n18 = ParameterTypeList();
              n17.addNode(n18);
        } else {
          ;
        }
           n14.addNode(n17);
        n20 = jj_consume_token(RIGHTPAREN);
                            n19 = JTBToolkit.makeNodeToken(n20);
           n14.addNode(n19);
           n0 = new NodeChoice(n14, 2);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case LEFTBRACKET:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_14;
      }
        n26 = new NodeOptional();
        n33 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACKET:
           n23 = new NodeSequence(3);
        n25 = jj_consume_token(LEFTBRACKET);
                             n24 = JTBToolkit.makeNodeToken(n25);
           n23.addNode(n24);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case OP_INCR:
        case OP_DECR:
        case OP_ADD:
        case OP_SUB:
        case OP_MUL:
        case OP_BITAND:
        case OP_NOT:
        case OP_BITNOT:
        case LEFTPAREN:
        case IDENTIFIER:
          n27 = ConstantExpression();
              n26.addNode(n27);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
           n23.addNode(n26);
        n29 = jj_consume_token(RIGHTBRACKET);
                              n28 = JTBToolkit.makeNodeToken(n29);
           n23.addNode(n28);
           n22 = new NodeChoice(n23, 0);
        break;
      case LEFTPAREN:
           n30 = new NodeSequence(3);
        n32 = jj_consume_token(LEFTPAREN);
                           n31 = JTBToolkit.makeNodeToken(n32);
           n30.addNode(n31);
        if (jj_2_25(1)) {
          n34 = ParameterTypeList();
              n33.addNode(n34);
        } else {
          ;
        }
           n30.addNode(n33);
        n36 = jj_consume_token(RIGHTPAREN);
                            n35 = JTBToolkit.makeNodeToken(n36);
           n30.addNode(n35);
           n22 = new NodeChoice(n30, 1);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n21.addNode(n22);
    }
     n21.nodes.trimToSize();
     {if (true) return new DirectAbstractDeclarator(n0,n21);}
    throw new Error("Missing return statement in function");
  }

  static final public TypedefName TypedefName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TypedefName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   LabeledStatement n1;
   ExpressionStatement n2;
   CompoundStatement n3;
   SelectionStatement n4;
   IterationStatement n5;
   JumpStatement n6;
   UnknownPragma n7;
   OmpConstruct n8;
   OmpDirective n9;
   UnknownCpp n10;
    if (jj_2_26(2)) {
      n1 = LabeledStatement();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case OP_INCR:
      case OP_DECR:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
      case SEMICOLON:
      case LEFTPAREN:
      case IDENTIFIER:
        n2 = ExpressionStatement();
           n0 = new NodeChoice(n2, 1);
        break;
      case LEFTBRACE:
        n3 = CompoundStatement();
           n0 = new NodeChoice(n3, 2);
        break;
      case SWITCH:
      case IF:
        n4 = SelectionStatement();
           n0 = new NodeChoice(n4, 3);
        break;
      case WHILE:
      case FOR:
      case DO:
        n5 = IterationStatement();
           n0 = new NodeChoice(n5, 4);
        break;
      case CONTINUE:
      case RETURN:
      case BREAK:
      case GOTO:
        n6 = JumpStatement();
           n0 = new NodeChoice(n6, 5);
        break;
      default:
        jj_la1[42] = jj_gen;
        if (jj_2_27(4)) {
          n7 = UnknownPragma();
           n0 = new NodeChoice(n7, 6);
        } else if (jj_2_28(4)) {
          n8 = OmpConstruct();
           n0 = new NodeChoice(n8, 7);
        } else if (jj_2_29(2)) {
          n9 = OmpDirective();
           n0 = new NodeChoice(n9, 8);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CROSSBAR:
            n10 = UnknownCpp();
           n0 = new NodeChoice(n10, 9);
            break;
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnknownCpp UnknownCpp() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(CROSSBAR);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(UNKNOWN_CPP);
                      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new UnknownCpp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpEol OmpEol() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMP_CR:
      n2 = jj_consume_token(OMP_CR);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case OMP_NL:
      n4 = jj_consume_token(OMP_NL);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OmpEol(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpConstruct OmpConstruct() throws ParseException {
   OmpPragma n0;
   NodeChoice n1;
   ParallelConstruct n2;
   ParallelForConstruct n3;
   ParallelSectionsConstruct n4;
   ForConstruct n5;
   SectionsConstruct n6;
   SingleConstruct n7;
   MasterConstruct n8;
   CriticalConstruct n9;
   AtomicConstruct n10;
   OrderedConstruct n11;
    n0 = OmpPragma();
    if (jj_2_30(2)) {
      n2 = ParallelConstruct();
           n1 = new NodeChoice(n2, 0);
    } else if (jj_2_31(2)) {
      n3 = ParallelForConstruct();
           n1 = new NodeChoice(n3, 1);
    } else if (jj_2_32(2)) {
      n4 = ParallelSectionsConstruct();
           n1 = new NodeChoice(n4, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        n5 = ForConstruct();
           n1 = new NodeChoice(n5, 3);
        break;
      case SECTIONS:
        n6 = SectionsConstruct();
           n1 = new NodeChoice(n6, 4);
        break;
      case SINGLE:
        n7 = SingleConstruct();
           n1 = new NodeChoice(n7, 5);
        break;
      case MASTER:
        n8 = MasterConstruct();
           n1 = new NodeChoice(n8, 6);
        break;
      case CRITICAL:
        n9 = CriticalConstruct();
           n1 = new NodeChoice(n9, 7);
        break;
      case ATOMIC:
        n10 = AtomicConstruct();
           n1 = new NodeChoice(n10, 8);
        break;
      case ORDERED:
        n11 = OrderedConstruct();
           n1 = new NodeChoice(n11, 9);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new OmpConstruct(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpDirective OmpDirective() throws ParseException {
   OmpPragma n0;
   NodeChoice n1;
   BarrierDirective n2;
   FlushDirective n3;
    n0 = OmpPragma();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BARRIER:
      n2 = BarrierDirective();
           n1 = new NodeChoice(n2, 0);
      break;
    case FLUSH:
      n3 = FlushDirective();
           n1 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OmpDirective(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ParallelConstruct ParallelConstruct() throws ParseException {
   ParallelDirective n0;
   Statement n1;
    n0 = ParallelDirective();
    n1 = Statement();
     {if (true) return new ParallelConstruct(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpPragma OmpPragma() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(CROSSBAR);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PRAGMA);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(OMP);
              n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new OmpPragma(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public UnknownPragma UnknownPragma() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(CROSSBAR);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PRAGMA);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(UNKNOWN_CPP);
                      n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new UnknownPragma(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ParallelDirective ParallelDirective() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   UniqueParallelClause n4;
   DataClause n5;
   OmpEol n6;
    n1 = jj_consume_token(PARALLEL);
                   n0 = JTBToolkit.makeNodeToken(n1);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
      case IF:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        n4 = UniqueParallelClause();
           n3 = new NodeChoice(n4, 0);
        break;
      case DFLT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        n5 = DataClause();
           n3 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n6 = OmpEol();
     {if (true) return new ParallelDirective(n0,n2,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public UniqueParallelClause UniqueParallelClause() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFTPAREN);
                    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RIGHTPAREN);
                     n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new UniqueParallelClause(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ForConstruct ForConstruct() throws ParseException {
   ForDirective n0;
   OmpForHeader n1;
   Statement n2;
    n0 = ForDirective();
    n1 = OmpForHeader();
    n2 = Statement();
     {if (true) return new ForConstruct(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ForDirective ForDirective() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   UniqueForClause n4;
   DataClause n5;
   NodeToken n6;
   Token n7;
   OmpEol n8;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
      case ORDERED:
      case NOWAIT:
      case SCHEDULE:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDERED:
      case SCHEDULE:
        n4 = UniqueForClause();
           n3 = new NodeChoice(n4, 0);
        break;
      case DFLT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        n5 = DataClause();
           n3 = new NodeChoice(n5, 1);
        break;
      case NOWAIT:
        n7 = jj_consume_token(NOWAIT);
                       n6 = JTBToolkit.makeNodeToken(n7);
           n3 = new NodeChoice(n6, 2);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n8 = OmpEol();
     {if (true) return new ForDirective(n0,n2,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public UniqueForClause UniqueForClause() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ScheduleKind n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Expression n13;
   NodeToken n14;
   Token n15;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDERED:
      n2 = jj_consume_token(ORDERED);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case SCHEDULE:
        n3 = new NodeSequence(5);
      n5 = jj_consume_token(SCHEDULE);
                      n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(LEFTPAREN);
                       n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
      n8 = ScheduleKind();
        n3.addNode(n8);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
           n10 = new NodeSequence(2);
        n12 = jj_consume_token(COMMA);
                       n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
        n13 = Expression();
           n10.addNode(n13);
           n9.addNode(n10);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
        n3.addNode(n9);
      n15 = jj_consume_token(RIGHTPAREN);
                         n14 = JTBToolkit.makeNodeToken(n15);
        n3.addNode(n14);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UniqueForClause(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ScheduleKind ScheduleKind() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      n2 = jj_consume_token(STATIC);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case DYNAMIC:
      n4 = jj_consume_token(DYNAMIC);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case GUIDED:
      n6 = jj_consume_token(GUIDED);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case RUNTIME:
      n8 = jj_consume_token(RUNTIME);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ScheduleKind(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpForHeader OmpForHeader() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   OmpForInitExpression n4;
   NodeToken n5;
   Token n6;
   OmpForCondition n7;
   NodeToken n8;
   Token n9;
   OmpForReinitExpression n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFTPAREN);
                    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = OmpForInitExpression();
    n6 = jj_consume_token(SEMICOLON);
                    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = OmpForCondition();
    n9 = jj_consume_token(SEMICOLON);
                    n8 = JTBToolkit.makeNodeToken(n9);
    n10 = OmpForReinitExpression();
    n12 = jj_consume_token(RIGHTPAREN);
                      n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new OmpForHeader(n0,n2,n4,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpForInitExpression OmpForInitExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(OP_ASS);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
     {if (true) return new OmpForInitExpression(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpForCondition OmpForCondition() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   Expression n11;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_LT:
      n4 = jj_consume_token(OP_LT);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
      break;
    case OP_LE:
      n6 = jj_consume_token(OP_LE);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
      break;
    case OP_GT:
      n8 = jj_consume_token(OP_GT);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n2 = new NodeChoice(n7, 2);
      break;
    case OP_GE:
      n10 = jj_consume_token(OP_GE);
                       n9 = JTBToolkit.makeNodeToken(n10);
           n2 = new NodeChoice(n9, 3);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n11 = Expression();
     {if (true) return new OmpForCondition(n0,n2,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public OmpForReinitExpression OmpForReinitExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeChoice n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Expression n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeChoice n31;
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeChoice n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   AdditiveExpression n40;
   NodeSequence n41;
   MultiplicativeExpression n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
    if (jj_2_34(2)) {
        n1 = new NodeSequence(3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_INCR:
        n4 = jj_consume_token(OP_INCR);
                           n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case OP_DECR:
        n6 = jj_consume_token(OP_DECR);
                           n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      n8 = jj_consume_token(IDENTIFIER);
                        n7 = JTBToolkit.makeNodeToken(n8);
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_35(2)) {
        n9 = new NodeSequence(3);
      n11 = jj_consume_token(IDENTIFIER);
                         n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_INCR:
        n14 = jj_consume_token(OP_INCR);
                            n13 = JTBToolkit.makeNodeToken(n14);
              n12 = new NodeChoice(n13, 0);
        break;
      case OP_DECR:
        n16 = jj_consume_token(OP_DECR);
                            n15 = JTBToolkit.makeNodeToken(n16);
              n12 = new NodeChoice(n15, 1);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n9.addNode(n12);
        n0 = new NodeChoice(n9, 1);
    } else if (jj_2_36(2)) {
        n17 = new NodeSequence(4);
      n19 = jj_consume_token(IDENTIFIER);
                         n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ADDASS:
        n22 = jj_consume_token(OP_ADDASS);
                              n21 = JTBToolkit.makeNodeToken(n22);
              n20 = new NodeChoice(n21, 0);
        break;
      case OP_SUBASS:
        n24 = jj_consume_token(OP_SUBASS);
                              n23 = JTBToolkit.makeNodeToken(n24);
              n20 = new NodeChoice(n23, 1);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n17.addNode(n20);
      n25 = Expression();
        n17.addNode(n25);
        n0 = new NodeChoice(n17, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n26 = new NodeSequence(3);
        n28 = jj_consume_token(IDENTIFIER);
                         n27 = JTBToolkit.makeNodeToken(n28);
        n26.addNode(n27);
        n30 = jj_consume_token(OP_ASS);
                     n29 = JTBToolkit.makeNodeToken(n30);
        n26.addNode(n29);
        if (jj_2_33(2)) {
              n32 = new NodeSequence(4);
          n34 = jj_consume_token(IDENTIFIER);
                               n33 = JTBToolkit.makeNodeToken(n34);
              n32.addNode(n33);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP_ADD:
            n37 = jj_consume_token(OP_ADD);
                                 n36 = JTBToolkit.makeNodeToken(n37);
                    n35 = new NodeChoice(n36, 0);
            break;
          case OP_SUB:
            n39 = jj_consume_token(OP_SUB);
                                 n38 = JTBToolkit.makeNodeToken(n39);
                    n35 = new NodeChoice(n38, 1);
            break;
          default:
            jj_la1[58] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
              n32.addNode(n35);
          n40 = AdditiveExpression();
              n32.addNode(n40);
              n31 = new NodeChoice(n32, 0);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case OP_INCR:
          case OP_DECR:
          case OP_ADD:
          case OP_SUB:
          case OP_MUL:
          case OP_BITAND:
          case OP_NOT:
          case OP_BITNOT:
          case LEFTPAREN:
          case IDENTIFIER:
              n41 = new NodeSequence(3);
            n42 = MultiplicativeExpression();
              n41.addNode(n42);
            n44 = jj_consume_token(OP_ADD);
                           n43 = JTBToolkit.makeNodeToken(n44);
              n41.addNode(n43);
            n46 = jj_consume_token(IDENTIFIER);
                               n45 = JTBToolkit.makeNodeToken(n46);
              n41.addNode(n45);
              n31 = new NodeChoice(n41, 1);
            break;
          default:
            jj_la1[59] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        n26.addNode(n31);
        n0 = new NodeChoice(n26, 3);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new OmpForReinitExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SectionsConstruct SectionsConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   DataClause n6;
   OmpEol n7;
   SectionsScope n8;
    n1 = jj_consume_token(SECTIONS);
                   n0 = JTBToolkit.makeNodeToken(n1);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
      case NOWAIT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOWAIT:
        n5 = jj_consume_token(NOWAIT);
                       n4 = JTBToolkit.makeNodeToken(n5);
           n3 = new NodeChoice(n4, 0);
        break;
      case DFLT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        n6 = DataClause();
           n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n7 = OmpEol();
    n8 = SectionsScope();
     {if (true) return new SectionsConstruct(n0,n2,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public SectionsScope SectionsScope() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Statement n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   OmpPragma n6;
   NodeToken n7;
   Token n8;
   OmpEol n9;
   Statement n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(LEFTBRACE);
                    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_37(2)) {
      n3 = Statement();
        n2.addNode(n3);
    } else {
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROSSBAR:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_18;
      }
        n5 = new NodeSequence(4);
      n6 = OmpPragma();
        n5.addNode(n6);
      n8 = jj_consume_token(SECTION);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n5.addNode(n7);
      n9 = OmpEol();
        n5.addNode(n9);
      n10 = Statement();
        n5.addNode(n10);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    n12 = jj_consume_token(RIGHTBRACE);
                      n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new SectionsScope(n0,n2,n4,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public SingleConstruct SingleConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   DataClause n6;
   OmpEol n7;
   Statement n8;
    n1 = jj_consume_token(SINGLE);
                 n0 = JTBToolkit.makeNodeToken(n1);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
      case NOWAIT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOWAIT:
        n5 = jj_consume_token(NOWAIT);
                       n4 = JTBToolkit.makeNodeToken(n5);
           n3 = new NodeChoice(n4, 0);
        break;
      case DFLT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        n6 = DataClause();
           n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n7 = OmpEol();
    n8 = Statement();
     {if (true) return new SingleConstruct(n0,n2,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ParallelForConstruct ParallelForConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeChoice n5;
   UniqueParallelClause n6;
   UniqueForClause n7;
   DataClause n8;
   OmpEol n9;
   OmpForHeader n10;
   Statement n11;
    n1 = jj_consume_token(PARALLEL);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(FOR);
              n2 = JTBToolkit.makeNodeToken(n3);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
      case IF:
      case ORDERED:
      case SCHEDULE:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        n6 = UniqueParallelClause();
           n5 = new NodeChoice(n6, 0);
        break;
      case ORDERED:
      case SCHEDULE:
        n7 = UniqueForClause();
           n5 = new NodeChoice(n7, 1);
        break;
      case DFLT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        n8 = DataClause();
           n5 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    n9 = OmpEol();
    n10 = OmpForHeader();
    n11 = Statement();
     {if (true) return new ParallelForConstruct(n0,n2,n4,n9,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public ParallelSectionsConstruct ParallelSectionsConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeChoice n5;
   UniqueParallelClause n6;
   DataClause n7;
   OmpEol n8;
   SectionsScope n9;
    n1 = jj_consume_token(PARALLEL);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SECTIONS);
                   n2 = JTBToolkit.makeNodeToken(n3);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
      case IF:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        n6 = UniqueParallelClause();
           n5 = new NodeChoice(n6, 0);
        break;
      case DFLT:
      case REDUCTION:
      case PRIVATE:
      case FIRSTPRIVATE:
      case LASTPRIVATE:
      case SHARED:
      case COPYIN:
        n7 = DataClause();
           n5 = new NodeChoice(n7, 1);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    n8 = OmpEol();
    n9 = SectionsScope();
     {if (true) return new ParallelSectionsConstruct(n0,n2,n4,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public MasterConstruct MasterConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   OmpEol n2;
   Statement n3;
    n1 = jj_consume_token(MASTER);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = OmpEol();
    n3 = Statement();
     {if (true) return new MasterConstruct(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public CriticalConstruct CriticalConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   OmpEol n10;
   Statement n11;
    n1 = jj_consume_token(CRITICAL);
                   n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(LEFTPAREN);
                       n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
      n9 = jj_consume_token(RIGHTPAREN);
                        n8 = JTBToolkit.makeNodeToken(n9);
        n3.addNode(n8);
        n2.addNode(n3);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    n10 = OmpEol();
    n11 = Statement();
     {if (true) return new CriticalConstruct(n0,n2,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public AtomicConstruct AtomicConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   OmpEol n2;
   ExpressionStatement n3;
    n1 = jj_consume_token(ATOMIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = OmpEol();
    n3 = ExpressionStatement();
     {if (true) return new AtomicConstruct(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public FlushDirective FlushDirective() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   VariableList n6;
   NodeToken n7;
   Token n8;
   OmpEol n9;
    n1 = jj_consume_token(FLUSH);
                n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_38(2)) {
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(LEFTPAREN);
                       n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = VariableList();
        n3.addNode(n6);
      n8 = jj_consume_token(RIGHTPAREN);
                        n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n2.addNode(n3);
    } else {
      ;
    }
    n9 = OmpEol();
     {if (true) return new FlushDirective(n0,n2,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public OrderedConstruct OrderedConstruct() throws ParseException {
   NodeToken n0;
   Token n1;
   OmpEol n2;
   Statement n3;
    n1 = jj_consume_token(ORDERED);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = OmpEol();
    n3 = Statement();
     {if (true) return new OrderedConstruct(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public BarrierDirective BarrierDirective() throws ParseException {
   NodeToken n0;
   Token n1;
   OmpEol n2;
    n1 = jj_consume_token(BARRIER);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = OmpEol();
     {if (true) return new BarrierDirective(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ThreadprivateDirective ThreadprivateDirective() throws ParseException {
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   VariableList n5;
   NodeToken n6;
   Token n7;
   OmpEol n8;
    n0 = OmpPragma();
    n2 = jj_consume_token(THREADPRIVATE);
                        n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(LEFTPAREN);
                    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = VariableList();
    n7 = jj_consume_token(RIGHTPAREN);
                     n6 = JTBToolkit.makeNodeToken(n7);
    n8 = OmpEol();
     {if (true) return new ThreadprivateDirective(n0,n1,n3,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public DataClause DataClause() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   VariableList n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   VariableList n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   VariableList n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   VariableList n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   VariableList n38;
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeChoice n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeSequence n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   ReductionOp n58;
   NodeToken n59;
   Token n60;
   VariableList n61;
   NodeToken n62;
   Token n63;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(PRIVATE);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LEFTPAREN);
                       n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = VariableList();
        n1.addNode(n6);
      n8 = jj_consume_token(RIGHTPAREN);
                        n7 = JTBToolkit.makeNodeToken(n8);
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    case FIRSTPRIVATE:
        n9 = new NodeSequence(4);
      n11 = jj_consume_token(FIRSTPRIVATE);
                           n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n13 = jj_consume_token(LEFTPAREN);
                        n12 = JTBToolkit.makeNodeToken(n13);
        n9.addNode(n12);
      n14 = VariableList();
        n9.addNode(n14);
      n16 = jj_consume_token(RIGHTPAREN);
                         n15 = JTBToolkit.makeNodeToken(n16);
        n9.addNode(n15);
        n0 = new NodeChoice(n9, 1);
      break;
    case LASTPRIVATE:
        n17 = new NodeSequence(4);
      n19 = jj_consume_token(LASTPRIVATE);
                          n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n21 = jj_consume_token(LEFTPAREN);
                        n20 = JTBToolkit.makeNodeToken(n21);
        n17.addNode(n20);
      n22 = VariableList();
        n17.addNode(n22);
      n24 = jj_consume_token(RIGHTPAREN);
                         n23 = JTBToolkit.makeNodeToken(n24);
        n17.addNode(n23);
        n0 = new NodeChoice(n17, 2);
      break;
    case SHARED:
        n25 = new NodeSequence(4);
      n27 = jj_consume_token(SHARED);
                     n26 = JTBToolkit.makeNodeToken(n27);
        n25.addNode(n26);
      n29 = jj_consume_token(LEFTPAREN);
                        n28 = JTBToolkit.makeNodeToken(n29);
        n25.addNode(n28);
      n30 = VariableList();
        n25.addNode(n30);
      n32 = jj_consume_token(RIGHTPAREN);
                         n31 = JTBToolkit.makeNodeToken(n32);
        n25.addNode(n31);
        n0 = new NodeChoice(n25, 3);
      break;
    case COPYIN:
        n33 = new NodeSequence(4);
      n35 = jj_consume_token(COPYIN);
                     n34 = JTBToolkit.makeNodeToken(n35);
        n33.addNode(n34);
      n37 = jj_consume_token(LEFTPAREN);
                        n36 = JTBToolkit.makeNodeToken(n37);
        n33.addNode(n36);
      n38 = VariableList();
        n33.addNode(n38);
      n40 = jj_consume_token(RIGHTPAREN);
                         n39 = JTBToolkit.makeNodeToken(n40);
        n33.addNode(n39);
        n0 = new NodeChoice(n33, 4);
      break;
    case DFLT:
        n41 = new NodeSequence(4);
      n43 = jj_consume_token(DFLT);
                   n42 = JTBToolkit.makeNodeToken(n43);
        n41.addNode(n42);
      n45 = jj_consume_token(LEFTPAREN);
                        n44 = JTBToolkit.makeNodeToken(n45);
        n41.addNode(n44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHARED:
        n48 = jj_consume_token(SHARED);
                           n47 = JTBToolkit.makeNodeToken(n48);
              n46 = new NodeChoice(n47, 0);
        break;
      case NONE:
        n50 = jj_consume_token(NONE);
                         n49 = JTBToolkit.makeNodeToken(n50);
              n46 = new NodeChoice(n49, 1);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n41.addNode(n46);
      n52 = jj_consume_token(RIGHTPAREN);
                         n51 = JTBToolkit.makeNodeToken(n52);
        n41.addNode(n51);
        n0 = new NodeChoice(n41, 5);
      break;
    case REDUCTION:
        n53 = new NodeSequence(6);
      n55 = jj_consume_token(REDUCTION);
                        n54 = JTBToolkit.makeNodeToken(n55);
        n53.addNode(n54);
      n57 = jj_consume_token(LEFTPAREN);
                        n56 = JTBToolkit.makeNodeToken(n57);
        n53.addNode(n56);
      n58 = ReductionOp();
        n53.addNode(n58);
      n60 = jj_consume_token(COLON);
                    n59 = JTBToolkit.makeNodeToken(n60);
        n53.addNode(n59);
      n61 = VariableList();
        n53.addNode(n61);
      n63 = jj_consume_token(RIGHTPAREN);
                         n62 = JTBToolkit.makeNodeToken(n63);
        n53.addNode(n62);
        n0 = new NodeChoice(n53, 6);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DataClause(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ReductionOp ReductionOp() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ADD:
      n2 = jj_consume_token(OP_ADD);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case OP_MUL:
      n4 = jj_consume_token(OP_MUL);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case OP_SUB:
      n6 = jj_consume_token(OP_SUB);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case OP_BITAND:
      n8 = jj_consume_token(OP_BITAND);
                       n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case OP_BITXOR:
      n10 = jj_consume_token(OP_BITXOR);
                        n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case OP_BITOR:
      n12 = jj_consume_token(OP_BITOR);
                       n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case OP_OR:
      n14 = jj_consume_token(OP_OR);
                    n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case OP_AND:
      n16 = jj_consume_token(OP_AND);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ReductionOp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public VariableList VariableList() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_22;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(COMMA);
                   n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new VariableList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public LabeledStatement LabeledStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Statement n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   ConstantExpression n10;
   NodeToken n11;
   Token n12;
   Statement n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   Statement n19;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
           n1 = new NodeSequence(3);
      n3 = jj_consume_token(IDENTIFIER);
                           n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(COLON);
                      n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n6 = Statement();
           n1.addNode(n6);
           n0 = new NodeChoice(n1, 0);
      break;
    case CASE:
           n7 = new NodeSequence(4);
      n9 = jj_consume_token(CASE);
                     n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
      n10 = ConstantExpression();
           n7.addNode(n10);
      n12 = jj_consume_token(COLON);
                       n11 = JTBToolkit.makeNodeToken(n12);
           n7.addNode(n11);
      n13 = Statement();
           n7.addNode(n13);
           n0 = new NodeChoice(n7, 1);
      break;
    case DFLT:
           n14 = new NodeSequence(3);
      n16 = jj_consume_token(DFLT);
                      n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
      n18 = jj_consume_token(COLON);
                       n17 = JTBToolkit.makeNodeToken(n18);
           n14.addNode(n17);
      n19 = Statement();
           n14.addNode(n19);
           n0 = new NodeChoice(n14, 2);
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LabeledStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionStatement ExpressionStatement() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Expression n1;
   NodeToken n2;
   Token n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case SIZEOF:
    case OP_INCR:
    case OP_DECR:
    case OP_ADD:
    case OP_SUB:
    case OP_MUL:
    case OP_BITAND:
    case OP_NOT:
    case OP_BITNOT:
    case LEFTPAREN:
    case IDENTIFIER:
      n1 = Expression();
        n0.addNode(n1);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    n3 = jj_consume_token(SEMICOLON);
                    n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ExpressionStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CompoundStatement CompoundStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   DeclarationList n3;
   NodeOptional n4 = new NodeOptional();
   StatementList n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(LEFTBRACE);
                    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_39(2147483647)) {
      n3 = DeclarationList();
        n2.addNode(n3);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case CONTINUE:
    case DFLT:
    case SIZEOF:
    case SWITCH:
    case RETURN:
    case WHILE:
    case BREAK:
    case CASE:
    case GOTO:
    case FOR:
    case IF:
    case DO:
    case OP_INCR:
    case OP_DECR:
    case OP_ADD:
    case OP_SUB:
    case OP_MUL:
    case OP_BITAND:
    case OP_NOT:
    case OP_BITNOT:
    case SEMICOLON:
    case LEFTPAREN:
    case LEFTBRACE:
    case CROSSBAR:
    case IDENTIFIER:
      n5 = StatementList();
        n4.addNode(n5);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    n7 = jj_consume_token(RIGHTBRACE);
                     n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new CompoundStatement(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public StatementList StatementList() throws ParseException {
   NodeList n0 = new NodeList();
   Statement n1;
    label_23:
    while (true) {
      n1 = Statement();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case DFLT:
      case SIZEOF:
      case SWITCH:
      case RETURN:
      case WHILE:
      case BREAK:
      case CASE:
      case GOTO:
      case FOR:
      case IF:
      case DO:
      case OP_INCR:
      case OP_DECR:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
      case SEMICOLON:
      case LEFTPAREN:
      case LEFTBRACE:
      case CROSSBAR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_23;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new StatementList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SelectionStatement SelectionStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   Statement n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   Statement n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   Expression n20;
   NodeToken n21;
   Token n22;
   Statement n23;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
           n1 = new NodeSequence(6);
      n3 = jj_consume_token(IF);
                   n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(LEFTPAREN);
                          n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n6 = Expression();
           n1.addNode(n6);
      n8 = jj_consume_token(RIGHTPAREN);
                           n7 = JTBToolkit.makeNodeToken(n8);
           n1.addNode(n7);
      n9 = Statement();
           n1.addNode(n9);
      if (jj_2_40(2)) {
              n11 = new NodeSequence(2);
        n13 = jj_consume_token(ELSE);
                         n12 = JTBToolkit.makeNodeToken(n13);
              n11.addNode(n12);
        n14 = Statement();
              n11.addNode(n14);
              n10.addNode(n11);
      } else {
        ;
      }
           n1.addNode(n10);
           n0 = new NodeChoice(n1, 0);
      break;
    case SWITCH:
           n15 = new NodeSequence(5);
      n17 = jj_consume_token(SWITCH);
                        n16 = JTBToolkit.makeNodeToken(n17);
           n15.addNode(n16);
      n19 = jj_consume_token(LEFTPAREN);
                           n18 = JTBToolkit.makeNodeToken(n19);
           n15.addNode(n18);
      n20 = Expression();
           n15.addNode(n20);
      n22 = jj_consume_token(RIGHTPAREN);
                            n21 = JTBToolkit.makeNodeToken(n22);
           n15.addNode(n21);
      n23 = Statement();
           n15.addNode(n23);
           n0 = new NodeChoice(n15, 1);
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SelectionStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IterationStatement IterationStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   Statement n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Statement n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   Expression n29;
   NodeToken n30;
   Token n31;
   NodeOptional n32 = new NodeOptional();
   Expression n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   Expression n37;
   NodeToken n38;
   Token n39;
   Statement n40;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
           n1 = new NodeSequence(5);
      n3 = jj_consume_token(WHILE);
                      n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(LEFTPAREN);
                          n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n6 = Expression();
           n1.addNode(n6);
      n8 = jj_consume_token(RIGHTPAREN);
                           n7 = JTBToolkit.makeNodeToken(n8);
           n1.addNode(n7);
      n9 = Statement();
           n1.addNode(n9);
           n0 = new NodeChoice(n1, 0);
      break;
    case DO:
           n10 = new NodeSequence(7);
      n12 = jj_consume_token(DO);
                    n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
      n13 = Statement();
           n10.addNode(n13);
      n15 = jj_consume_token(WHILE);
                       n14 = JTBToolkit.makeNodeToken(n15);
           n10.addNode(n14);
      n17 = jj_consume_token(LEFTPAREN);
                           n16 = JTBToolkit.makeNodeToken(n17);
           n10.addNode(n16);
      n18 = Expression();
           n10.addNode(n18);
      n20 = jj_consume_token(RIGHTPAREN);
                            n19 = JTBToolkit.makeNodeToken(n20);
           n10.addNode(n19);
      n22 = jj_consume_token(SEMICOLON);
                           n21 = JTBToolkit.makeNodeToken(n22);
           n10.addNode(n21);
           n0 = new NodeChoice(n10, 1);
      break;
    case FOR:
           n23 = new NodeSequence(9);
      n25 = jj_consume_token(FOR);
                     n24 = JTBToolkit.makeNodeToken(n25);
           n23.addNode(n24);
      n27 = jj_consume_token(LEFTPAREN);
                           n26 = JTBToolkit.makeNodeToken(n27);
           n23.addNode(n26);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case OP_INCR:
      case OP_DECR:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
      case LEFTPAREN:
      case IDENTIFIER:
        n29 = Expression();
              n28.addNode(n29);
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
           n23.addNode(n28);
      n31 = jj_consume_token(SEMICOLON);
                           n30 = JTBToolkit.makeNodeToken(n31);
           n23.addNode(n30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case OP_INCR:
      case OP_DECR:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
      case LEFTPAREN:
      case IDENTIFIER:
        n33 = Expression();
              n32.addNode(n33);
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
           n23.addNode(n32);
      n35 = jj_consume_token(SEMICOLON);
                           n34 = JTBToolkit.makeNodeToken(n35);
           n23.addNode(n34);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case OP_INCR:
      case OP_DECR:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
      case LEFTPAREN:
      case IDENTIFIER:
        n37 = Expression();
              n36.addNode(n37);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
           n23.addNode(n36);
      n39 = jj_consume_token(RIGHTPAREN);
                            n38 = JTBToolkit.makeNodeToken(n39);
           n23.addNode(n38);
      n40 = Statement();
           n23.addNode(n40);
           n0 = new NodeChoice(n23, 2);
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new IterationStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public JumpStatement JumpStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   Expression n22;
   NodeToken n23;
   Token n24;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GOTO:
           n1 = new NodeSequence(3);
      n3 = jj_consume_token(GOTO);
                     n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(IDENTIFIER);
                           n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n7 = jj_consume_token(SEMICOLON);
                          n6 = JTBToolkit.makeNodeToken(n7);
           n1.addNode(n6);
           n0 = new NodeChoice(n1, 0);
      break;
    case CONTINUE:
           n8 = new NodeSequence(2);
      n10 = jj_consume_token(CONTINUE);
                          n9 = JTBToolkit.makeNodeToken(n10);
           n8.addNode(n9);
      n12 = jj_consume_token(SEMICOLON);
                           n11 = JTBToolkit.makeNodeToken(n12);
           n8.addNode(n11);
           n0 = new NodeChoice(n8, 1);
      break;
    case BREAK:
           n13 = new NodeSequence(2);
      n15 = jj_consume_token(BREAK);
                       n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
      n17 = jj_consume_token(SEMICOLON);
                           n16 = JTBToolkit.makeNodeToken(n17);
           n13.addNode(n16);
           n0 = new NodeChoice(n13, 2);
      break;
    case RETURN:
           n18 = new NodeSequence(3);
      n20 = jj_consume_token(RETURN);
                        n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case OP_INCR:
      case OP_DECR:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
      case LEFTPAREN:
      case IDENTIFIER:
        n22 = Expression();
              n21.addNode(n22);
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
           n18.addNode(n21);
      n24 = jj_consume_token(SEMICOLON);
                           n23 = JTBToolkit.makeNodeToken(n24);
           n18.addNode(n23);
           n0 = new NodeChoice(n18, 3);
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new JumpStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;
    n0 = AssignmentExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_24;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentExpression AssignmentExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   UnaryExpression n2;
   AssignmentOperator n3;
   AssignmentExpression n4;
   ConditionalExpression n5;
    if (jj_2_41(2147483647)) {
        n1 = new NodeSequence(4);
      n2 = UnaryExpression();
        n1.addNode(n2);
      n3 = AssignmentOperator();
        n1.addNode(n3);
      n4 = AssignmentExpression();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_42(3)) {
      n5 = ConditionalExpression();
        n0 = new NodeChoice(n5, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentOperator AssignmentOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ASS:
      n2 = jj_consume_token(OP_ASS);
                       n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case OP_MULASS:
      n4 = jj_consume_token(OP_MULASS);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case OP_DIVASS:
      n6 = jj_consume_token(OP_DIVASS);
                          n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case OP_MODASS:
      n8 = jj_consume_token(OP_MODASS);
                          n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case OP_ADDASS:
      n10 = jj_consume_token(OP_ADDASS);
                           n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case OP_SUBASS:
      n12 = jj_consume_token(OP_SUBASS);
                           n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case OP_SLASS:
      n14 = jj_consume_token(OP_SLASS);
                          n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case OP_SRASS:
      n16 = jj_consume_token(OP_SRASS);
                          n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case OP_ANDASS:
      n18 = jj_consume_token(OP_ANDASS);
                           n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    case OP_XORASS:
      n20 = jj_consume_token(OP_XORASS);
                           n19 = JTBToolkit.makeNodeToken(n20);
           n0 = new NodeChoice(n19, 9);
      break;
    case OP_ORASS:
      n22 = jj_consume_token(OP_ORASS);
                          n21 = JTBToolkit.makeNodeToken(n22);
           n0 = new NodeChoice(n21, 10);
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalExpression ConditionalExpression() throws ParseException {
   LogicalORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   ConditionalExpression n8;
    n0 = LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(QUESTION);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
      n7 = jj_consume_token(COLON);
                   n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
      n8 = ConditionalExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
     {if (true) return new ConditionalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantExpression ConstantExpression() throws ParseException {
   ConditionalExpression n0;
    n0 = ConditionalExpression();
     {if (true) return new ConstantExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LogicalORExpression LogicalORExpression() throws ParseException {
   LogicalANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalORExpression n5;
    n0 = LogicalANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_OR:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OP_OR);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
     {if (true) return new LogicalORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public LogicalANDExpression LogicalANDExpression() throws ParseException {
   InclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalANDExpression n5;
    n0 = InclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_AND:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OP_AND);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalANDExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
     {if (true) return new LogicalANDExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public InclusiveORExpression InclusiveORExpression() throws ParseException {
   ExclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveORExpression n5;
    n0 = ExclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_BITOR:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OP_BITOR);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InclusiveORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
     {if (true) return new InclusiveORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExclusiveORExpression ExclusiveORExpression() throws ParseException {
   ANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveORExpression n5;
    n0 = ANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_BITXOR:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OP_BITXOR);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExclusiveORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
     {if (true) return new ExclusiveORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ANDExpression ANDExpression() throws ParseException {
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ANDExpression n5;
    n0 = EqualityExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_BITAND:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OP_BITAND);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ANDExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
     {if (true) return new ANDExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityExpression EqualityExpression() throws ParseException {
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   EqualityExpression n8;
    n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_EQ:
    case OP_NEQ:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_EQ:
        n5 = jj_consume_token(OP_EQ);
                         n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case OP_NEQ:
        n7 = jj_consume_token(OP_NEQ);
                          n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = EqualityExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
     {if (true) return new EqualityExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression RelationalExpression() throws ParseException {
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   RelationalExpression n12;
    n0 = ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_GE:
    case OP_LE:
    case OP_GT:
    case OP_LT:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LT:
        n5 = jj_consume_token(OP_LT);
                         n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case OP_GT:
        n7 = jj_consume_token(OP_GT);
                         n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case OP_LE:
        n9 = jj_consume_token(OP_LE);
                         n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      case OP_GE:
        n11 = jj_consume_token(OP_GE);
                          n10 = JTBToolkit.makeNodeToken(n11);
              n3 = new NodeChoice(n10, 3);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n12 = RelationalExpression();
        n2.addNode(n12);
        n1.addNode(n2);
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
     {if (true) return new RelationalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftExpression ShiftExpression() throws ParseException {
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ShiftExpression n8;
    n0 = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_SL:
    case OP_SR:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_SL:
        n5 = jj_consume_token(OP_SL);
                         n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case OP_SR:
        n7 = jj_consume_token(OP_SR);
                         n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = ShiftExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
     {if (true) return new ShiftExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpression AdditiveExpression() throws ParseException {
   MultiplicativeExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   AdditiveExpression n8;
    n0 = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ADD:
    case OP_SUB:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ADD:
        n5 = jj_consume_token(OP_ADD);
                          n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case OP_SUB:
        n7 = jj_consume_token(OP_SUB);
                          n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = AdditiveExpression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
     {if (true) return new AdditiveExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
   CastExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   MultiplicativeExpression n10;
    n0 = CastExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_MUL:
    case OP_DIV:
    case OP_MOD:
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_MUL:
        n5 = jj_consume_token(OP_MUL);
                          n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case OP_DIV:
        n7 = jj_consume_token(OP_DIV);
                          n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case OP_MOD:
        n9 = jj_consume_token(OP_MOD);
                          n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n10 = MultiplicativeExpression();
        n2.addNode(n10);
        n1.addNode(n2);
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
     {if (true) return new MultiplicativeExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public CastExpression CastExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   TypeName n4;
   NodeToken n5;
   Token n6;
   CastExpression n7;
   UnaryExpression n8;
    if (jj_2_43(2147483647)) {
           n1 = new NodeSequence(5);
      n3 = jj_consume_token(LEFTPAREN);
                          n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = TypeName();
           n1.addNode(n4);
      n6 = jj_consume_token(RIGHTPAREN);
                           n5 = JTBToolkit.makeNodeToken(n6);
           n1.addNode(n5);
      n7 = CastExpression();
           n1.addNode(n7);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case OP_INCR:
      case OP_DECR:
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
      case LEFTPAREN:
      case IDENTIFIER:
        n8 = UnaryExpression();
           n0 = new NodeChoice(n8, 1);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new CastExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression UnaryExpression() throws ParseException {
   NodeChoice n0;
   PostfixExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   UnaryExpression n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   UnaryExpression n9;
   NodeSequence n10;
   UnaryOperator n11;
   CastExpression n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeChoice n16;
   UnaryExpression n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   TypeName n21;
   NodeToken n22;
   Token n23;
    if (jj_2_45(3)) {
      n1 = PostfixExpression();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_INCR:
           n2 = new NodeSequence(2);
        n4 = jj_consume_token(OP_INCR);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n2.addNode(n3);
        n5 = UnaryExpression();
           n2.addNode(n5);
           n0 = new NodeChoice(n2, 1);
        break;
      case OP_DECR:
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(OP_DECR);
                        n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = UnaryExpression();
           n6.addNode(n9);
           n0 = new NodeChoice(n6, 2);
        break;
      case OP_ADD:
      case OP_SUB:
      case OP_MUL:
      case OP_BITAND:
      case OP_NOT:
      case OP_BITNOT:
           n10 = new NodeSequence(2);
        n11 = UnaryOperator();
           n10.addNode(n11);
        n12 = CastExpression();
           n10.addNode(n12);
           n0 = new NodeChoice(n10, 3);
        break;
      case SIZEOF:
           n13 = new NodeSequence(2);
        n15 = jj_consume_token(SIZEOF);
                        n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
        if (jj_2_44(2147483647)) {
          n17 = UnaryExpression();
                 n16 = new NodeChoice(n17, 0);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFTPAREN:
                 n18 = new NodeSequence(3);
            n20 = jj_consume_token(LEFTPAREN);
                                 n19 = JTBToolkit.makeNodeToken(n20);
                 n18.addNode(n19);
            n21 = TypeName();
                 n18.addNode(n21);
            n23 = jj_consume_token(RIGHTPAREN);
                                  n22 = JTBToolkit.makeNodeToken(n23);
                 n18.addNode(n22);
                 n16 = new NodeChoice(n18, 1);
            break;
          default:
            jj_la1[105] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
           n13.addNode(n16);
           n0 = new NodeChoice(n13, 4);
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryOperator UnaryOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_BITAND:
      n2 = jj_consume_token(OP_BITAND);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case OP_MUL:
      n4 = jj_consume_token(OP_MUL);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case OP_ADD:
      n6 = jj_consume_token(OP_ADD);
                       n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case OP_SUB:
      n8 = jj_consume_token(OP_SUB);
                       n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case OP_BITNOT:
      n10 = jj_consume_token(OP_BITNOT);
                           n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case OP_NOT:
      n12 = jj_consume_token(OP_NOT);
                        n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UnaryOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression PostfixExpression() throws ParseException {
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   ArgumentExpressionList n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
    n0 = PrimaryExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_DEREF:
      case OP_INCR:
      case OP_DECR:
      case DOT:
      case LEFTPAREN:
      case LEFTBRACKET:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_25;
      }
        n12 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACKET:
           n3 = new NodeSequence(3);
        n5 = jj_consume_token(LEFTBRACKET);
                            n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = Expression();
           n3.addNode(n6);
        n8 = jj_consume_token(RIGHTBRACKET);
                             n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n2 = new NodeChoice(n3, 0);
        break;
      case LEFTPAREN:
           n9 = new NodeSequence(3);
        n11 = jj_consume_token(LEFTPAREN);
                           n10 = JTBToolkit.makeNodeToken(n11);
           n9.addNode(n10);
        if (jj_2_46(2147483647)) {
          n13 = ArgumentExpressionList();
              n12.addNode(n13);
        } else {
          ;
        }
           n9.addNode(n12);
        n15 = jj_consume_token(RIGHTPAREN);
                            n14 = JTBToolkit.makeNodeToken(n15);
           n9.addNode(n14);
           n2 = new NodeChoice(n9, 1);
        break;
      case DOT:
           n16 = new NodeSequence(2);
        n18 = jj_consume_token(DOT);
                     n17 = JTBToolkit.makeNodeToken(n18);
           n16.addNode(n17);
        n20 = jj_consume_token(IDENTIFIER);
                            n19 = JTBToolkit.makeNodeToken(n20);
           n16.addNode(n19);
           n2 = new NodeChoice(n16, 2);
        break;
      case OP_DEREF:
           n21 = new NodeSequence(2);
        n23 = jj_consume_token(OP_DEREF);
                          n22 = JTBToolkit.makeNodeToken(n23);
           n21.addNode(n22);
        n25 = jj_consume_token(IDENTIFIER);
                            n24 = JTBToolkit.makeNodeToken(n25);
           n21.addNode(n24);
           n2 = new NodeChoice(n21, 3);
        break;
      case OP_INCR:
        n27 = jj_consume_token(OP_INCR);
                         n26 = JTBToolkit.makeNodeToken(n27);
           n2 = new NodeChoice(n26, 4);
        break;
      case OP_DECR:
        n29 = jj_consume_token(OP_DECR);
                         n28 = JTBToolkit.makeNodeToken(n29);
           n2 = new NodeChoice(n28, 5);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new PostfixExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Constant n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n3 = Constant();
           n0 = new NodeChoice(n3, 1);
      break;
    case LEFTPAREN:
           n4 = new NodeSequence(3);
      n6 = jj_consume_token(LEFTPAREN);
                          n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
      n7 = Expression();
           n4.addNode(n7);
      n9 = jj_consume_token(RIGHTPAREN);
                           n8 = JTBToolkit.makeNodeToken(n9);
           n4.addNode(n8);
           n0 = new NodeChoice(n4, 2);
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentExpressionList ArgumentExpressionList() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;
    n0 = AssignmentExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_26;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgumentExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Constant Constant() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeList n7 = new NodeList();
   NodeToken n8;
   Token n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
                                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case CHARACTER_LITERAL:
      n6 = jj_consume_token(CHARACTER_LITERAL);
                               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case STRING_LITERAL:
      label_27:
      while (true) {
        n9 = jj_consume_token(STRING_LITERAL);
                               n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[112] = jj_gen;
          break label_27;
        }
      }
        n7.nodes.trimToSize();
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Constant(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_3R_309() {
    if (jj_3R_246()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_298() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_241() {
    if (jj_scan_token(OP_ASS)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_289() {
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_207() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(PARALLEL)) return true;
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_298()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_185()) return true;
    if (jj_3R_299()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_288() {
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_287() {
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_225() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_288()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_235() {
    if (jj_scan_token(OP_NOT)) return true;
    return false;
  }

  static private boolean jj_3R_234() {
    if (jj_scan_token(OP_BITNOT)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_322() {
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_233() {
    if (jj_scan_token(OP_SUB)) return true;
    return false;
  }

  static private boolean jj_3R_321() {
    if (jj_scan_token(NOWAIT)) return true;
    return false;
  }

  static private boolean jj_3R_208() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  static private boolean jj_3R_232() {
    if (jj_scan_token(OP_ADD)) return true;
    return false;
  }

  static private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    }
    return false;
  }

  static private boolean jj_3R_231() {
    if (jj_scan_token(OP_MUL)) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_230() {
    if (jj_scan_token(OP_BITAND)) return true;
    return false;
  }

  static private boolean jj_3R_224() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(SINGLE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_303()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_185()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_275() {
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_223() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_280() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    if (jj_3_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_274() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_317() {
    if (jj_3R_114()) return true;
    if (jj_scan_token(SECTION)) return true;
    if (jj_3R_185()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_243() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_242() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) return true;
    }
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_301() {
    if (jj_scan_token(LEFTBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHTBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_214() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_190()) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_270() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(OP_DECR)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_320() {
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_319() {
    if (jj_scan_token(NOWAIT)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(OP_INCR)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_302() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    }
    return false;
  }

  static private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(LEFTBRACE)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RIGHTBRACE)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(SECTIONS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_185()) return true;
    if (jj_3R_301()) return true;
    return false;
  }

  static private boolean jj_3R_222() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_3R_209()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) return true;
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_342() {
    if (jj_3R_305()) return true;
    if (jj_scan_token(OP_ADD)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_221() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(OP_SUB)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(OP_ADD)) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_scan_token(CCONST)) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  static private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_109()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_scan_token(RESTRICT)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_109()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    if (jj_3R_292()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_332() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_ASS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) return true;
    }
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(OP_SUBASS)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(OP_ADDASS)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_159()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_158()) return true;
    return false;
  }

  static private boolean jj_3R_240() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_157()) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  static private boolean jj_3R_206() {
    Token xsp;
    if (jj_3R_240()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(OP_DECR)) return true;
    return false;
  }

  static private boolean jj_3R_339() {
    if (jj_scan_token(OP_MOD)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(OP_INCR)) return true;
    return false;
  }

  static private boolean jj_3R_338() {
    if (jj_scan_token(OP_DIV)) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_337() {
    if (jj_scan_token(OP_MUL)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_3R_206()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_324() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    }
    if (jj_3R_305()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(OP_DECR)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(LEFTBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_305() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(OP_INCR)) return true;
    return false;
  }

  static private boolean jj_3R_276() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_220() {
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_326() {
    if (jj_scan_token(OP_SUB)) return true;
    return false;
  }

  static private boolean jj_3R_277() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_325() {
    if (jj_scan_token(OP_ADD)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(LEFTBRACE)) return true;
    if (jj_3R_276()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_306() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    if (jj_3R_292()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  static private boolean jj_3R_292() {
    if (jj_3R_305()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_scan_token(AUTO)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_308() {
    if (jj_scan_token(OP_SR)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_307() {
    if (jj_scan_token(OP_SL)) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_293() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) return true;
    }
    if (jj_3R_283()) return true;
    return false;
  }

  static private boolean jj_3R_331() {
    if (jj_scan_token(OP_GE)) return true;
    return false;
  }

  static private boolean jj_3R_330() {
    if (jj_scan_token(OP_GT)) return true;
    return false;
  }

  static private boolean jj_3R_283() {
    if (jj_3R_292()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_329() {
    if (jj_scan_token(OP_LE)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_328() {
    if (jj_scan_token(OP_LT)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_245() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_313() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) return true;
    }
    }
    }
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_211() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_297() {
    if (jj_scan_token(OP_GE)) return true;
    return false;
  }

  static private boolean jj_3R_296() {
    if (jj_scan_token(OP_LE)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_295() {
    if (jj_scan_token(OP_GT)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    return false;
  }

  static private boolean jj_3R_336() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_294() {
    if (jj_scan_token(OP_LT)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    if (jj_3R_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    }
    }
    if (jj_3R_278()) return true;
    return false;
  }

  static private boolean jj_3R_312() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_ASS)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_278() {
    if (jj_3R_283()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_156()) return true;
    return false;
  }

  static private boolean jj_3R_360() {
    if (jj_scan_token(OP_AND)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_359() {
    if (jj_scan_token(OP_OR)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_358() {
    if (jj_scan_token(OP_BITOR)) return true;
    return false;
  }

  static private boolean jj_3R_357() {
    if (jj_scan_token(OP_BITXOR)) return true;
    return false;
  }

  static private boolean jj_3R_299() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_312()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_313()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_314()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_356() {
    if (jj_scan_token(OP_BITAND)) return true;
    return false;
  }

  static private boolean jj_3R_355() {
    if (jj_scan_token(OP_SUB)) return true;
    return false;
  }

  static private boolean jj_3R_286() {
    if (jj_scan_token(OP_NEQ)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_354() {
    if (jj_scan_token(OP_MUL)) return true;
    return false;
  }

  static private boolean jj_3R_285() {
    if (jj_scan_token(OP_EQ)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_353() {
    if (jj_scan_token(OP_ADD)) return true;
    return false;
  }

  static private boolean jj_3R_258() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  static private boolean jj_3R_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) return true;
    }
    if (jj_3R_272()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_272() {
    if (jj_3R_278()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_352() {
    if (jj_scan_token(RUNTIME)) return true;
    return false;
  }

  static private boolean jj_3R_351() {
    if (jj_scan_token(GUIDED)) return true;
    return false;
  }

  static private boolean jj_3R_350() {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_349() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_213() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_344() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    Token xsp;
    if (jj_3R_213()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_273() {
    if (jj_scan_token(OP_BITAND)) return true;
    if (jj_3R_266()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_266() {
    if (jj_3R_272()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_3R_174()) return true;
    return false;
  }

  static private boolean jj_3R_265() {
    if (jj_scan_token(REDUCTION)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_348()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_347() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(OP_MUL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_346() {
    if (jj_scan_token(SHARED)) return true;
    return false;
  }

  static private boolean jj_3R_345() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_267() {
    if (jj_scan_token(OP_BITXOR)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_341() {
    if (jj_scan_token(SCHEDULE)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_344()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_264() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) return true;
    }
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_340() {
    if (jj_scan_token(ORDERED)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_249() {
    if (jj_3R_266()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) return true;
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_263() {
    if (jj_scan_token(COPYIN)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_262() {
    if (jj_scan_token(SHARED)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_250() {
    if (jj_scan_token(OP_BITOR)) return true;
    if (jj_3R_236()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_236() {
    if (jj_3R_249()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_335() {
    if (jj_scan_token(NOWAIT)) return true;
    return false;
  }

  static private boolean jj_3R_261() {
    if (jj_scan_token(LASTPRIVATE)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_334() {
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_333() {
    if (jj_3R_327()) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_318() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_260() {
    if (jj_scan_token(FIRSTPRIVATE)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_237() {
    if (jj_scan_token(OP_AND)) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  static private boolean jj_3R_215() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_318()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_3R_236()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_259() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_247() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_3R_215()) return true;
    if (jj_3R_299()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_scan_token(OP_OR)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_3R_193()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_246() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_217() {
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_216() {
    if (jj_3R_246()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(PARALLEL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(OP_ASS)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(OP_ORASS)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(CROSSBAR)) return true;
    if (jj_scan_token(PRAGMA)) return true;
    if (jj_scan_token(UNKNOWN_CPP)) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_scan_token(OP_XORASS)) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_scan_token(OP_ANDASS)) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_scan_token(OP_SRASS)) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_scan_token(OP_SLASS)) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_scan_token(OP_SUBASS)) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_scan_token(OP_ADDASS)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(CROSSBAR)) return true;
    if (jj_scan_token(PRAGMA)) return true;
    if (jj_scan_token(OMP)) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_scan_token(OP_MODASS)) return true;
    return false;
  }

  static private boolean jj_3R_290() {
    if (jj_scan_token(BARRIER)) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(OP_DIVASS)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(OP_MULASS)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_scan_token(OP_ASS)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_122()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_269() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_271() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_scan_token(ORDERED)) return true;
    if (jj_3R_185()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_254() {
    Token xsp;
    if (jj_3R_269()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_253() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_282() {
    if (jj_3R_291()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_252() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_281() {
    if (jj_3R_290()) return true;
    return false;
  }

  static private boolean jj_3R_251() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(LEFTBRACE)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RIGHTBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    return false;
  }

  static private boolean jj_3R_291() {
    if (jj_scan_token(FLUSH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_70()) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_3R_183()) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_181()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_205() {
    if (jj_3R_70()) return true;
    if (jj_3R_71()) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_3R_180()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_179()) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_151()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_scan_token(ATOMIC)) return true;
    if (jj_3R_185()) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  static private boolean jj_3R_257() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_177()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_343() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_256() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_255() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_244() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_3R_238()) return true;
    return false;
  }

  static private boolean jj_3R_304() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_3R_151()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_255()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(CRITICAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_248() {
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_219() {
    if (jj_scan_token(OMP_NL)) return true;
    return false;
  }

  static private boolean jj_3R_229() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_323() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_244()) return true;
    return false;
  }

  static private boolean jj_3R_218() {
    if (jj_scan_token(OMP_CR)) return true;
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_scan_token(OP_DECR)) return true;
    return false;
  }

  static private boolean jj_3R_210() {
    if (jj_3R_244()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_323()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_scan_token(MASTER)) return true;
    if (jj_3R_185()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_228() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_scan_token(OP_INCR)) return true;
    return false;
  }

  static private boolean jj_3R_227() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_scan_token(OP_DEREF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_316() {
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(CROSSBAR)) return true;
    if (jj_scan_token(UNKNOWN_CPP)) return true;
    return false;
  }

  static private boolean jj_3R_226() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_315() {
    if (jj_3R_246()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_239() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_300() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) return true;
    }
    return false;
  }

  static private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  static private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_97() {
    Token xsp;
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(PARALLEL)) return true;
    if (jj_scan_token(SECTIONS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_185()) return true;
    if (jj_3R_301()) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(RIGHTBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_97()) return true;
    if (jj_3R_210()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_189()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_3R_188()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_149()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_3R_187()) return true;
    return false;
  }

  static private boolean jj_3R_311() {
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_310() {
    if (jj_3R_327()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_186()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[114];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x14000000,0x2800000,0x14000000,0x48000000,0x2800000,0x0,0x0,0x0,0x0,0x0,0x2800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000d100,0x0,0x2800000,0x0,0x2800000,0x0,0x0,0x0,0x0,0x8000d100,0x0,0x0,0x0,0x8000d100,0x0,0x0,0x8000d100,0x0,0x8100d100,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000d100,0x0,0x20000000,0x20000000,0x0,0x20000000,0x20000000,0x20000000,0x20000000,0x20000000,0x20000000,0x0,0x0,0x20000000,0x0,0x0,0x20000000,0x8000d100,0xa100d100,0xa100d100,0x0,0x8000d100,0x8000d100,0x8000d100,0x0,0x8000d100,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000d100,0x0,0x80000000,0x0,0x0,0x0,0xd100,0x0,0x8000,0xd100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x20014,0x600,0x20014,0x4d9928,0x600,0x0,0x0,0x108,0x0,0x0,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0x0,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1b000c3,0x0,0x0,0x200000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x800000,0x800000,0x0,0x0,0x0,0x60000000,0x0,0x4000,0x0,0x1b040c3,0x1b040c3,0x800001,0x0,0x0,0x0,0x1200040,0x0,0x100082,0x0,0x8c000000,0x0,0x40000000,0x20000000,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x10000000,0x10080000,0x0,0x0,0x0,0x400000,0x80000,0x0,0x0,0xc8e6000,0x0,0x0,0x80000,0x0,0x0,0x80000,0x0,0x0,0xc8e6000,0x80000,0x0,0x0,0xc8e6000,0x0,0x0,0xc8e6000,0x0,0x2c8e6000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18c00,0x6000,0x6000,0xc,0x60000,0xc8e6000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38e0000,0x0,0x0,0xc8e6000,0x2c8e6000,0x2c8e6000,0x0,0xc8e6000,0xc8e6000,0xc8e6000,0x0,0xc8e6000,0x0,0x0,0x40007f,0x40000000,0x0,0x0,0x1000000,0x2000000,0x800000,0x200,0x200,0x18c00,0x18c00,0x180,0x180,0x60000,0x60000,0x380000,0x380000,0xc8e6000,0x0,0xc8e6000,0xc8e0000,0x80007000,0x80007000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x80,0x80,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x1,0x0,0x0,0x40,0x0,0x0,0x1,0x5,0x1,0x0,0x0,0x0,0x0,0x40,0x5,0x40,0x40,0x11,0x5,0x5,0x5,0x1,0x5,0x5,0x1,0x5,0x11,0x80,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x40,0x0,0x1,0x91,0x91,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x5,0x5,0x1,0x40,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x4000000,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x7d0,0x1800,0x1f80000,0x1f80000,0x1f86080,0x1f86080,0x0,0x4080,0x38000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x1f82000,0x1f82000,0x0,0x1f82000,0x1f82000,0x1f84080,0x1f84080,0x1f80000,0x1f80000,0x0,0x840000,0x1f80000,0x0,0x0,0x4000000,0x4000000,0x4000000,0x4000000,0x0,0x4000000,0x4000000,0x4000000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[46];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 114; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 114; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 114; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 114; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CParser(CParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 114; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 114; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[157];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 114; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 157; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 46; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
