./test/HigherLevelCFGTransformationTest.java:import java.util.ArrayList;
./test/HigherLevelCFGTransformationTest.java:	//		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:	//		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:	//		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:					ArrayList<Node> predSuccessors = ((IfPredicateLink) link).childNode.getInfo().getCFGInfo()
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./test/HigherLevelCFGTransformationTest.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/projects/datarace/Instrumentor.java:import java.util.ArrayList;
./imop/projects/datarace/Instrumentor.java:		ArrayList<Node> list = n.getF1().nodes;
./imop/projects/datarace/Instrumentor.java:			ArrayList<Node> list = ((NodeSequence) n.getF5().node).nodes;
./imop/projects/datarace/Instrumentor.java:				ArrayList<Node> newList = newLogCS.getF1().nodes;
./imop/projects/datarace/Instrumentor.java:				ArrayList<Node> oldList = ((CompoundStatement) n.getF8().getStmtF0().choice).getF1().nodes;
./imop/projects/datarace/DataRaceDetector.java:import java.util.ArrayList;
./imop/projects/datarace/DataRaceDetector.java:		ArrayList<Node> oldList = ((TranslationUnit) root).getF0().nodes;
./imop/projects/datarace/DataRaceDetector.java:		ArrayList<Node> newList = newTU.getF0().nodes;
./imop/projects/datarace/DataRaceDetector.java:		ArrayList<Node> list = n.getF0().nodes;
./imop/projects/criticalSection/CriticalSectionOptimizer.java:import java.util.ArrayList;
./imop/projects/criticalSection/CriticalSectionOptimizer.java:		ArrayList<Data> nodeList = new ArrayList<>();
./imop/PA_2.java:import java.util.ArrayList;
./imop/PA_2.java:			ArrayList<Node> elements = enclosingBlock.getInfo().getCFGInfo().getElementList();
./imop/PA_2.java:			ArrayList<Node> initStmtList = new ArrayList<>();
./imop/parser/FrontEnd.java:import java.util.ArrayList;
./imop/parser/FrontEnd.java:		private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
./imop/Main.java:import java.util.ArrayList;
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:				//				ArrayList<Node> elements = body.getInfo().getCFGInfo().getElementList();
./imop/Main.java:				//				for (Node succ : new ArrayList<>(n.getInfo().getCFGInfo().getSuccessors())) {
./imop/Main.java:				//				ArrayList<Node> elements = body.getInfo().getCFGInfo().getElementList();
./imop/Main.java:				//				for (Node succ : new ArrayList<>(n.getInfo().getCFGInfo().getSuccessors())) {
./imop/Main.java:				//				ArrayList<Node> elements = body.getInfo().getCFGInfo().getElementList();
./imop/Main.java:				for (Node succ : new ArrayList<>(n.getInfo().getCFGInfo().getSuccessors())) {
./imop/Main.java:			ArrayList<Node> critNode = Misc.getInheritedEncloseeList(itStmt, CriticalConstruct.class);
./imop/Main.java:			ArrayList<Node> critNode = Misc.getInheritedEncloseeList(itStmt, CriticalConstruct.class);
./imop/Main.java:			ArrayList<Node> critNode = Misc.getInheritedEncloseeList(itStmt, CriticalConstruct.class);
./imop/Main.java:		ArrayList<Commentor> commentors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		ArrayList<Commentor> commetors = new ArrayList<>();
./imop/Main.java:		private ArrayList<CriticalNode> succNodes = new ArrayList<>();
./imop/Main.java:		private ArrayList<CriticalNode> predNodes = new ArrayList<>();
./imop/Main.java:		ArrayList<CriticalNode> getPredNodes() {
./imop/Main.java:		ArrayList<CriticalNode> getSuccNodes() {
./imop/ParseCheckMain.java:import java.util.ArrayList;
./imop/ParseCheckMain.java:		ArrayList<File> notParsedList = new ArrayList<>();
./imop/lib/getter/CollectorVisitor.java:import java.util.ArrayList;
./imop/lib/getter/CollectorVisitor.java:		public ArrayList<T> getImmediateNeighbours(T currentNode);
./imop/lib/getter/CollectorVisitor.java:		ArrayList<T> startPoints = new ArrayList<>();
./imop/lib/getter/CollectorVisitor.java:		ArrayList<T> collectedNodeList = new ArrayList<>();
./imop/lib/getter/CollectorVisitor.java:		List<T> workList = new ArrayList<>(startPoints);
./imop/lib/getter/CallSiteGetter.java:import java.util.ArrayList;
./imop/lib/getter/CallSiteGetter.java:	public ArrayList<CallSite> callSiteList = new ArrayList<>();
./imop/lib/getter/Deprecated_AllDefinitionGetter.java:	//	public ArrayList<Definition> definitionList = new ArrayList<>();
./imop/lib/getter/Deprecated_AllDefinitionGetter.java:	//				ArrayList<Cell> writes = n.getInfo().getWrites();
./imop/lib/getter/Deprecated_AllDefinitionGetter.java:	//					ArrayList<Cell> writes = ((ParallelForConstruct) n).getF3().getInfo().getWrites();
./imop/lib/getter/Deprecated_AllDefinitionGetter.java:	//					ArrayList<Cell> writes = ((ParallelSectionsConstruct) n).getF3().getInfo().getWrites();
./imop/lib/getter/Deprecated_AllDefinitionGetter.java:	//					ArrayList<Cell> writes = ((ParallelConstruct) n).getParConsF1().getInfo().getWrites();
./imop/lib/getter/Deprecated_AllDefinitionGetter.java:	//					ArrayList<Cell> writes = ((TaskConstruct) n).getF2().getInfo().getWrites();
./imop/lib/getter/CellAccessGetter.java:import java.util.ArrayList;
./imop/lib/getter/CellAccessGetter.java:		public CellSet getPointsToSet(CellList pointerSet, ArrayList<Node> nodeList) {
./imop/lib/getter/CellAccessGetter.java:		public CellSet getPointsToClosureObsolete(CellList pointerList, ArrayList<Node> nodeList) {
./imop/lib/getter/CellAccessGetter.java:			ArrayList<Node> cfgNodeList = new ArrayList<>();
./imop/lib/getter/CellAccessGetter.java:			ArrayList<Node> nodeList = new ArrayList<>();
./imop/lib/getter/OmpClauseGetter.java:import java.util.ArrayList;
./imop/lib/getter/OmpClauseGetter.java:	public ArrayList<OmpClause> ompClauseList = new ArrayList<>();
./imop/lib/getter/InfiInheritedASTNodeListGetter.java:import java.util.ArrayList;
./imop/lib/getter/InfiInheritedASTNodeListGetter.java:	public ArrayList<Node> astContents = new ArrayList<>();
./imop/lib/getter/UsedCellsGetter.java:import java.util.ArrayList;
./imop/lib/getter/CallStatementGetter.java:import java.util.ArrayList;
./imop/lib/getter/CallStatementGetter.java:			ArrayList<SimplePrimaryExpression> argumentSPEList = new ArrayList<>();
./imop/lib/getter/AllFunctionDefinitionGetter.java:import java.util.ArrayList;
./imop/lib/getter/AllFunctionDefinitionGetter.java:	public ArrayList<FunctionDefinition> funcList = new ArrayList<>();
./imop/lib/getter/PostOrderInheritedCollector.java:import java.util.ArrayList;
./imop/lib/getter/PostOrderInheritedCollector.java:	public ArrayList<Node> nodesInPostOrder = new ArrayList<>();
./imop/lib/getter/StringGetter.java:import java.util.ArrayList;
./imop/lib/getter/StringGetter.java:		ArrayList<Commentor> defaultCommentor = new ArrayList<>();
./imop/lib/getter/StringGetter.java:	public static String getString(Node node, ArrayList<Commentor> commentorList) {
./imop/lib/getter/StringGetter.java:	public static String getString(Node node, ArrayList<Commentor> commentorList, boolean withPragma) {
./imop/lib/getter/StringGetter.java:			commentorList = new ArrayList<>(commentorList);
./imop/lib/getter/StringGetter.java:		protected ArrayList<Commentor> commentorList = new ArrayList<>();
./imop/lib/getter/StringGetter.java:		public InternalStringGetter(ArrayList<Commentor> commentorList, boolean withPragma) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:import java.util.ArrayList;
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:public class Deprecated_SharedLvalueAccessGetter extends GJNoArguDepthFirstProcess<ArrayList<Cell>> {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public void addReads(ArrayList<Cell> sym, Node n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public void addWrites(ArrayList<Cell> sym, Node n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public HashSet<Cell> getPointsToSet(ArrayList<Cell> pointerSet, ArrayList<Node> nodeSet) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public HashSet<Cell> getPointsToClosure(ArrayList<Cell> pointerSet, ArrayList<Node> nodeSet) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//				pointerSet = new ArrayList<>(pointsToClosure);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(InitDeclarator n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForInitExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForLTCondition n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForLECondition n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForGTCondition n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForGECondition n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(PostIncrementId n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(PostDecrementId n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(PreIncrementId n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(PreDecrementId n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ShortAssignPlus n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ShortAssignMinus n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForAdditive n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForSubtractive n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(OmpForMultiplicative n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ReturnStatement n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(Expression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(AssignmentExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(NonConditionalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//			ArrayList<Cell> sym = (n.getF0().accept(this));
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ConditionalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ConstantExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(LogicalORExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(LogicalANDExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(InclusiveORExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ExclusiveORExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ANDExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(EqualityExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(EqualOptionalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(EqualExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(NonEqualExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(RelationalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(RelationalOptionalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(RelationalLTExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(RelationalGTExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(RelationalLEExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(RelationalGEExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ShiftExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ShiftOptionalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ShiftLeftExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ShiftRightExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(AdditiveExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(AdditiveOptionalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(AdditivePlusExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(AdditiveMinusExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(MultiplicativeExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(MultiplicativeOptionalExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(MultiplicativeMultiExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(MultiplicativeDivExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(MultiplicativeModExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(CastExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(CastExpressionTyped n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(UnaryExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(UnaryExpressionPreIncrement n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Cell> symList = n.getF1().accept(this);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(UnaryExpressionPreDecrement n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Cell> symList = n.getF1().accept(this);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(UnaryCastExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Cell> symList = n.getF1().accept(this);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Node> nodeList = new ArrayList<>();
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//			return (new ArrayList<>(getPointsToSet(symList, nodeList)));
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(UnarySizeofExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(SizeofUnaryExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(SizeofTypeName n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(PostfixExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Node> cfgNodeList = new ArrayList<>();
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Cell> symList = n.getF0().accept(this);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//					symList = new ArrayList<>();
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//					symList = new ArrayList<>(getPointsToSet(symList, cfgNodeList));
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//					symList = new ArrayList<>();
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//					symList = new ArrayList<>();
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(BracketExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ArgumentList n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(PrimaryExpression n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//			ArrayList<Cell> _ret = new ArrayList<>();
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ExpressionList n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Cell> symList = n.getF0().accept(this);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		ArrayList<Node> nodeList = new ArrayList<>();
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		addReads(new ArrayList<>(symSet), n);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//		addWrites(new ArrayList<>(symSet), n);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//			addReads(new ArrayList<>(symSet), n);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//			addWrites(new ArrayList<>(symSet), n);
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(ExpressionClosed n) {
./imop/lib/getter/Deprecated_SharedLvalueAccessGetter.java:	//	public ArrayList<Cell> visit(Constant n) {
./imop/lib/getter/PostOrderExactCollector.java:import java.util.ArrayList;
./imop/lib/getter/PostOrderExactCollector.java:	public ArrayList<Node> nodesInPostOrder = new ArrayList<>();
./imop/lib/getter/IsSimplePrimaryExpression.java:import java.util.ArrayList;
./imop/lib/getter/AllCallerGetter.java:import java.util.ArrayList;
./imop/lib/getter/AllCallerGetter.java:	public ArrayList<CallSite> allCallerList = new ArrayList<>();
./imop/lib/analysis/dataflow/interprocedural/Deprecated_ReachingDefinitionAnalysis.java:	//		ArrayList<Definition> defList = n.getInfo().deprecated_getDefinitionList();
./imop/lib/analysis/dataflow/interprocedural/PointsToAnalysis.java:import java.util.ArrayList;
./imop/lib/analysis/dataflow/interprocedural/PointsToAnalysis.java:					ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/lib/analysis/dataflow/interprocedural/CopyPropagationAnalysis.java:import java.util.ArrayList;
./imop/lib/analysis/dataflow/interprocedural/CopyPropagationAnalysis.java:					ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/lib/analysis/dataflow/interprocedural/CopyPropagationAnalysis.java:		ArrayList<Assignment> assignmentList = AssignmentGetter.getInterProceduralAssignments(declaration);
./imop/lib/analysis/dataflow/interprocedural/CopyPropagationAnalysis.java:		ArrayList<Assignment> assignList = AssignmentGetter.getInterProceduralAssignments(n);
./imop/lib/analysis/dataflow/Symbol.java:import java.util.ArrayList;
./imop/lib/analysis/dataflow/Symbol.java:	public static ArrayList<Symbol> allSymbols = new ArrayList<>();
./imop/lib/analysis/dataflow/Symbol.java:	//			allSymbols = new ArrayList<Symbol>();
./imop/lib/analysis/dataflow/Symbol.java:			allSymbols = new ArrayList<>();
./imop/lib/analysis/dataflow/Deprecated_LivenessAnalysis.java:	//		ArrayList<Cell> defList = elemNode.getInfo().getWrites();
./imop/lib/analysis/dataflow/Deprecated_InterProceduralCFGPass.java:import java.util.ArrayList;
./imop/lib/analysis/dataflow/Deprecated_InterProceduralCFGPass.java:				ArrayList<CallSite> previousListReversed = Misc.getPreviousCallSitesReversed(callerNode, cs);
./imop/lib/analysis/dataflow/Deprecated_InterProceduralCFGPass.java:				ArrayList<CallSite> predCallSites = pred.getInfo().getCallSites();
./imop/lib/analysis/dataflow/Deprecated_InterProceduralCFGPass.java:					ArrayList<CallSite> nextCallSites = Misc.getNextCallSites(callerNode, callSite);
./imop/lib/analysis/dataflow/Deprecated_InterProceduralCFGPass.java:					ArrayList<CallSite> nextCallSites = Misc.getNextCallSites(callerNode, returnTo);
./imop/lib/analysis/dataflow/Deprecated_InterProceduralCFGPass.java:		ArrayList<CallSite> callSites = n.getInfo().getCallSites();
./imop/lib/analysis/dataflow/intraprocedural/Deprecated_DefinitionReachabilityMarker.java:import java.util.ArrayList;
./imop/lib/analysis/dataflow/intraprocedural/Deprecated_DefinitionReachabilityMarker.java:			ArrayList<Node> successors = n.getInfo().getCFGInfo().getSuccessors();
./imop/lib/analysis/dataflow/intraprocedural/Deprecated_AntiDefVisitor.java:import java.util.ArrayList;
./imop/lib/analysis/dataflow/intraprocedural/Deprecated_AntiDefVisitor.java:	public ArrayList<Definition> definitionList = new ArrayList<>();
./imop/lib/analysis/mhp/Phase.java:import java.util.ArrayList;
./imop/lib/analysis/mhp/Phase.java:	private ArrayList<Phase> predPhases = new ArrayList<>();
./imop/lib/analysis/mhp/Phase.java:	public ArrayList<BeginPhasePoint> getBeginPointsCopy() {
./imop/lib/analysis/mhp/Phase.java:		return new ArrayList<>(beginPoints);
./imop/lib/analysis/mhp/Phase.java:	public ArrayList<Phase> getPredPhases() {
./imop/lib/analysis/mhp/Phase.java:		ArrayList<Phase> allPhaseList = this.parConstruct.getInfo().getAllPhaseList();
./imop/lib/analysis/mhp/Phase.java:		ArrayList<Phase> allPhaseList = parCons.getInfo().getAllPhaseList();
./imop/lib/analysis/mhp/Phase.java:	public void setBeginPointsNoUpdate(ArrayList<BeginPhasePoint> beginPoints) {
./imop/lib/analysis/mhp/Phase.java:			ArrayList<BeginPhasePoint> belowBPP = phBelow.getBeginPointsCopy();
./imop/lib/analysis/mhp/OldLocksetMarker.java:import java.util.ArrayList;
./imop/lib/analysis/mhp/OldLocksetMarker.java:public class OldLocksetMarker extends GJVoidDepthFirstProcess<ArrayList<OldLock>> {
./imop/lib/analysis/mhp/OldLocksetMarker.java:	public void initProcess(Node n, ArrayList<OldLock> argu) {
./imop/lib/analysis/mhp/OldLocksetMarker.java:			ArrayList<OldLock> lockSet = n.getInfo().getLockSet();
./imop/lib/analysis/mhp/OldLocksetMarker.java:	public void processCalls(Node n, ArrayList<OldLock> argu) {
./imop/lib/analysis/mhp/OldLocksetMarker.java:	public void visit(CriticalConstruct n, ArrayList<OldLock> argu) {
./imop/lib/analysis/mhp/OldLocksetMarker.java:	public void visit(AtomicConstruct n, ArrayList<OldLock> argu) {
./imop/lib/analysis/mhp/MHPAnalyzer.java:import java.util.ArrayList;
./imop/lib/analysis/mhp/MHPAnalyzer.java:		parInfo.setAllPhaseList(new ArrayList<>());
./imop/lib/analysis/mhp/MHPAnalyzer.java:		ArrayList<Phase> allPhaseList = parInfo.getAllPhaseList();
./imop/lib/analysis/mhp/MHPAnalyzer.java:		ArrayList<BeginPhasePoint> beginPoints = new ArrayList<>();
./imop/lib/analysis/mhp/MHPAnalyzer.java:		ArrayList<NodeWithStack> startPoints = new ArrayList<>();
./imop/lib/analysis/mhp/MHPAnalyzer.java:		ArrayList<EndPhasePoint> lastEndPoints = new ArrayList<>();
./imop/lib/analysis/mhp/MHPAnalyzer.java:		//		ArrayList<Phase> penultimatePhaseListCopy = new ArrayList<>(parInfo.getAllPhaseList());
./imop/lib/analysis/mhp/MHPAnalyzer.java:		//			ArrayList<PhasePoint> oldEndPoints = new ArrayList<>(oldPhase.getEndPoints());
./imop/lib/analysis/mhp/MHPAnalyzer.java:		//				lastPhase.setSuccPhases(new ArrayList<>(oldPhase.getSuccPhases()));
./imop/lib/analysis/mhp/lock/RoutineLock.java:import java.util.ArrayList;
./imop/lib/analysis/mhp/lock/RoutineLock.java:		ArrayList<SimplePrimaryExpression> argumentList = lockingRoutine.getInfo().getArgumentList();
./imop/lib/analysis/mhp/ParallelRegionMarker.java:import java.util.ArrayList;
./imop/lib/analysis/mhp/ParallelRegionMarker.java:		ArrayList<CallSite> callSiteList = callSiteGetter.callSiteList;
./imop/lib/analysis/typeSystem/Type.java:import java.util.ArrayList;
./imop/lib/analysis/typeSystem/Type.java:	public ArrayList<StorageClass> storageClasses;
./imop/lib/analysis/typeSystem/Type.java:	public static ArrayList<Type> getTypeTree(Declaration declaration, Scopeable scope,
./imop/lib/analysis/typeSystem/Type.java:		ArrayList<String> ids = Misc.getIdNameList(declaration);
./imop/lib/analysis/typeSystem/Type.java:		ArrayList<Type> typeList = new ArrayList<>();
./imop/lib/analysis/typeSystem/Type.java:	public static ArrayList<Type> getTypeTree(Declaration declaration, Scopeable scope) {
./imop/lib/analysis/typeSystem/Type.java:		ArrayList<String> ids = Misc.getIdNameList(declaration);
./imop/lib/analysis/typeSystem/Type.java:		ArrayList<Type> typeList = new ArrayList<>();
./imop/lib/analysis/typeSystem/Type.java:	public static ArrayList<Type> getTypeTree(ParameterTypeList paramTypeList, Scopeable scope) {
./imop/lib/analysis/typeSystem/Type.java:		ArrayList<Type> typeList = new ArrayList<>();
./imop/lib/analysis/typeSystem/Type.java:	public static ArrayList<Type> getTypeTree(StructDeclaration structDeclaration, Scopeable scope) {
./imop/lib/analysis/typeSystem/Type.java:		ArrayList<String> ids = new ArrayList<>(Misc.getIdNameList(structDeclaration));
./imop/lib/analysis/typeSystem/Type.java:		ArrayList<Type> typeList = new ArrayList<>();
./imop/lib/analysis/typeSystem/Type.java:	public static Type getTypeFromArithmeticKeys(ArrayList<ArithmeticTypeKey> keySet) {
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:import java.util.ArrayList;
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:		ArrayList<StructOrUnionMember> elementList = new ArrayList<>();
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:	private static ArrayList<StructOrUnionMember> getElementList(StructDeclaration decl, Scopeable scope) {
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:		ArrayList<StructOrUnionMember> members = new ArrayList<>();
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:		ArrayList<EnumMember> members = new ArrayList<>();
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:		ArrayList<FunctionType.Parameter> parameters = new ArrayList<>();
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:	private ArrayList<FunctionType.Parameter> getParameters(ParameterTypeList paramList, Scopeable scope) {
./imop/lib/analysis/typeSystem/TypeTreeGetter.java:		ArrayList<FunctionType.Parameter> parameters = new ArrayList<>();
./imop/lib/analysis/typeSystem/StructType.java:import java.util.ArrayList;
./imop/lib/analysis/typeSystem/StructType.java:	private ArrayList<StructOrUnionMember> elementList = new ArrayList<>();
./imop/lib/analysis/typeSystem/StructType.java:	public void makeComplete(ArrayList<StructOrUnionMember> elementList) {
./imop/lib/analysis/typeSystem/StructType.java:	public ArrayList<StructOrUnionMember> getElementList() {
./imop/lib/analysis/typeSystem/FunctionType.java:import java.util.ArrayList;
./imop/lib/analysis/typeSystem/FunctionType.java:	private ArrayList<Parameter> parameterList = new ArrayList<>();
./imop/lib/analysis/typeSystem/FunctionType.java:	public FunctionType(Type returnType, ArrayList<Parameter> parameterList) {
./imop/lib/analysis/typeSystem/FunctionType.java:	public ArrayList<Parameter> getParameterList() {
./imop/lib/analysis/typeSystem/EnumType.java:import java.util.ArrayList;
./imop/lib/analysis/typeSystem/EnumType.java:	private ArrayList<EnumMember> enumMembers = new ArrayList<>();
./imop/lib/analysis/typeSystem/EnumType.java:	public void makeComplete(ArrayList<EnumMember> enumMembers) {
./imop/lib/analysis/typeSystem/EnumType.java:	public ArrayList<EnumMember> getEnumMembers() {
./imop/lib/analysis/typeSystem/EnumType.java:	public void setEnumMembers(ArrayList<EnumMember> enumMembers) {
./imop/lib/analysis/typeSystem/UnionType.java:import java.util.ArrayList;
./imop/lib/analysis/typeSystem/UnionType.java:	private ArrayList<StructOrUnionMember> elementList;
./imop/lib/analysis/typeSystem/UnionType.java:	public void makeComplete(ArrayList<StructOrUnionMember> elementList) {
./imop/lib/analysis/typeSystem/UnionType.java:	public ArrayList<StructOrUnionMember> getElementList() {
./imop/lib/analysis/typeSystem/ArithmeticTypeKeyCollector.java:import java.util.ArrayList;
./imop/lib/analysis/typeSystem/ArithmeticTypeKeyCollector.java:	public ArrayList<ArithmeticTypeKey> keywords = new ArrayList<>();
./imop/lib/analysis/typeSystem/ArithmeticTypeKeyCollector.java:		ArrayList<String> keywordList = new ArrayList<>();
./imop/lib/analysis/AssignmentGetter.java:import java.util.ArrayList;
./imop/lib/analysis/AssignmentGetter.java:	public static ArrayList<Assignment> getLexicalAssignments(Node node) {
./imop/lib/analysis/AssignmentGetter.java:		ArrayList<Assignment> assignmentList = new ArrayList<>();
./imop/lib/analysis/AssignmentGetter.java:	public static ArrayList<Assignment> getInterProceduralAssignments(Node node) {
./imop/lib/analysis/AssignmentGetter.java:		ArrayList<Assignment> assignmentList = new ArrayList<>();
./imop/lib/analysis/AssignmentGetter.java:		public ArrayList<Assignment> asssignmentList = new ArrayList<>();
./imop/lib/analysis/AssignmentGetter.java:				ArrayList<ParameterDeclaration> paramList = funcDef.getInfo().getCFGInfo()
./imop/lib/analysis/SVEChecker.java:import java.util.ArrayList;
./imop/lib/analysis/SVEChecker.java:		ArrayList<BeginPhasePoint> pBPPList = ph.getBeginPointsCopy();
./imop/lib/analysis/SVEChecker.java:				ArrayList<SimplePrimaryExpression> argumentList = callStmt.getPreCallNode().getArgumentList();
./imop/lib/analysis/SVEChecker.java:			ArrayList<Node> elements = compStmt.getInfo().getCFGInfo().getElementList();
./imop/lib/util/CellList.java:import java.util.ArrayList;
./imop/lib/util/CellList.java:		this.internalRepresentation = new ArrayList<>();
./imop/lib/util/CellList.java:		this.internalRepresentation = new ArrayList<>(otherList.internalRepresentation);
./imop/lib/util/CellList.java:		this.internalRepresentation = new ArrayList<>(otherSet.internalRepresentation);
./imop/lib/util/CellList.java:		return ((ArrayList<Cell>) internalRepresentation).indexOf(s);
./imop/lib/util/CellList.java:		return ((ArrayList<Cell>) internalRepresentation).lastIndexOf(s);
./imop/lib/util/CellList.java:		if (((ArrayList<Cell>) internalRepresentation).contains(getGenericCell())) {
./imop/lib/util/CellList.java:			return ((ArrayList<Cell>) internalRepresentation).get(index);
./imop/lib/util/CellList.java:				Cell old = ((ArrayList<Cell>) this.internalRepresentation).get(index);
./imop/lib/util/CellList.java:				((ArrayList<Cell>) this.internalRepresentation).set(index, s);
./imop/lib/util/CellList.java:				return ((ArrayList<Cell>) internalRepresentation).add(s);
./imop/lib/util/CellList.java:				((ArrayList<Cell>) internalRepresentation).add(index, s);
./imop/lib/util/CellList.java:		Cell old = ((ArrayList<Cell>) internalRepresentation).remove(index);
./imop/lib/util/CellList.java:				internalRepresentation = new ArrayList<>(getAllCells());
./imop/lib/util/CellList.java:				boolean removed = ((ArrayList<Cell>) internalRepresentation).remove(s);
./imop/lib/util/CellList.java:				return ((ArrayList<Cell>) internalRepresentation).removeAll(c.internalRepresentation);
./imop/lib/util/CellList.java:				return ((ArrayList<Cell>) internalRepresentation).containsAll(c.internalRepresentation);
./imop/lib/util/CellList.java:			internalRepresentation = new ArrayList<>(getAllCells());
./imop/lib/util/CellList.java:			((ArrayList<Cell>) internalRepresentation).replaceAll(operator);
./imop/lib/util/CellList.java:			((ArrayList<Cell>) internalRepresentation).replaceAll(operator);
./imop/lib/util/CellList.java:				Cell c = ((ArrayList<Cell>) this.internalRepresentation).get(i);
./imop/lib/util/CellList.java:						((ArrayList<Cell>) this.internalRepresentation).set(index, sym);
./imop/lib/util/CellList.java:			((ArrayList<Cell>) this.internalRepresentation).set(index, sym);
./imop/lib/util/CellList.java:		Cell c = ((ArrayList<Cell>) this.internalRepresentation).get(index);
./imop/lib/util/CellList.java:			((ArrayList<Cell>) this.internalRepresentation).set(index, sym);
./imop/lib/util/Misc.java:import java.util.ArrayList;
./imop/lib/util/Misc.java:	public static boolean changePerformed(ArrayList<UpdateSideEffects> sideEffects) {
./imop/lib/util/Misc.java:		root.accept(new OldLocksetMarker(), new ArrayList<OldLock>());
./imop/lib/util/Misc.java:				ArrayList<Node> startNodeList = new ArrayList<>();
./imop/lib/util/Misc.java:	public static boolean hasSubTypeEndPoints(ArrayList<PhasePoint> newPoints, ArrayList<PhasePoint> oldPoints) {
./imop/lib/util/Misc.java:	// ArrayList<Node> list = n.f1.nodes;
./imop/lib/util/Misc.java:		ArrayList<Node> sourceSuccessors = sourceNode.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/util/Misc.java:			ArrayList<Node> destinationPredecessors = destinationNode.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/util/Misc.java:	public static void printToFile(Node root, String fileName, ArrayList<Commentor> commentorList) {
./imop/lib/util/Misc.java:		Misc.printToFile(root, fileName, new ArrayList<>());
./imop/lib/util/Misc.java:	public static ArrayList<Node> getFirstLeaves(Node n) {
./imop/lib/util/Misc.java:		ArrayList<Node> leafArrayList = new ArrayList<>();
./imop/lib/util/Misc.java:				ArrayList<Node> beginSuccs = n.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/util/Misc.java:					ArrayList<Node> retVal = getFirstLeaves(beginSucc);
./imop/lib/util/Misc.java:					leafArrayList.addAll(retVal);
./imop/lib/util/Misc.java:				ArrayList<Node> endSuccs = n.getParent().getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/util/Misc.java:					ArrayList<Node> retVal = getFirstLeaves(endSucc);
./imop/lib/util/Misc.java:					leafArrayList.addAll(retVal);
./imop/lib/util/Misc.java:				leafArrayList.add(n);
./imop/lib/util/Misc.java:			ArrayList<Node> beginSuccs = beginNode.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/util/Misc.java:				ArrayList<Node> retVal = getFirstLeaves(beginSucc);
./imop/lib/util/Misc.java:				leafArrayList.addAll(retVal);
./imop/lib/util/Misc.java:		return leafArrayList;
./imop/lib/util/Misc.java:	public static <T extends Node> ArrayList<T> getExactPostOrderEnclosee(Node n, Class<T> astType) {
./imop/lib/util/Misc.java:			return new ArrayList<>();
./imop/lib/util/Misc.java:		ArrayList<T> retList = new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<Node> getExactPostOrderEnclosee(Node n, HashSet<Class<? extends Node>> astType) {
./imop/lib/util/Misc.java:			return new ArrayList<>();
./imop/lib/util/Misc.java:	public static <T extends Node> ArrayList<T> getInheritedPostOrderEnclosee(Node n, Class<T> astType) {
./imop/lib/util/Misc.java:			return new ArrayList<>();
./imop/lib/util/Misc.java:		ArrayList<T> retList = new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<Node> getInheritedPostOrderEnclosee(Node n, HashSet<Class<? extends Node>> astType) {
./imop/lib/util/Misc.java:			return new ArrayList<>();
./imop/lib/util/Misc.java:	public static <T> ArrayList<Node> getInheritedEncloseeList(Node n, HashSet<Class<T>> astType) {
./imop/lib/util/Misc.java:			return new ArrayList<>();
./imop/lib/util/Misc.java:	public static <T> ArrayList<Node> getInheritedEncloseeList(Node n, Class<T> astType) {
./imop/lib/util/Misc.java:			return new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<Node> getCaseStatements(SwitchStatement switchStmt) {
./imop/lib/util/Misc.java:		ArrayList<Node> caseStatements = new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<String> getIdNameList(Declaration decl) {
./imop/lib/util/Misc.java:		ArrayList<String> list = new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<String> getIdNameList(StructDeclaration decl) {
./imop/lib/util/Misc.java:		ArrayList<String> list = new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<String> obtainVarNames(VariableList vL) {
./imop/lib/util/Misc.java:		ArrayList<String> ids = new ArrayList<>();
./imop/lib/util/Misc.java:	public static void addVarNames(VariableList vL, ArrayList<String> namesToBeAdded) {
./imop/lib/util/Misc.java:		ArrayList<String> namesAlreadyPresent = Misc.obtainVarNames(vL);
./imop/lib/util/Misc.java:			ArrayList<Node> newNodes = new ArrayList<>();
./imop/lib/util/Misc.java:		ArrayList<OldLock> n1Lockset = n1.getInfo().getLockSet();
./imop/lib/util/Misc.java:		ArrayList<OldLock> n2Lockset = n2.getInfo().getLockSet();
./imop/lib/util/Misc.java:	public static ArrayList<CallSite> getNextCallSites(Node n, CallSite callSite) {
./imop/lib/util/Misc.java:		ArrayList<CallSite> callSites = n.getInfo().getCallSites();
./imop/lib/util/Misc.java:		ArrayList<CallSite> returnSet = new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<CallSite> getPreviousCallSitesReversed(Node n, CallSite callSite) {
./imop/lib/util/Misc.java:		ArrayList<CallSite> callSites = n.getInfo().getCallSites();
./imop/lib/util/Misc.java:		ArrayList<CallSite> returnSet = new ArrayList<>();
./imop/lib/util/Misc.java:		ArrayList<T> reverseList = new ArrayList<>();
./imop/lib/util/Misc.java:	public static ArrayList<OmpClause> getClauseList(OmpConstruct ompConstruct) {
./imop/lib/util/Misc.java:		ArrayList<Node> enclosingNodesOfOne = one.getInfo().getNonLeafNestingPathExclusive();
./imop/lib/util/Misc.java:		ArrayList<Node> enclosingNodesOfTwo = two.getInfo().getNonLeafNestingPathExclusive();
./imop/lib/util/Misc.java:		enclosingNodesOfOne = (ArrayList<Node>) Misc.reverseList(enclosingNodesOfOne);
./imop/lib/util/Misc.java:		enclosingNodesOfTwo = (ArrayList<Node>) Misc.reverseList(enclosingNodesOfTwo);
./imop/lib/util/Misc.java:		ArrayList<Scopeable> enclosingCSOfOne = new ArrayList<>();
./imop/lib/util/Misc.java:		ArrayList<Scopeable> enclosingCSOfTwo = new ArrayList<>();
./imop/lib/util/Misc.java:	public static void dumpRootOrError(String string, ArrayList<UpdateSideEffects> sideEffectList) {
./imop/lib/util/Misc.java:		ArrayList<OldLock> lockSetN1 = n1.getInfo().getLockSet();
./imop/lib/util/Misc.java:		ArrayList<OldLock> lockSetN2 = n2.getInfo().getLockSet();
./imop/lib/util/CellCollection.java:import java.util.ArrayList;
./imop/lib/util/SymbolList.java:import java.util.ArrayList;
./imop/lib/util/SymbolList.java:		this.internalRepresentation = new ArrayList<>();
./imop/lib/util/SymbolList.java:		this.internalRepresentation = new ArrayList<>(otherList.internalRepresentation);
./imop/lib/util/SymbolList.java:	//		return ((ArrayList<Symbol>) internalRepresentation).indexOf(s);
./imop/lib/util/SymbolList.java:	//		return ((ArrayList<Symbol>) internalRepresentation).lastIndexOf(s);
./imop/lib/util/SymbolList.java:	//		if (((ArrayList<Symbol>) internalRepresentation).contains(Symbol.getGenericCell())) {
./imop/lib/util/SymbolList.java:	//			return ((ArrayList<Symbol>) internalRepresentation).get(index);
./imop/lib/util/SymbolList.java:	//		return ((ArrayList<Symbol>) internalRepresentation).set(index, s);
./imop/lib/util/SymbolList.java:	//				return ((ArrayList<Symbol>) internalRepresentation).add(s);
./imop/lib/util/SymbolList.java:	//		((ArrayList<Symbol>) internalRepresentation).add(index, s);
./imop/lib/util/SymbolList.java:	//		return ((ArrayList<Symbol>) internalRepresentation).remove(index);
./imop/lib/util/SymbolList.java:	//				internalRepresentation = new ArrayList<>(Symbol.allSymbols);
./imop/lib/util/SymbolList.java:	//				return ((ArrayList<Symbol>) internalRepresentation).remove(s);
./imop/lib/util/SymbolList.java:	//				return ((ArrayList<Symbol>) internalRepresentation).removeAll(c.internalRepresentation);
./imop/lib/util/SymbolList.java:	//				return ((ArrayList<Symbol>) internalRepresentation).containsAll(c.internalRepresentation);
./imop/lib/util/SymbolList.java:	//				internalRepresentation = new ArrayList<>(c.internalRepresentation);
./imop/lib/util/SymbolList.java:	//				return ((ArrayList<Symbol>) internalRepresentation).retainAll(c.internalRepresentation);
./imop/lib/cfg/parallel/DataFlowGraph.java:	//		//		ArrayList<Lock> n1LockSet = n1.getInfo().getLockSet();
./imop/lib/cfg/parallel/DataFlowGraph.java:	//		//		ArrayList<Lock> n2LockSet = n2.getInfo().getLockSet();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/TaskConstructCFGInfo.java:	public ArrayList<OmpClause> getClauseList() {
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<OmpClause> retList = new ArrayList<>();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<OmpClause> clauseList = this.getClauseList();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<Node> predList = removed.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<Node> succList = removed.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<OmpClause> clauseList = this.getClauseList();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<Node> predList = removed.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<Node> succList = removed.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<OmpClause> clauseList = this.getClauseList();
./imop/lib/cfg/info/TaskConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/TaskConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/ForConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/ForConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/ForConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/ForConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/ForConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/CallStatementCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/CallStatementCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/CallStatementCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/AtomicConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/AtomicConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/AtomicConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/CFGInfo.java:	private ArrayList<Node> succBlocks;
./imop/lib/cfg/info/CFGInfo.java:	private ArrayList<Node> predBlocks;
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getSuccBlocks() {
./imop/lib/cfg/info/CFGInfo.java:			succBlocks = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getPredBlocks() {
./imop/lib/cfg/info/CFGInfo.java:			predBlocks = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getSuccessors() {
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getPredecessors() {
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getLeafSuccessors() {
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> leafSuccessors = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> successors = this.getSuccessors();
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getLeafPredecessors() {
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> leafPredecessors = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> predecessors = this.getPredecessors();
./imop/lib/cfg/info/CFGInfo.java:			ArrayList<FunctionDefinition> calledDefinitions = callStmt.getInfo().getCalledDefinitions();
./imop/lib/cfg/info/CFGInfo.java:			ArrayList<FunctionDefinition> calledDefinitions = callStmt.getInfo().getCalledDefinitions();
./imop/lib/cfg/info/CFGInfo.java:				ArrayList<CallStatement> callSites = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:			ArrayList<FunctionDefinition> calledDefinitions = callStmt.getInfo().getCalledDefinitions();
./imop/lib/cfg/info/CFGInfo.java:				ArrayList<CallStatement> callSites = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:			ArrayList<FunctionDefinition> calledDefinitions = callStmt.getInfo().getCalledDefinitions();
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getExecutableLeafSuccessors() {
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getExecutableLeafSuccessors(HashSet<Node> visited) {
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> executableLeafSuccessors = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getExecutableLeafPredecessors() {
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getExecutableLeafPredecessors(HashSet<Node> visited) {
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> executableLeafPredecessors = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> toList = source.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> fromList = destination.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> toList = source.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/info/CFGInfo.java:		ArrayList<Node> fromList = destination.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/info/CFGInfo.java:	private ArrayList<Node> succ = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:	private ArrayList<Node> pred = new ArrayList<>();
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> deprecated_getSucc() {
./imop/lib/cfg/info/CFGInfo.java:	public ArrayList<Node> deprecated_getPred() {
./imop/lib/cfg/info/ForStatementCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/ForStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/ForStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/ForStatementCFGInfo.java:		ArrayList<Node> prevNodeList = new ArrayList<>(removed.getInfo().getCFGInfo().getPredBlocks());
./imop/lib/cfg/info/ForStatementCFGInfo.java:		ArrayList<Node> nextNodeList = new ArrayList<>(removed.getInfo().getCFGInfo().getSuccBlocks());
./imop/lib/cfg/info/ForStatementCFGInfo.java:		ArrayList<Node> prevNodeList = new ArrayList<>(removed.getInfo().getCFGInfo().getPredBlocks());
./imop/lib/cfg/info/ForStatementCFGInfo.java:		ArrayList<Node> nextNodeList = new ArrayList<>(removed.getInfo().getCFGInfo().getSuccBlocks());
./imop/lib/cfg/info/ForStatementCFGInfo.java:			ArrayList<Node> termPredsList = new ArrayList<>(termExpression.getInfo().getCFGInfo().getPredBlocks());
./imop/lib/cfg/info/ForStatementCFGInfo.java:			ArrayList<Node> bodyPredsList = new ArrayList<>(loopBody.getInfo().getCFGInfo().getPredBlocks());
./imop/lib/cfg/info/ForStatementCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/ForStatementCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public void setElementList(ArrayList<Node> elementList) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<Node> getElementList() {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<Node> elementList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:			ArrayList<UpdateSideEffects> sideEffectList = this.removeElement(elementList.getNodes().get(0));
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> removeElement(int i) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> removeElement(Node element) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> removeStatement(Statement element) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> removeDeclaration(Declaration declaration) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<String> declaredIds = Misc.getIdNameList(declaration);
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	private ArrayList<UpdateSideEffects> removeWithDFDs(Node node) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> addAtLast(Node element) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> addElement(Node element) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> addElement(int index, Node element) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> addStatement(Statement element) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> addStatement(int index, Statement element) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> addDeclaration(Declaration declaration) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> addDeclaration(int index, Declaration declaration) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<String> declaredIds = Misc.getIdNameList(declaration);
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<UpdateSideEffects> sideEffectList = this.addElement(index, newElement);
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	private ArrayList<UpdateSideEffects> insertNewDFDsWithNode(int index, Node node) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<Node> stmtList = this.getElementList();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<Node> stmtList = this.getElementList();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	private ArrayList<UpdateSideEffects> insertNewDFDsWithoutNode(Node node) {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:						labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:				ArrayList<Label> labelAnnotations = null;
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:					labelAnnotations = new ArrayList<>(stmtInfo.getLabelAnnotations());
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/CompoundStatementCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/SingleConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/SingleConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/SingleConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/SingleConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/SingleConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:	public void setParameterDeclarationList(ArrayList<ParameterDeclaration> parameterDeclarations) {
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:	public ArrayList<ParameterDeclaration> getParameterDeclarationList() {
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:		ArrayList<ParameterDeclaration> paramDeclList = new ArrayList<>();
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:		ArrayList<ParameterDeclaration> paramList = this.getParameterDeclarationList();
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:		ArrayList<ParameterDeclaration> paramList = this.getParameterDeclarationList();
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:		ArrayList<ParameterDeclaration> paramList = this.getParameterDeclarationList();
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/FunctionDefinitionCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:	//	public void setCaseDefaultLabelStatementList(ArrayList<Statement> caseDefaultLabelList) {
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:	//		ArrayList<Label> oldLabels = ((SwitchStatement) owner).getInfo().getEnclosedLabels();
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:	//		ArrayList<Node> cfgElements = body.getInfo().getCFGInfo().getElementList();
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/SwitchStatementCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/IfStatementCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/IfStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> setThenBody(Statement stmt) {
./imop/lib/cfg/info/IfStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/IfStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> setElseBody(Statement stmt) {
./imop/lib/cfg/info/IfStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/IfStatementCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/IfStatementCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:	public ArrayList<OmpClause> getCFGClauseList() {
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<OmpClause> retList = new ArrayList<>();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<Node> predList = removed.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<Node> succList = removed.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<OmpClause> clauseList = this.getCFGClauseList();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<Node> predList = removed.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<Node> succList = removed.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<OmpClause> clauseList = this.getCFGClauseList();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<OmpClause> clauseList = this.getCFGClauseList();
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/ParallelConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/CriticalConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/CriticalConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/CriticalConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/CriticalConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/CriticalConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:	public void setSectionList(ArrayList<Statement> newSectionBodies) {
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:	public ArrayList<Statement> getSectionList() {
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:		ArrayList<Statement> stmtList = new ArrayList<>();
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> addSection(int index, Statement sectionBody) {
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> addSection(Statement sectionBody) {
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/SectionsConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/DoStatementCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/DoStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/DoStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/DoStatementCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/DoStatementCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/MasterConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/MasterConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/MasterConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/MasterConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/MasterConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/OrderedConstructCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/OrderedConstructCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/OrderedConstructCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/OrderedConstructCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/OrderedConstructCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/info/WhileStatementCFGInfo.java:import java.util.ArrayList;
./imop/lib/cfg/info/WhileStatementCFGInfo.java:	public ArrayList<UpdateSideEffects> setBody(Statement stmt) {
./imop/lib/cfg/info/WhileStatementCFGInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/cfg/info/WhileStatementCFGInfo.java:	public ArrayList<Node> getAllComponents() {
./imop/lib/cfg/info/WhileStatementCFGInfo.java:		ArrayList<Node> retList = new ArrayList<>();
./imop/lib/cfg/link/autoupdater/AutomatedUpdater.java:import java.util.ArrayList;
./imop/lib/cfg/link/autoupdater/AutomatedUpdater.java:	protected static ArrayList<Updater> updateSetForRemoval;
./imop/lib/cfg/link/autoupdater/AutomatedUpdater.java:	protected static ArrayList<Updater> updateSetForInsertion;
./imop/lib/cfg/link/autoupdater/AutomatedUpdater.java:		updateSetForRemoval = new ArrayList<>();
./imop/lib/cfg/link/autoupdater/AutomatedUpdater.java:		updateSetForInsertion = new ArrayList<>();
./imop/lib/cfg/link/autoupdater/AutomatedUpdater.java:	public static void updateInformation(Node node, ArrayList<Updater> interSet) {
./imop/lib/cfg/link/autoupdater/EndReachabilityAdjuster.java:import java.util.ArrayList;
./imop/lib/cfg/link/autoupdater/EndReachabilityAdjuster.java:			ArrayList<Node> elementList = link.enclosingNonLeafNode.getInfo().getCFGInfo().getElementList();
./imop/lib/cfg/link/autoupdater/EndReachabilityAdjuster.java:			ArrayList<Node> elementList = link.enclosingNonLeafNode.getInfo().getCFGInfo().getElementList();
./imop/lib/cfg/NonNestedCFGGenerator.java:import java.util.ArrayList;
./imop/lib/cfg/NonNestedCFGGenerator.java:		ArrayList<Node> succList = pred.getInfo().getCFGInfo().deprecated_getSucc();
./imop/lib/cfg/NonNestedCFGGenerator.java:			ArrayList<Node> nestedSuccessors = n.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/NonNestedCFGGenerator.java:				ArrayList<Node> leavesOnThisPath = Misc.getFirstLeaves(nestedSucc); // Get the first leaf nodes
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:import java.util.ArrayList;
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<Node> edgesFromPred = pred.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<Node> edgesFromSucc = succ.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<Node> edgesFromPred = pred.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<Node> edgesFromSucc = succ.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<Node> paramList = Misc.getInheritedEncloseeList(n.getF1(), ParameterDeclaration.class);
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<OmpClause> executableClauses = new ArrayList<>();
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<OmpClause> executableClauses = new ArrayList<>();
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:		ArrayList<Statement> caseStmts = n.getInfo().getCaseDefaultLabelStatementList(); // OLD: Misc.getCaseStatements(n); // Obtain the vector of all the immediate cases and default within the current switch block
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:			ArrayList<Node> predList = oldInternalNode.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/Deprecated_ImmediatePredecessorInserter.java:			ArrayList<Node> succList = oldInternalNode.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/SimpleNodeEdgeWriter.java:import java.util.ArrayList;
./imop/lib/cfg/SimpleNodeEdgeWriter.java:			ArrayList<Node> succList = n.getInfo().getCFGInfo().deprecated_getSucc();
./imop/lib/cfg/CFGLinkFinder.java:import java.util.ArrayList;
./imop/lib/cfg/CFGLinkFinder.java:			ArrayList<Node> paramList = Misc.getInheritedEncloseeList(n.getF1(), ParameterDeclaration.class);
./imop/lib/cfg/CFGLinkFinder.java:			//			ArrayList<Node> stmtList = body.f1.nodes;
./imop/lib/cfg/CFGLinkFinder.java:			//			ArrayList<OmpClause> executableClauses = new ArrayList<>();
./imop/lib/cfg/CFGLinkFinder.java:			ArrayList<OmpClause> executableClauses = new ArrayList<>();
./imop/lib/cfg/CFGGenerator.java:import java.util.ArrayList;
./imop/lib/cfg/CFGGenerator.java:					ArrayList<Node> originalSuccList = pred.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/CFGGenerator.java:			ArrayList<Node> edgesFromPred = pred.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/cfg/CFGGenerator.java:			ArrayList<Node> edgesFromSucc = succ.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/cfg/CFGGenerator.java:			ArrayList<Node> paramList = Misc.getInheritedEncloseeList(n.getF1(), ParameterDeclaration.class);
./imop/lib/cfg/CFGGenerator.java:			//		ArrayList<Node> stmtList = body.f1.nodes;
./imop/lib/cfg/CFGGenerator.java:			ArrayList<OmpClause> executableClauses = new ArrayList<>();
./imop/lib/cfg/CFGGenerator.java:			ArrayList<OmpClause> executableClauses = new ArrayList<>();
./imop/lib/cfg/CFGGenerator.java:			ArrayList<Statement> caseStmts = n.getInfo().getCaseDefaultLabelStatementList(); // Old: Misc.getCaseStatements(n); 
./imop/lib/builder/DeclarationStringFromDeclarationGetter.java:import java.util.ArrayList;
./imop/lib/builder/Builder.java:import java.util.ArrayList;
./imop/lib/builder/Builder.java:					ArrayList<String> newLabels = new ArrayList<>();
./imop/lib/builder/Copier.java:import java.util.ArrayList;
./imop/lib/builder/Copier.java:			ArrayList<Node> nodesCopy = new ArrayList<>();
./imop/lib/builder/Copier.java:			ArrayList<Node> nodesCopy = new ArrayList<>();
./imop/lib/builder/Copier.java:			ArrayList<Node> nodesCopy = new ArrayList<>();
./imop/lib/builder/Copier.java:			ArrayList<SimplePrimaryExpression> argumentList = new ArrayList<>(oldNode.getArgumentList());
./imop/lib/builder/DeclarationStringFromParameterGetter.java:import java.util.ArrayList;
./imop/lib/transform/percolate/RegionMerger.java:import java.util.ArrayList;
./imop/lib/transform/percolate/RegionMerger.java:		ArrayList<Node> elements = scope.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/percolate/DriverModule.java:import java.util.ArrayList;
./imop/lib/transform/percolate/DriverModule.java:		ArrayList<Phase> entryPhases = new ArrayList<>();
./imop/lib/transform/percolate/DriverModule.java:		ArrayList<Phase> lastPhases = new ArrayList<>();
./imop/lib/transform/percolate/DriverModule.java:		ArrayList<Phase> phaseList = new ArrayList<>();
./imop/lib/transform/percolate/DriverModule.java:		phaseList.addAll((ArrayList<Phase>) CollectorVisitor.collectNodeListInGenericGraph(entryPhases, lastPhases,
./imop/lib/transform/percolate/DriverModule.java:					ArrayList<Phase> nextPhaseList = new ArrayList<>();
./imop/lib/transform/percolate/DriverModule.java:			ArrayList<Node> elementList = compStmt.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/percolate/UpwardPercolater.java:import java.util.ArrayList;
./imop/lib/transform/percolate/UpwardPercolater.java:			for (Phase phase : new ArrayList<>(parConsInfo.getAllPhaseList())) {
./imop/lib/transform/percolate/UpwardPercolater.java:		ArrayList<Node> predList = movee.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:import java.util.ArrayList;
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			CellMap<ArrayList<Node>> freeInstMap = new CellMap<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			//			ArrayList<Cell> deterministic = new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:				ArrayList<Node> freeInstructionNodes = freeInstMap.get(cell);
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:				ArrayList<Node> orderedNodes = LoopInstructionsRescheduler.obtainOrderedNodes(freeInstructionNodes,
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:	private static ArrayList<Node> obtainOrderedNodes(ArrayList<Node> freeInstructionNodes, WhileStatement whileStmt,
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> orderedFreeNodes = new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:	private static ArrayList<Node> getFreeInstructionsInIteration(IterationStatement itStmt, Cell cell,
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> instructionNodes = new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> constrainedNodes = new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> loopElements = loopBody.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			ArrayList<Node> thisPhaseNodeList;
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:				thisPhaseNodeList = new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:				ArrayList<Node> compList = barrCompStmt.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:					thisPhaseNodeList = new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:					ArrayList<Node> compList = barrCompStmt.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			return new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:	private static void processPhaseNodeList(ArrayList<Node> thisPhaseNodeList, ArrayList<Node> instructionNodes,
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			ArrayList<Node> constrainedNodes, Cell cell, CellSet multiAccessedCells) {
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> thisInstructionNodes = new ArrayList<>();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:	private static boolean testFrontReachability(ArrayList<Node> nodeList, Node inst, Cell cell,
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:	private static boolean testBackReachability(ArrayList<Node> nodeList, Node inst, Cell cell,
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> elemList = compStmtCFGInfo.getElementList();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			ArrayList<UpdateSideEffects> sideEffects = compStmtCFGInfo.removeElement(element);
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> whileBodyElements = whileBodyInfo.getElementList();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<UpdateSideEffects> sideEffects = whileBodyInfo.removeElement(barrier);
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<UpdateSideEffects> sideEffects = NodeReplacer.replaceNodes(element, tempStmt);
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			ArrayList<UpdateSideEffects> sideEffects = compStmtCFGInfo.removeElement(elementToBeMoved);
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> elemList = compStmtCFGInfo.getElementList();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			ArrayList<UpdateSideEffects> sideEffects = compStmtCFGInfo.removeElement(element);
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:		ArrayList<Node> elemList = compStmtCFGInfo.getElementList();
./imop/lib/transform/percolate/LoopInstructionsRescheduler.java:			ArrayList<UpdateSideEffects> sideEffects = compStmtCFGInfo.removeElement(element);
./imop/lib/transform/updater/InsertImmediatePredecessor.java:import java.util.ArrayList;
./imop/lib/transform/updater/InsertImmediatePredecessor.java:	public static ArrayList<UpdateSideEffects> insertSimple(Node baseNode, Node targetNode) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:	public static ArrayList<UpdateSideEffects> insertAggressive(Node baseNode, Node targetNode) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		ArrayList<Node> basePredecessors = baseNode.getInfo().getCFGInfo().getPredecessors();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> unrollTargets = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			basePredecessors = new ArrayList<>(baseNode.getInfo().getCFGInfo().getPredecessors());
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionParameterLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> endPredList = endNode.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelClauseLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForInitLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForTermLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForStepLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> leafPredList = link.childNode.getInfo().getCFGInfo().getLeafPredecessors();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsSectionBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SingleEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskClauseLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(MasterEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicStatementLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundElementLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> elementList = compStmt.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:				ArrayList<Label> baseLabels = new ArrayList<>(baseStmt.getInfo().getLabelAnnotations());
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfPredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfThenBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfElseBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchPredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			//			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			//			ArrayList<Node> endPreds = switchEnd.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhilePredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> leafPredList = link.childNode.getInfo().getCFGInfo().getLeafPredecessors();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			//			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhileEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoPredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> leafPredList = link.childNode.getInfo().getCFGInfo().getLeafPredecessors();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForInitLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForTermLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> unrollTargets = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:				ArrayList<Node> stepPreds = stepExpression.getInfo().getCFGInfo().getLeafPredecessors();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> termPreds = link.childNode.getInfo().getCFGInfo().getLeafPredecessors();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForStepLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> leafPredList = link.childNode.getInfo().getCFGInfo().getLeafPredecessors();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallPreLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallPostLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:	private static class SimpleInsertImmediatePredecessor extends GJNoArguCFGLinkVisitor<ArrayList<UpdateSideEffects>> {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Label> labelCopy = new ArrayList<>(baseNode.getInfo().getLabelAnnotations());
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionParameterLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<ParameterDeclaration> paramList = functionDef.getInfo().getCFGInfo()
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> endPredList = endNode.getInfo().getCFGInfo().getPredBlocks();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelClauseLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForInitLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForTermLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForStepLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsSectionBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SingleEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskClauseLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(TaskEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(MasterEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicStatementLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundElementLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<Node> elementList = compStmt.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfPredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfThenBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfElseBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(IfEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchPredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhilePredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(WhileEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoPredicateLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(DoEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForInitLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForTermLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForStepLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForBodyLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(ForEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallBeginLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallPreLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallPostLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediatePredecessor.java:		public ArrayList<UpdateSideEffects> visit(CallEndLink link) {
./imop/lib/transform/updater/InsertImmediatePredecessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:import java.util.ArrayList;
./imop/lib/transform/updater/InsertOnTheEdge.java:	public static ArrayList<UpdateSideEffects> insertAggressive(Node sourceNode, Node destinationNode,
./imop/lib/transform/updater/InsertOnTheEdge.java:	private static ArrayList<UpdateSideEffects> tryImmediates(Node sourceNode, Node destinationNode, Node targetNode,
./imop/lib/transform/updater/InsertOnTheEdge.java:		ArrayList<Node> sourceSuccessors = sourceNode.getInfo().getCFGInfo().getSuccessors();
./imop/lib/transform/updater/InsertOnTheEdge.java:		ArrayList<Node> destinationPredecessors = destinationNode.getInfo().getCFGInfo().getPredecessors();
./imop/lib/transform/updater/InsertOnTheEdge.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:						ArrayList<Node> nodeChain = requestedPivot.getInfo().getNonLeafNestingPathExclusive();
./imop/lib/transform/updater/InsertOnTheEdge.java:						ArrayList<Node> nodeChain = chosenPivot.getInfo().getNonLeafNestingPathExclusive();
./imop/lib/transform/updater/InsertOnTheEdge.java:						ArrayList<Node> nodeChain = chosenPivot.getInfo().getNonLeafNestingPathExclusive();
./imop/lib/transform/updater/InsertOnTheEdge.java:	public static ArrayList<UpdateSideEffects> insertAggressive(Node sourceNode, Node destinationNode, Node targetNode,
./imop/lib/transform/updater/InsertOnTheEdge.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:		ArrayList<Node> sourceSuccessors = sourceNode.getInfo().getCFGInfo().getSuccessors();
./imop/lib/transform/updater/InsertOnTheEdge.java:		ArrayList<Node> destinationPredecessors = destinationNode.getInfo().getCFGInfo().getPredecessors();
./imop/lib/transform/updater/InsertOnTheEdge.java:	private static class AggressiveInsertOnTheEdge extends GJNoArguCFGLinkVisitor<ArrayList<UpdateSideEffects>> {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(FunctionBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(FunctionParameterLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(FunctionBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(FunctionEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ParallelBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ParallelClauseLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ParallelBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ParallelEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OmpForBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OmpForInitLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OmpForTermLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OmpForStepLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OmpForBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OmpForEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SectionsBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SectionsSectionBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SectionsEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SingleBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SingleBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SingleEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(TaskBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(TaskClauseLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(TaskBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(TaskEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(MasterBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(MasterBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(MasterEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CriticalBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CriticalBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CriticalEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(AtomicBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(AtomicStatementLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(AtomicEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OrderedBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OrderedBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(OrderedEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CompoundBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CompoundElementLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CompoundEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(IfBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(IfPredicateLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:				ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(IfThenBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(IfElseBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(IfEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SwitchBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SwitchPredicateLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SwitchBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(SwitchEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(WhileBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(WhilePredicateLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:				ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(WhileBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(WhileEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(DoBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(DoPredicateLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(DoBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(DoEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ForBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ForInitLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ForTermLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ForStepLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ForBodyLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(ForEndLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CallBeginLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CallPreLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CallPostLink link) {
./imop/lib/transform/updater/InsertOnTheEdge.java:		public ArrayList<UpdateSideEffects> visit(CallEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:import java.util.ArrayList;
./imop/lib/transform/updater/NodeRemover.java:	public static ArrayList<UpdateSideEffects> removeNode(Node node) {
./imop/lib/transform/updater/NodeRemover.java:	public static ArrayList<UpdateSideEffects> removeNode(Node node, LabelShiftingMode labelShiftingMode) {
./imop/lib/transform/updater/NodeRemover.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:	public static class AggressiveNodeRemovingVisitor extends GJNoArguCFGLinkVisitor<ArrayList<UpdateSideEffects>> {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(FunctionBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(FunctionParameterLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(FunctionBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(FunctionEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ParallelBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ParallelClauseLink link) {
./imop/lib/transform/updater/NodeRemover.java:			return new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ParallelBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ParallelEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OmpForBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OmpForInitLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OmpForTermLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OmpForStepLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OmpForBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OmpForEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SectionsBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SectionsSectionBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			return new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SectionsEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SingleBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SingleBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SingleEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(TaskBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(TaskClauseLink link) {
./imop/lib/transform/updater/NodeRemover.java:			return new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(TaskBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(TaskEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(MasterBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(MasterBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(MasterEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CriticalBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CriticalBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CriticalEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(AtomicBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(AtomicStatementLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(AtomicEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OrderedBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OrderedBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(OrderedEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CompoundBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CompoundElementLink link) {
./imop/lib/transform/updater/NodeRemover.java:				ArrayList<Label> labels = new ArrayList<>(stmt.getInfo().getLabelAnnotations());
./imop/lib/transform/updater/NodeRemover.java:				ArrayList<Node> elementList = link.enclosingNonLeafNode.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CompoundEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(IfBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(IfPredicateLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(IfThenBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(IfElseBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(IfEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SwitchBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SwitchPredicateLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SwitchBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(SwitchEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(WhileBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(WhilePredicateLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(WhileBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(WhileEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(DoBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(DoPredicateLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(DoBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(DoEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ForBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ForInitLink link) {
./imop/lib/transform/updater/NodeRemover.java:			return new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ForTermLink link) {
./imop/lib/transform/updater/NodeRemover.java:			return new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ForStepLink link) {
./imop/lib/transform/updater/NodeRemover.java:			return new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ForBodyLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(ForEndLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CallBeginLink link) {
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CallPreLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CallPostLink link) {
./imop/lib/transform/updater/NodeRemover.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeRemover.java:		public ArrayList<UpdateSideEffects> visit(CallEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:import java.util.ArrayList;
./imop/lib/transform/updater/InsertImmediateSuccessor.java:	public static ArrayList<UpdateSideEffects> insertSimple(Node baseNode, Node targetNode) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:	public static ArrayList<UpdateSideEffects> insertAggressive(Node baseNode, Node targetNode) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		ArrayList<Node> baseSuccessors = baseNode.getInfo().getCFGInfo().getSuccessors();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<Node> unrollTargets = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			baseSuccessors = new ArrayList<>(baseNode.getInfo().getCFGInfo().getSuccessors());
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionParameterLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<ParameterDeclaration> paramList = parentFunc.getInfo().getCFGInfo().getParameterDeclarationList();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelClauseLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<OmpClause> clauses = parConsInfo.getCFGClauseList();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForInitLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForTermLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForStepLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<Node> succList = sectionBegin.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsSectionBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SingleEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskClauseLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<OmpClause> clauseList = taskConsInfo.getClauseList();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(MasterEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicStatementLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundElementLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfPredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<Node> predSuccessors = link.childNode.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfThenBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfElseBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchPredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:				ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhilePredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhileEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoPredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<Node> predicatePredList = link.childNode.getInfo().getCFGInfo().getLeafPredecessors();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			//			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForInitLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForTermLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<Node> termSuccessors = link.childNode.getInfo().getCFGInfo().getSuccBlocks();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForStepLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<Node> predList = new ArrayList<>(link.childNode.getInfo().getCFGInfo().getLeafPredecessors());
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallPreLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallPostLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:	private static class SimpleInsertImmediateSuccessor extends GJNoArguCFGLinkVisitor<ArrayList<UpdateSideEffects>> {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionParameterLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(FunctionEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelClauseLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ParallelEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForInitLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForTermLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForStepLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OmpForEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsSectionBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SectionsEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SingleBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SingleEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskClauseLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(TaskEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(MasterBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(MasterEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CriticalEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicStatementLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(AtomicEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(OrderedEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundElementLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CompoundEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfPredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfThenBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfElseBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(IfEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchPredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(SwitchEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhilePredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhileBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(WhileEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoPredicateLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(DoEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForInitLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForTermLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForStepLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForBodyLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ForEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallBeginLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallPreLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallPostLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(CallEndLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(GotoLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(BreakLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ContinueLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/InsertImmediateSuccessor.java:		public ArrayList<UpdateSideEffects> visit(ReturnLink link) {
./imop/lib/transform/updater/InsertImmediateSuccessor.java:			ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/updater/NodeReplacer.java:import java.util.ArrayList;
./imop/lib/transform/updater/NodeReplacer.java:	public static ArrayList<UpdateSideEffects> replaceNodes(Node oldNode, Node newNode) {
./imop/lib/transform/updater/NodeReplacer.java:		ArrayList<UpdateSideEffects> sideEffects = new ArrayList<>();
./imop/lib/transform/updater/NodeReplacer.java:			ArrayList<UpdateSideEffects> sideEffects = compStmtCFGInfo.removeElement(link.childNode);
./imop/lib/transform/BarrierCounterInstrumentation.java:import java.util.ArrayList;
./imop/lib/transform/simplify/CompoundStatementEnforcer.java:import java.util.ArrayList;
./imop/lib/transform/simplify/CompoundStatementEnforcer.java:	//			//			ArrayList<Node> compoundStatementElement = new ArrayList<>();
./imop/lib/transform/simplify/CompoundStatementEnforcer.java:		ArrayList<Statement> sectionList = sectionsConsInfo.getSectionList();
./imop/lib/transform/simplify/DeclarationEscalator.java:import java.util.ArrayList;
./imop/lib/transform/simplify/DeclarationEscalator.java:			ArrayList<Node> elementList = compInfo.getElementList();
./imop/lib/transform/simplify/DeclarationEscalator.java:			ArrayList<Node> topLevelDeclList = elementList.stream().filter(d -> d instanceof Declaration)
./imop/lib/transform/simplify/DeclarationEscalator.java:					.collect(Collectors.toCollection(ArrayList::new));
./imop/lib/transform/simplify/DeclarationEscalator.java:			ArrayList<Node> disallowedDeclList = new ArrayList<>();
./imop/lib/transform/simplify/DeclarationEscalator.java:			ArrayList<Node> enclosingList = enclosingCS.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/DeclarationEscalator.java:					ArrayList<UpdateSideEffects> sideEffects = InsertImmediateSuccessor.insertAggressive(decl, assignStmt);
./imop/lib/transform/simplify/DeclarationEscalator.java:				ArrayList<UpdateSideEffects> sideEffects = InsertImmediatePredecessor.insertAggressive(whileStmt, newDecl);
./imop/lib/transform/simplify/RedundantSynchronizationRemoval.java:import java.util.ArrayList;
./imop/lib/transform/simplify/RedundantSynchronizationRemoval.java:		ArrayList<BeginPhasePoint> belowBPP = phBelow.getBeginPointsCopy();
./imop/lib/transform/simplify/CompoundStatementNormalizer.java:import java.util.ArrayList;
./imop/lib/transform/simplify/CompoundStatementNormalizer.java:		ArrayList<Node> elementList = outerCFGInfo.getElementList();
./imop/lib/transform/simplify/CompoundStatementNormalizer.java:							ArrayList<Label> outerLabelListCopy = new ArrayList<>(
./imop/lib/transform/simplify/CompoundStatementNormalizer.java:						ArrayList<UpdateSideEffects> sideEffectsOuterCS = outerCFGInfo.addElement(pos++, internalElem);
./imop/lib/transform/simplify/CompoundStatementNormalizer.java:		//		ArrayList<CompoundStatementElement> newList = new ArrayList<>();
./imop/lib/transform/simplify/CompoundStatementNormalizer.java:		//		ArrayList<Node> nodeList = new ArrayList<>();
./imop/lib/transform/simplify/ExpressionSimplifier.java:import java.util.ArrayList;
./imop/lib/transform/simplify/ExpressionSimplifier.java:		public ArrayList<Declaration> getTemporaryDeclarations() {
./imop/lib/transform/simplify/ExpressionSimplifier.java:				temporaryDeclarations = new ArrayList<>();
./imop/lib/transform/simplify/ExpressionSimplifier.java:		public void setTemporaryDeclarations(ArrayList<Declaration> temporaryDeclarations) {
./imop/lib/transform/simplify/ExpressionSimplifier.java:		private ArrayList<Declaration> temporaryDeclarations;
./imop/lib/transform/simplify/ExpressionSimplifier.java:		ArrayList<OmpClause> clauseList = Misc.getClauseList(n);
./imop/lib/transform/simplify/ExpressionSimplifier.java:		ArrayList<AssignmentExpression> reverseList = new ArrayList<>();
./imop/lib/transform/simplify/ParallelConstructExpander.java:import java.util.ArrayList;
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<ParallelConstruct> parConsList = Misc.getExactPostOrderEnclosee(node, ParallelConstruct.class);
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<Node> elemList = scope.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<OmpClause> clauseList = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<OmpClause> clauseList = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<Node> elemList = scope.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:				ArrayList<String> idList = Misc.getIdNameList(decl);
./imop/lib/transform/simplify/ParallelConstructExpander.java:				ArrayList<OmpClause> clauseListCopy = new ArrayList<>(clauseList);
./imop/lib/transform/simplify/ParallelConstructExpander.java:							ArrayList<Node> elseElements = elseBody.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:						ArrayList<Node> thenElements = thenBody.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		//		ArrayList<Node> elementList = scope.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<Node> elementList = body.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<OmpClause> clauseList = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<Node> elementList = scope.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<String> paramNames = new ArrayList<>();
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<SimplePrimaryExpression> speList = callStmt.getInfo().getArgumentList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<OmpClause> newClauses = new ArrayList<>();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<Node> elementList = scope.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<OmpClause> newClauses = new ArrayList<>();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<Node> elementList = funcBody.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<OmpClause> clauseList = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<OmpClause> clauseList = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<Node> elementList = itBody.getInfo().getCFGInfo().getElementList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:			ArrayList<OmpClause> clauseList = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<OmpClause> clauseList = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<OmpClause> thisClauses = parCons.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<OmpClause> nextClauses = nextPar.getInfo().getOmpClauseList();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<String> thisSharedIDs = new ArrayList<>();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<String> thisPrivateIDs = new ArrayList<>();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<String> nextSharedIDs = new ArrayList<>();
./imop/lib/transform/simplify/ParallelConstructExpander.java:		ArrayList<String> nextPrivateIDs = new ArrayList<>();
./imop/lib/transform/simplify/ImplicitBarrierRemover.java:import java.util.ArrayList;
./imop/lib/transform/BasicTransform.java:import java.util.ArrayList;
./imop/lib/transform/BasicTransform.java:				ArrayList<String> idNames = Misc.getIdNameList(decl);
./imop/lib/transform/BasicTransform.java:			ArrayList<SimplePrimaryExpression> newSPEList = new ArrayList<>();
./imop/lib/transform/BasicTransform.java:			ArrayList<SimplePrimaryExpression> newSPEList = new ArrayList<>();
./imop/lib/transform/BasicTransform.java:	public static ArrayList<UpdateSideEffects> pushDeclarationUp(Declaration decl) {
./imop/lib/transform/BasicTransform.java:		ArrayList<UpdateSideEffects> sideEffects = new ArrayList<>();
./imop/lib/transform/BasicTransform.java:		ArrayList<Node> elementList = scopeInfo.getElementList();
./imop/lib/transform/BasicTransform.java:	public static ArrayList<UpdateSideEffects> simplifyPredicate(IterationStatement itStmt) {
./imop/lib/transform/BasicTransform.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/lib/transform/CopyEliminator.java:import java.util.ArrayList;
./imop/lib/transform/CopyEliminator.java:				ArrayList<UpdateSideEffects> sideEffects = NodeRemover.removeNode(leafNode);
./imop/ast/annotation/IncompleteSemantics.java:import java.util.ArrayList;
./imop/ast/annotation/IncompleteSemantics.java:					ArrayList<Node> predecessorList = internalStmt.getInfo().getCFGInfo().getPredBlocks();
./imop/ast/annotation/IncompleteSemantics.java:					ArrayList<Node> predecessorList = internalStmt.getInfo().getCFGInfo().getPredBlocks();
./imop/ast/annotation/IncompleteSemantics.java:		//						ArrayList<Node> predecessorList = internalStmt.getInfo().getCFGInfo().getPredBlocks();
./imop/ast/annotation/IncompleteSemantics.java:		//						ArrayList<Node> predecessorList = internalStmt.getInfo().getCFGInfo().getPredBlocks();
./imop/ast/info/RootInfo.java:import java.util.ArrayList;
./imop/ast/info/RootInfo.java:	private ArrayList<FunctionDefinition> allFunctionDefinitions;
./imop/ast/info/RootInfo.java:	public ArrayList<FunctionDefinition> getAllFunctionDefinitions() {
./imop/ast/info/RootInfo.java:					ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/RootInfo.java:		ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/RootInfo.java:		ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/RootInfo.java:		//		ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/InitRunInParallel.java:import java.util.ArrayList;
./imop/ast/info/StatementInfo.java:import java.util.ArrayList;
./imop/ast/info/StatementInfo.java:	private ArrayList<Label> annotatedLabels = new ArrayList<>();
./imop/ast/info/StatementInfo.java:		for (Label label : new ArrayList<>(this.annotatedLabels)) {
./imop/ast/info/StatementInfo.java:			ArrayList<Node> predList = this.getNode().getInfo().getCFGInfo().getPredBlocks();
./imop/ast/info/StatementInfo.java:		//			ArrayList<Label> existingLabels = tempStmt.getInfo().getLabelAnnotations();
./imop/ast/info/StatementInfo.java:	 * Obtain an ArrayList of all the labels that may be annotated to the owner
./imop/ast/info/OmpConstructInfo.java:import java.util.ArrayList;
./imop/ast/info/OmpConstructInfo.java:	public ArrayList<OmpClause> getOmpClauseList() {
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:			ArrayList<Label> labelsCopy = new ArrayList<>(internalStmt.getInfo().getLabelAnnotations());
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<Node> elements = this.getCFGInfo().getElementList();
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<Node> elements = this.getCFGInfo().getElementList();
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<Node> elements = this.getCFGInfo().getElementList();
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<Node> elements = this.getCFGInfo().getElementList();
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/CompoundStatementInfo.java:		ArrayList<String> declaratorNameList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/CallStatementInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/CallStatementInfo.java:	ArrayList<FunctionDefinition> calledDefinitions = null;
./imop/ast/info/cfgNodeInfo/CallStatementInfo.java:	public ArrayList<FunctionDefinition> getCalledDefinitions() {
./imop/ast/info/cfgNodeInfo/CallStatementInfo.java:			this.calledDefinitions = new ArrayList<>();
./imop/ast/info/cfgNodeInfo/CallStatementInfo.java:	public ArrayList<SimplePrimaryExpression> getArgumentList() {
./imop/ast/info/cfgNodeInfo/CallStatementInfo.java:		return new ArrayList<>(((CallStatement) this.getNode()).getPreCallNode().getArgumentList());
./imop/ast/info/cfgNodeInfo/DeclarationInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/DeclarationInfo.java:		ArrayList<String> idList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/DeclarationInfo.java:		ArrayList<String> idList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/DeclarationInfo.java:		ArrayList<String> idNames = Misc.getIdNameList(decl);
./imop/ast/info/cfgNodeInfo/DeclarationInfo.java:		ArrayList<String> idList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/DeclarationInfo.java:		ArrayList<String> idList = Misc.getIdNameList(declaration);
./imop/ast/info/cfgNodeInfo/DummyFlushDirectiveInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/DummyFlushDirectiveInfo.java:	public ArrayList<InterTaskEdge> getInterTaskEdgeList() {
./imop/ast/info/cfgNodeInfo/DummyFlushDirectiveInfo.java:		ArrayList<InterTaskEdge> taskEdgeList = new ArrayList<>(this.getIncomingInterTaskEdges());
./imop/ast/info/cfgNodeInfo/FunctionDefinitionInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/FunctionDefinitionInfo.java:		ArrayList<ParameterDeclaration> paramDeclList = this.getCFGInfo().getParameterDeclarationList();
./imop/ast/info/cfgNodeInfo/ParallelConstructInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/ParallelConstructInfo.java:	private ArrayList<Phase> allPhaseList = new ArrayList<>();
./imop/ast/info/cfgNodeInfo/ParallelConstructInfo.java:	public ArrayList<Phase> getAllPhaseList() {
./imop/ast/info/cfgNodeInfo/ParallelConstructInfo.java:	public void setAllPhaseList(ArrayList<Phase> allPhaseList) {
./imop/ast/info/cfgNodeInfo/ParallelConstructInfo.java:		ArrayList<OmpClause> clauseList = this.getOmpClauseList();
./imop/ast/info/cfgNodeInfo/ParallelConstructInfo.java:		ArrayList<OmpClause> clauseList = this.getOmpClauseList();
./imop/ast/info/cfgNodeInfo/ParallelConstructInfo.java:			ArrayList<Node> tempList = Misc.getInheritedEncloseeList(aupdc, OmpClause.class);
./imop/ast/info/cfgNodeInfo/WhileStatementInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/WhileStatementInfo.java:	public ArrayList<UpdateSideEffects> changePredicateToConstantTrue() {
./imop/ast/info/cfgNodeInfo/WhileStatementInfo.java:		ArrayList<UpdateSideEffects> sideEffectList = new ArrayList<>();
./imop/ast/info/cfgNodeInfo/SwitchStatementInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/SwitchStatementInfo.java:	public ArrayList<Label> getCaseDefaultLabels() {
./imop/ast/info/cfgNodeInfo/SwitchStatementInfo.java:		ArrayList<Label> enclosedLabels = new ArrayList<>();
./imop/ast/info/cfgNodeInfo/SwitchStatementInfo.java:	public ArrayList<Statement> getCaseDefaultLabelStatementList() {
./imop/ast/info/cfgNodeInfo/SwitchStatementInfo.java:		ArrayList<Statement> enclosedCaseStatements = new ArrayList<>();
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:		ArrayList<Node> elemList = compStmtCFGInfo.getElementList();
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:			ArrayList<UpdateSideEffects> sideEffects = compStmtCFGInfo.removeElement(element);
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:		ArrayList<Node> elementList = compInfo.getElementList();
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:			ArrayList<UpdateSideEffects> sideEffects = InsertImmediateSuccessor.insertAggressive(ifPredicate,
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:			ArrayList<UpdateSideEffects> sideEffects = InsertImmediatePredecessor.insertAggressive(predicate,
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:		ArrayList<Node> elemList = compStmtCFGInfo.getElementList();
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:			ArrayList<UpdateSideEffects> sideEffects = compStmtCFGInfo.removeElement(element);
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:	public static boolean checkPotentialToCrossUpwards(ArrayList<Node> elemList, int indexOfBarrier,
./imop/ast/info/cfgNodeInfo/BarrierDirectiveInfo.java:	public static boolean checkPotentialToCrossDownwards(ArrayList<Node> elemList, int movingPointer,
./imop/ast/info/cfgNodeInfo/ExpressionStatementInfo.java:import java.util.ArrayList;
./imop/ast/info/cfgNodeInfo/ExpressionStatementInfo.java:		ArrayList<Assignment> list = AssignmentGetter.getLexicalAssignments(this.getNode());
./imop/ast/info/NodeInfo.java:import java.util.ArrayList;
./imop/ast/info/NodeInfo.java:	//	private ArrayList<InterTaskEdge> interTaskEdgeList; // Not needed, since we will be creating such edges only between dummy-flush directives.
./imop/ast/info/NodeInfo.java:	private ArrayList<ParallelConstruct> regionInfo;
./imop/ast/info/NodeInfo.java:	private ArrayList<CallStatement> callStatements = null;
./imop/ast/info/NodeInfo.java:	private ArrayList<String> comments;
./imop/ast/info/NodeInfo.java:	private ArrayList<PragmaImop> pragmaAnnotations;
./imop/ast/info/NodeInfo.java:	public ArrayList<ParallelConstruct> getRegionInfo() {
./imop/ast/info/NodeInfo.java:			regionInfo = new ArrayList<>();
./imop/ast/info/NodeInfo.java:	public ArrayList<ParallelConstruct> readRegionInfo() {
./imop/ast/info/NodeInfo.java:					ArrayList<OmpClause> ompClauseList = ((OmpConstructInfo) encloser.getInfo()).getOmpClauseList();
./imop/ast/info/NodeInfo.java:	public ArrayList<CallStatement> getLexicallyEnclosedCallStatements() {
./imop/ast/info/NodeInfo.java:				callStatements = new ArrayList<>();
./imop/ast/info/NodeInfo.java:			ArrayList<CallStatement> nonCachedCalls = new ArrayList<>();
./imop/ast/info/NodeInfo.java:			ArrayList<CallStatement> nonCachedCalls = new ArrayList<>();
./imop/ast/info/NodeInfo.java:		ArrayList<Node> outerList = ((ArrayList<Node>) CollectorVisitor.collectNodeListInGenericGraph(this.node, null,
./imop/ast/info/NodeInfo.java:					ArrayList<Node> neighbourSet = new ArrayList<>();
./imop/ast/info/NodeInfo.java:		ArrayList<Node> nonLeafEnclosingPathExclusive = this.node.getInfo().getNonLeafNestingPathExclusive();
./imop/ast/info/NodeInfo.java:		ArrayList<Node> nonLeafEnclosingPathExclusive = this.node.getInfo().getNonLeafNestingPathExclusive();
./imop/ast/info/NodeInfo.java:		nonLeafEnclosingPathExclusive = (ArrayList<Node>) Misc.reverseList(nonLeafEnclosingPathExclusive);
./imop/ast/info/NodeInfo.java:	public ArrayList<Node> getNonLeafNestingPathExclusive() {
./imop/ast/info/NodeInfo.java:		ArrayList<Node> nonLeafEnclosingPathExclusive = new ArrayList<>();
./imop/ast/info/NodeInfo.java:		nonLeafEnclosingPathExclusive = (ArrayList<Node>) CollectorVisitor.collectNodeListInGenericGraph(this.node,
./imop/ast/info/NodeInfo.java:					ArrayList<Node> neighbourSet = new ArrayList<>();
./imop/ast/info/NodeInfo.java:	public String getString(ArrayList<Commentor> commentorList) {
./imop/ast/info/NodeInfo.java:		//		ArrayList<Commentor> commentors = new ArrayList<>();
./imop/ast/info/NodeInfo.java:		return this.getString(new ArrayList<>());
./imop/ast/info/NodeInfo.java:	public ArrayList<PragmaImop> getPragmaAnnotations() {
./imop/ast/info/NodeInfo.java:			this.pragmaAnnotations = new ArrayList<>();
./imop/ast/info/NodeInfo.java:	public ArrayList<Assignment> getLexicalAssignments() {
./imop/ast/info/NodeInfo.java:	public ArrayList<Assignment> getInterProceduralAssignments() {
./imop/ast/info/NodeInfo.java:	public ArrayList<String> getComments() {
./imop/ast/info/NodeInfo.java:			comments = new ArrayList<>();
./imop/ast/info/NodeInfo.java:	private ArrayList<OldLock> lockSet;
./imop/ast/info/NodeInfo.java:	public ArrayList<OldLock> getLockSet() {
./imop/ast/info/NodeInfo.java:		lockSet = new ArrayList<>();
./imop/ast/info/NodeInfo.java:	public ArrayList<Definition> deprecated_getDefinitionList() {
./imop/ast/info/NodeInfo.java:	private ArrayList<CallSite> calledFunctions_old = null;
./imop/ast/info/NodeInfo.java:	public ArrayList<CallSite> getCallSites() {
./imop/ast/node/internal/CallStatement.java:import java.util.ArrayList;
./imop/ast/node/internal/CallStatement.java:			phantomCall = new CallStatement(null, new PreCallNode(new ArrayList<>()), new PostCallNode());
./imop/ast/node/internal/CallStatement.java:			ArrayList<SimplePrimaryExpression> argumentList = this.preCallNode.getArgumentList();
./imop/ast/node/internal/PreCallNode.java:import java.util.ArrayList;
./imop/ast/node/internal/PreCallNode.java:	private final ArrayList<SimplePrimaryExpression> argumentList;
./imop/ast/node/internal/PreCallNode.java:	public PreCallNode(ArrayList<SimplePrimaryExpression> argumentList) {
./imop/ast/node/internal/PreCallNode.java:	public ArrayList<SimplePrimaryExpression> getArgumentList() {
./imop/ast/node/internal/DummyFlushDirective.java:import java.util.ArrayList;
./imop/ast/node/internal/DummyFlushDirective.java:	private ArrayList<String> idSet;
./imop/ast/node/internal/DummyFlushDirective.java:	public DummyFlushDirective(DummyFlushType dummyFlushType, ArrayList<String> idList) {
./imop/ast/node/internal/DummyFlushDirective.java:	ArrayList<String> getIdList() {
./imop/ast/node/internal/DummyFlushDirective.java:	void setIdList(ArrayList<String> idList) {
./imop/ast/node/external/Node.java:import java.util.ArrayList;
./imop/ast/node/external/Node.java:	private static ArrayList<Node> allLeafCFGNodes = new ArrayList<>();
./imop/ast/node/external/TaskConstruct.java:import java.util.ArrayList;
./imop/ast/node/external/TaskConstruct.java:	public void setOmpClauseList(ArrayList<OmpClause> ompClauseList) {
./imop/ast/node/external/NodeList.java:import java.util.ArrayList;
./imop/ast/node/external/NodeList.java:	private ArrayList<Node> nodes;
./imop/ast/node/external/NodeList.java:		setNodes(new ArrayList<>());
./imop/ast/node/external/NodeList.java:		setNodes(new ArrayList<>());
./imop/ast/node/external/NodeList.java:	public NodeList(ArrayList<Node> nodes) {
./imop/ast/node/external/NodeList.java:		this.setNodes(new ArrayList<>(nodes));
./imop/ast/node/external/NodeList.java:	public ArrayList<Node> elements() {
./imop/ast/node/external/NodeList.java:	public void setNodes(ArrayList<Node> nodes) {
./imop/ast/node/external/NodeListClass.java:import java.util.ArrayList;
./imop/ast/node/external/NodeListClass.java:	public abstract ArrayList<Node> elements();
./imop/ast/node/external/NodeListOptional.java:import java.util.ArrayList;
./imop/ast/node/external/NodeListOptional.java:	private ArrayList<Node> nodes;
./imop/ast/node/external/NodeListOptional.java:		setNodes(new ArrayList<>());
./imop/ast/node/external/NodeListOptional.java:		setNodes(new ArrayList<>());
./imop/ast/node/external/NodeListOptional.java:	public NodeListOptional(ArrayList<Node> nodes) {
./imop/ast/node/external/NodeListOptional.java:		this.setNodes(new ArrayList<>(nodes));
./imop/ast/node/external/NodeListOptional.java:	public ArrayList<Node> elements() {
./imop/ast/node/external/NodeListOptional.java:	public void setNodes(ArrayList<Node> nodes) {
./imop/ast/node/external/NodeSequence.java:import java.util.ArrayList;
./imop/ast/node/external/NodeSequence.java:	private ArrayList<Node> nodes;
./imop/ast/node/external/NodeSequence.java:		setNodes(new ArrayList<>(n));
./imop/ast/node/external/NodeSequence.java:		setNodes(new ArrayList<>());
./imop/ast/node/external/NodeSequence.java:	public NodeSequence(ArrayList<Node> nodesCopy) {
./imop/ast/node/external/NodeSequence.java:		setNodes(new ArrayList<>(nodesCopy));
./imop/ast/node/external/NodeSequence.java:	public ArrayList<Node> elements() {
./imop/ast/node/external/NodeSequence.java:	public void setNodes(ArrayList<Node> nodes) {
