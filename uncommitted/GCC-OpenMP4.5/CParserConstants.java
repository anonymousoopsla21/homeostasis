/* Generated By:JavaCC: Do not edit this line. CParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 8;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 9;
  /** RegularExpression Id. */
  int HEX_LITERAL = 10;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 11;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 12;
  /** RegularExpression Id. */
  int EXPONENT = 13;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 14;
  /** RegularExpression Id. */
  int STRING_LITERAL = 15;
  /** RegularExpression Id. */
  int _GENERIC = 23;
  /** RegularExpression Id. */
  int STATIC_ASSERT = 24;
  /** RegularExpression Id. */
  int NORETURN = 25;
  /** RegularExpression Id. */
  int ALIGNAS = 26;
  /** RegularExpression Id. */
  int RESTRICT = 27;
  /** RegularExpression Id. */
  int CONTINUE = 28;
  /** RegularExpression Id. */
  int VOLATILE = 29;
  /** RegularExpression Id. */
  int REGISTER = 30;
  /** RegularExpression Id. */
  int CCONST = 31;
  /** RegularExpression Id. */
  int INLINE = 32;
  /** RegularExpression Id. */
  int CINLINED = 33;
  /** RegularExpression Id. */
  int CINLINED2 = 34;
  /** RegularExpression Id. */
  int CSIGNED = 35;
  /** RegularExpression Id. */
  int CSIGNED2 = 36;
  /** RegularExpression Id. */
  int UNSIGNED = 37;
  /** RegularExpression Id. */
  int TYPEDEF = 38;
  /** RegularExpression Id. */
  int DFLT = 39;
  /** RegularExpression Id. */
  int DOUBLE = 40;
  /** RegularExpression Id. */
  int SWITCH = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int EXTERN = 43;
  /** RegularExpression Id. */
  int STRUCT = 44;
  /** RegularExpression Id. */
  int STATIC = 45;
  /** RegularExpression Id. */
  int SIGNED = 46;
  /** RegularExpression Id. */
  int WHILE = 47;
  /** RegularExpression Id. */
  int BREAK = 48;
  /** RegularExpression Id. */
  int UNION = 49;
  /** RegularExpression Id. */
  int CONST = 50;
  /** RegularExpression Id. */
  int FLOAT = 51;
  /** RegularExpression Id. */
  int SHORT = 52;
  /** RegularExpression Id. */
  int ELSE = 53;
  /** RegularExpression Id. */
  int CASE = 54;
  /** RegularExpression Id. */
  int LONG = 55;
  /** RegularExpression Id. */
  int ENUM = 56;
  /** RegularExpression Id. */
  int AUTO = 57;
  /** RegularExpression Id. */
  int VOID = 58;
  /** RegularExpression Id. */
  int CHAR = 59;
  /** RegularExpression Id. */
  int GOTO = 60;
  /** RegularExpression Id. */
  int FOR = 61;
  /** RegularExpression Id. */
  int INT = 62;
  /** RegularExpression Id. */
  int IF = 63;
  /** RegularExpression Id. */
  int DO = 64;
  /** RegularExpression Id. */
  int SIZEOF = 65;
  /** RegularExpression Id. */
  int ELLIPSIS = 66;
  /** RegularExpression Id. */
  int OP_SLASS = 67;
  /** RegularExpression Id. */
  int OP_SRASS = 68;
  /** RegularExpression Id. */
  int OP_EQ = 69;
  /** RegularExpression Id. */
  int OP_AND = 70;
  /** RegularExpression Id. */
  int OP_OR = 71;
  /** RegularExpression Id. */
  int OP_MULASS = 72;
  /** RegularExpression Id. */
  int OP_DIVASS = 73;
  /** RegularExpression Id. */
  int OP_MODASS = 74;
  /** RegularExpression Id. */
  int OP_ADDASS = 75;
  /** RegularExpression Id. */
  int OP_SUBASS = 76;
  /** RegularExpression Id. */
  int OP_ANDASS = 77;
  /** RegularExpression Id. */
  int OP_XORASS = 78;
  /** RegularExpression Id. */
  int OP_ORASS = 79;
  /** RegularExpression Id. */
  int OP_SL = 80;
  /** RegularExpression Id. */
  int OP_SR = 81;
  /** RegularExpression Id. */
  int OP_NEQ = 82;
  /** RegularExpression Id. */
  int OP_GE = 83;
  /** RegularExpression Id. */
  int OP_LE = 84;
  /** RegularExpression Id. */
  int OP_DEREF = 85;
  /** RegularExpression Id. */
  int OP_INCR = 86;
  /** RegularExpression Id. */
  int OP_DECR = 87;
  /** RegularExpression Id. */
  int OP_GT = 88;
  /** RegularExpression Id. */
  int OP_LT = 89;
  /** RegularExpression Id. */
  int OP_ADD = 90;
  /** RegularExpression Id. */
  int OP_SUB = 91;
  /** RegularExpression Id. */
  int OP_MUL = 92;
  /** RegularExpression Id. */
  int OP_DIV = 93;
  /** RegularExpression Id. */
  int OP_MOD = 94;
  /** RegularExpression Id. */
  int OP_ASS = 95;
  /** RegularExpression Id. */
  int OP_BITAND = 96;
  /** RegularExpression Id. */
  int OP_BITOR = 97;
  /** RegularExpression Id. */
  int OP_BITXOR = 98;
  /** RegularExpression Id. */
  int OP_NOT = 99;
  /** RegularExpression Id. */
  int OP_BITNOT = 100;
  /** RegularExpression Id. */
  int COLON = 101;
  /** RegularExpression Id. */
  int SEMICOLON = 102;
  /** RegularExpression Id. */
  int QUESTION = 103;
  /** RegularExpression Id. */
  int DOT = 104;
  /** RegularExpression Id. */
  int LEFTPAREN = 105;
  /** RegularExpression Id. */
  int RIGHTPAREN = 106;
  /** RegularExpression Id. */
  int LEFTBRACKET = 107;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 108;
  /** RegularExpression Id. */
  int LEFTBRACE = 109;
  /** RegularExpression Id. */
  int RIGHTBRACE = 110;
  /** RegularExpression Id. */
  int COMMA = 111;
  /** RegularExpression Id. */
  int CROSSBAR = 112;
  /** RegularExpression Id. */
  int UNKNOWN_CPP = 113;
  /** RegularExpression Id. */
  int PRAGMA = 114;
  /** RegularExpression Id. */
  int OMP_NL = 135;
  /** RegularExpression Id. */
  int OMP_CR = 136;
  /** RegularExpression Id. */
  int OMP = 141;
  /** RegularExpression Id. */
  int PARALLEL = 143;
  /** RegularExpression Id. */
  int SECTIONS = 144;
  /** RegularExpression Id. */
  int SECTION = 145;
  /** RegularExpression Id. */
  int SINGLE = 146;
  /** RegularExpression Id. */
  int ORDERED = 147;
  /** RegularExpression Id. */
  int MASTER = 148;
  /** RegularExpression Id. */
  int CRITICAL = 149;
  /** RegularExpression Id. */
  int ATOMIC = 150;
  /** RegularExpression Id. */
  int BARRIER = 151;
  /** RegularExpression Id. */
  int FLUSH = 152;
  /** RegularExpression Id. */
  int NOWAIT = 153;
  /** RegularExpression Id. */
  int SCHEDULE = 154;
  /** RegularExpression Id. */
  int DYNAMIC = 155;
  /** RegularExpression Id. */
  int GUIDED = 156;
  /** RegularExpression Id. */
  int RUNTIME = 157;
  /** RegularExpression Id. */
  int NONE = 158;
  /** RegularExpression Id. */
  int REDUCTION = 159;
  /** RegularExpression Id. */
  int PRIVATE = 160;
  /** RegularExpression Id. */
  int FIRSTPRIVATE = 161;
  /** RegularExpression Id. */
  int LASTPRIVATE = 162;
  /** RegularExpression Id. */
  int COPYPRIVATE = 163;
  /** RegularExpression Id. */
  int SHARED = 164;
  /** RegularExpression Id. */
  int COPYIN = 165;
  /** RegularExpression Id. */
  int THREADPRIVATE = 166;
  /** RegularExpression Id. */
  int NUM_THREADS = 167;
  /** RegularExpression Id. */
  int COLLAPSE = 168;
  /** RegularExpression Id. */
  int READ = 169;
  /** RegularExpression Id. */
  int WRITE = 170;
  /** RegularExpression Id. */
  int UPDATE = 171;
  /** RegularExpression Id. */
  int CAPTURE = 172;
  /** RegularExpression Id. */
  int TASK = 173;
  /** RegularExpression Id. */
  int TASKWAIT = 174;
  /** RegularExpression Id. */
  int DECLARE = 175;
  /** RegularExpression Id. */
  int TASKYIELD = 176;
  /** RegularExpression Id. */
  int UNTIED = 177;
  /** RegularExpression Id. */
  int MERGEABLE = 178;
  /** RegularExpression Id. */
  int INITIALIZER = 179;
  /** RegularExpression Id. */
  int FINAL = 180;
  /** RegularExpression Id. */
  int PROC_BIND = 181;
  /** RegularExpression Id. */
  int CLOSE = 182;
  /** RegularExpression Id. */
  int SPREAD = 183;
  /** RegularExpression Id. */
  int LINEAR = 184;
  /** RegularExpression Id. */
  int MONOTONIC = 185;
  /** RegularExpression Id. */
  int NONMONOTONIC = 186;
  /** RegularExpression Id. */
  int SIMD = 187;
  /** RegularExpression Id. */
  int SAFELEN = 188;
  /** RegularExpression Id. */
  int SIMDLEN = 189;
  /** RegularExpression Id. */
  int ALIGNED = 190;
  /** RegularExpression Id. */
  int UNIFORM = 191;
  /** RegularExpression Id. */
  int INBRANCH = 192;
  /** RegularExpression Id. */
  int NOTINBRANCH = 193;
  /** RegularExpression Id. */
  int DEPEND = 194;
  /** RegularExpression Id. */
  int PRIORITY = 195;
  /** RegularExpression Id. */
  int IN = 196;
  /** RegularExpression Id. */
  int OUT = 197;
  /** RegularExpression Id. */
  int INOUT = 198;
  /** RegularExpression Id. */
  int TASKLOOP = 199;
  /** RegularExpression Id. */
  int GRAINSIZE = 200;
  /** RegularExpression Id. */
  int NUMTASKS = 201;
  /** RegularExpression Id. */
  int NOGROUP = 202;
  /** RegularExpression Id. */
  int TARGET = 203;
  /** RegularExpression Id. */
  int DATA = 204;
  /** RegularExpression Id. */
  int DEVICE = 205;
  /** RegularExpression Id. */
  int MAP = 206;
  /** RegularExpression Id. */
  int TO = 207;
  /** RegularExpression Id. */
  int FROM = 208;
  /** RegularExpression Id. */
  int TOFROM = 209;
  /** RegularExpression Id. */
  int ALLOC = 210;
  /** RegularExpression Id. */
  int RELEASE = 211;
  /** RegularExpression Id. */
  int DELETE = 212;
  /** RegularExpression Id. */
  int ALWAYS = 213;
  /** RegularExpression Id. */
  int USEDEVICEPTR = 214;
  /** RegularExpression Id. */
  int ISDEVICEPTR = 215;
  /** RegularExpression Id. */
  int ENTER = 216;
  /** RegularExpression Id. */
  int EXIT = 217;
  /** RegularExpression Id. */
  int DEFAULTMAP = 218;
  /** RegularExpression Id. */
  int SCALAR = 219;
  /** RegularExpression Id. */
  int END = 220;
  /** RegularExpression Id. */
  int LINK = 221;
  /** RegularExpression Id. */
  int TEAMS = 222;
  /** RegularExpression Id. */
  int NUMTEAMS = 223;
  /** RegularExpression Id. */
  int THREADLIMIT = 224;
  /** RegularExpression Id. */
  int DISTRIBUTE = 225;
  /** RegularExpression Id. */
  int DISTSCHEDULE = 226;
  /** RegularExpression Id. */
  int HINT = 227;
  /** RegularExpression Id. */
  int SEQCST = 228;
  /** RegularExpression Id. */
  int THREADS = 229;
  /** RegularExpression Id. */
  int SOURCE = 230;
  /** RegularExpression Id. */
  int SINK = 231;
  /** RegularExpression Id. */
  int TASKGROUP = 232;
  /** RegularExpression Id. */
  int CANCEL = 233;
  /** RegularExpression Id. */
  int CANCELLATION = 234;
  /** RegularExpression Id. */
  int POINT = 235;
  /** RegularExpression Id. */
  int IDENTIFIER = 236;
  /** RegularExpression Id. */
  int LETTER = 237;
  /** RegularExpression Id. */
  int DIGIT = 238;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int AfterCrossbar = 1;
  /** Lexical state. */
  int Pragma = 2;
  /** Lexical state. */
  int Omp = 3;
  /** Lexical state. */
  int AfterAttrib = 4;
  /** Lexical state. */
  int Cpp = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"__attribute__\"",
    "\"__asm\"",
    "\"__asm__\"",
    "\"asm\"",
    "\"(\"",
    "\")\"",
    "<token of kind 22>",
    "\"_Generic\"",
    "\"_Static_assert\"",
    "\"_Noreturn\"",
    "\"_Alignas\"",
    "\"__restrict\"",
    "\"continue\"",
    "\"volatile\"",
    "\"register\"",
    "\"__const\"",
    "\"inline\"",
    "\"__inline\"",
    "\"__inline__\"",
    "\"__signed\"",
    "\"__signed__\"",
    "\"unsigned\"",
    "\"typedef\"",
    "\"default\"",
    "\"double\"",
    "\"switch\"",
    "\"return\"",
    "\"extern\"",
    "\"struct\"",
    "\"static\"",
    "\"signed\"",
    "\"while\"",
    "\"break\"",
    "\"union\"",
    "\"const\"",
    "\"float\"",
    "\"short\"",
    "\"else\"",
    "\"case\"",
    "\"long\"",
    "\"enum\"",
    "\"auto\"",
    "\"void\"",
    "\"char\"",
    "\"goto\"",
    "\"for\"",
    "\"int\"",
    "\"if\"",
    "\"do\"",
    "\"sizeof\"",
    "\"...\"",
    "\"<<=\"",
    "\">>=\"",
    "\"==\"",
    "\"&&\"",
    "\"||\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"<<\"",
    "\">>\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\"->\"",
    "\"++\"",
    "\"--\"",
    "\">\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"~\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"#\"",
    "<UNKNOWN_CPP>",
    "\"pragma\"",
    "\"include\"",
    "\"import\"",
    "\"define\"",
    "\"ifndef\"",
    "\"ident\"",
    "\"undef\"",
    "\"ifdef\"",
    "\"endif\"",
    "\"line\"",
    "\"else\"",
    "\"if\"",
    "\"elif\"",
    "<token of kind 127>",
    "<token of kind 128>",
    "\" \"",
    "\"\\t\"",
    "<token of kind 131>",
    "<token of kind 132>",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\r\"",
    "\" \"",
    "\"\\t\"",
    "<token of kind 139>",
    "<token of kind 140>",
    "\"omp\"",
    "<token of kind 142>",
    "\"parallel\"",
    "\"sections\"",
    "\"section\"",
    "\"single\"",
    "\"ordered\"",
    "\"master\"",
    "\"critical\"",
    "\"atomic\"",
    "\"barrier\"",
    "\"flush\"",
    "\"nowait\"",
    "\"schedule\"",
    "\"dynamic\"",
    "\"guided\"",
    "\"runtime\"",
    "\"none\"",
    "\"reduction\"",
    "\"private\"",
    "\"firstprivate\"",
    "\"lastprivate\"",
    "\"copyprivate\"",
    "\"shared\"",
    "\"copyin\"",
    "\"threadprivate\"",
    "\"num_threads\"",
    "\"collapse\"",
    "\"read\"",
    "\"write\"",
    "\"update\"",
    "\"capture\"",
    "\"task\"",
    "\"taskwait\"",
    "\"declare\"",
    "\"taskyield\"",
    "\"untied\"",
    "\"mergeable\"",
    "\"initializer\"",
    "\"final\"",
    "\"proc_bind\"",
    "\"close\"",
    "\"spread\"",
    "\"linear\"",
    "\"monotonic\"",
    "\"nonmonotonic\"",
    "\"simd\"",
    "\"safelen\"",
    "\"simdlen\"",
    "\"aligned\"",
    "\"uniform\"",
    "\"inbranch\"",
    "\"notinbranch\"",
    "\"depend\"",
    "\"priority\"",
    "\"in\"",
    "\"out\"",
    "\"inout\"",
    "\"taskloop\"",
    "\"grainsize\"",
    "\"num_tasks\"",
    "\"nogroup\"",
    "\"target\"",
    "\"data\"",
    "\"device\"",
    "\"map\"",
    "\"to\"",
    "\"from\"",
    "\"tofrom\"",
    "\"alloc\"",
    "\"release\"",
    "\"delete\"",
    "\"always\"",
    "\"use_device_ptr\"",
    "\"is_device_ptr\"",
    "\"enter\"",
    "\"exit\"",
    "\"defaultmap\"",
    "\"scalar\"",
    "\"end\"",
    "\"link\"",
    "\"teams\"",
    "\"num_teams\"",
    "\"thread_limit\"",
    "\"distribute\"",
    "\"dist_schedule\"",
    "\"hint\"",
    "\"seq_cst\"",
    "\"threads\"",
    "\"source\"",
    "\"sink\"",
    "\"taskgroup\"",
    "\"cancel\"",
    "\"cancellation\"",
    "\"point\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
