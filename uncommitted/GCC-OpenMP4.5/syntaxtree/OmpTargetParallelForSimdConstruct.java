//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> OmpPragma()
 * f1 -> <TARGET>
 * f2 -> <PARALLEL>
 * f3 -> <FOR>
 * f4 -> <SIMD>
 * f5 -> ( OmpTargetParallelForSimdClauseList() )?
 * f6 -> OmpEol()
 * f7 -> OmpForHeader()
 * f8 -> Statement()
 */
public class OmpTargetParallelForSimdConstruct implements Node {
   public OmpPragma f0;
   public NodeToken f1;
   public NodeToken f2;
   public NodeToken f3;
   public NodeToken f4;
   public NodeOptional f5;
   public OmpEol f6;
   public OmpForHeader f7;
   public Statement f8;

   public OmpTargetParallelForSimdConstruct(OmpPragma n0, NodeToken n1, NodeToken n2, NodeToken n3, NodeToken n4, NodeOptional n5, OmpEol n6, OmpForHeader n7, Statement n8) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
   }

   public OmpTargetParallelForSimdConstruct(OmpPragma n0, NodeOptional n1, OmpEol n2, OmpForHeader n3, Statement n4) {
      f0 = n0;
      f1 = new NodeToken("target");
      f2 = new NodeToken("parallel");
      f3 = new NodeToken("for");
      f4 = new NodeToken("simd");
      f5 = n1;
      f6 = n2;
      f7 = n3;
      f8 = n4;
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

