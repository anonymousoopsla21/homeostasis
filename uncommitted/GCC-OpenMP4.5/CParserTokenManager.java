/* Generated By:JavaCC: Do not edit this line. CParserTokenManager.java */
import java.util.*;
import syntaxtree.*;
import java.util.Vector;

/** Token Manager. */
public class CParserTokenManager implements CParserConstants
{
   int attributeMatchingParens;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x10000000004L) != 0L)
            return 4;
         if ((active0 & 0xffffffffff8f0000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 236;
            return 29;
         }
         if ((active1 & 0x20000200L) != 0L)
            return 53;
         return -1;
      case 1:
         if ((active0 & 0x7ffffeffff8f0000L) != 0L || (active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x8000010000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0x6000000000080000L) != 0L)
            return 29;
         if ((active0 & 0x1fffffffff870000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 2;
            return 29;
         }
         return -1;
      case 3:
         if ((active0 & 0x1fffffff870000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active0 & 0x1fe0000000000000L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x7fffff810000L) != 0L || (active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 4;
            }
            return 29;
         }
         if ((active0 & 0x1f800000060000L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0xfeff850000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x7f0100000000L) != 0L || (active1 & 0x2L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x3e7f810000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 6;
            return 29;
         }
         if ((active0 & 0xc080040000L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0xb010000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 7;
            }
            return 29;
         }
         if ((active0 & 0x3e74800000L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x1409010000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x1010000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x1408000000L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active0 & 0x1010000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 10;
            return 29;
         }
         return -1;
      case 11:
         if ((active0 & 0x1010000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 11;
            return 29;
         }
         return -1;
      case 12:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 12;
            return 29;
         }
         if ((active0 & 0x10000L) != 0L)
            return 29;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 35:
         return jjStopAtPos(0, 112);
      case 37:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 38:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2040L);
      case 40:
         return jjStopAtPos(0, 105);
      case 41:
         return jjStopAtPos(0, 106);
      case 42:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 43:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400800L);
      case 44:
         return jjStopAtPos(0, 111);
      case 45:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa01000L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 47:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 58:
         return jjStopAtPos(0, 101);
      case 59:
         return jjStopAtPos(0, 102);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x110008L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa0010L);
      case 63:
         return jjStopAtPos(0, 103);
      case 91:
         return jjStopAtPos(0, 107);
      case 93:
         return jjStopAtPos(0, 108);
      case 94:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x1e8f870000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000080000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x844000010000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x120080000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2008000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc000000100000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40040000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10720000000000L, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2002000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000020000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 109);
      case 124:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8080L);
      case 125:
         return jjStopAtPos(0, 110);
      case 126:
         return jjStopAtPos(0, 100);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 60:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 61:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 62:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e88070000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x48040000000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 63, 29);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x810800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4102002100000000L, active1, 0L);
      case 111:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3484010030000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800200000070000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000800000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400040000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x402820600000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x124000000L, active1, 0L);
      case 109:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 29);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x84000010000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000002000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x100008000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x60003800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x12000c0001000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x9008021000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 29);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 29);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x84008000000L, active1, 0x2L);
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x3944000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 29);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400600800000L, active1, 0L);
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 29);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000080000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000002000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000060000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x220010010000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x400002800000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x3804000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200010000000L, active1, 0L);
      case 107:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 29);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10600000000L, active1, 0L);
      case 109:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 29);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 29);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x21010000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 29);
         break;
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 29);
         break;
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 29);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      case 102:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 29);
         break;
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x621000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 29);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x3814000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x810000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x4a000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x3840000000L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x810000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x600000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 29);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 29);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x12000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 29);
         break;
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 29);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 29);
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 29);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 29);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 29);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 29);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 29);
         break;
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(13, 24, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 64;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 236)
                        kind = 236;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(17, 19);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(23, 25);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 23:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(30, 32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(30, 32);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(33, 35);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(36, 38);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 48:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(17, 19);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(50, 2);
                  break;
               case 51:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(51, 2);
                  break;
               case 52:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 54:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 55:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 56:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 57:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar == 42)
                     jjCheckNAddStates(45, 47);
                  break;
               case 61:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 63:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(29);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 8:
               case 37:
               case 42:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(53, 55);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 47:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 49:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(50, 2);
                  break;
               case 54:
                  jjAddStates(0, 2);
                  break;
               case 59:
                  jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  jjCheckNAddTwoStates(62, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 64 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x20000200L) != 0L)
            return 51;
         if ((active1 & 0x10000000004L) != 0L)
            return 4;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 133);
      case 13:
         return jjStopAtPos(0, 134);
      case 33:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_2(0x40000L, 0x0L);
      case 37:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_2(0x400L, 0x0L);
      case 38:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_2(0x2040L, 0x0L);
      case 40:
         return jjStopAtPos(0, 105);
      case 41:
         return jjStopAtPos(0, 106);
      case 42:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_2(0x100L, 0x0L);
      case 43:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_2(0x400800L, 0x0L);
      case 44:
         return jjStopAtPos(0, 111);
      case 45:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_2(0xa01000L, 0x0L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_2(0x4L, 0x0L);
      case 47:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_2(0x200L, 0x0L);
      case 58:
         return jjStopAtPos(0, 101);
      case 59:
         return jjStopAtPos(0, 102);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_2(0x110008L, 0x0L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_2(0x20L, 0x0L);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_2(0xa0010L, 0x0L);
      case 63:
         return jjStopAtPos(0, 103);
      case 91:
         return jjStopAtPos(0, 107);
      case 93:
         return jjStopAtPos(0, 108);
      case 94:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_2(0x4000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2000L);
      case 123:
         return jjStopAtPos(0, 109);
      case 124:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_2(0x8080L, 0x0L);
      case 125:
         return jjStopAtPos(0, 110);
      case 126:
         return jjStopAtPos(0, 100);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_2(active1, 0x4L, active2, 0L);
      case 60:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active1, 0x8L, active2, 0L);
      case 61:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 62:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         return jjMoveStringLiteralDfa2_2(active1, 0x10L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active1, 0L, active2, 0x2000L);
      case 124:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa2_2(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(0, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, 0L, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         break;
      case 112:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(2, 141);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, 0L, active1, active2);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 68);
                  else if (curChar == 47)
                     jjAddStates(69, 70);
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(71, 73);
                  }
                  break;
               case 51:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 47)
                     jjCheckNAddStates(74, 76);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(23, 25);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 23:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 68);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(77, 79);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(77, 79);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(80, 82);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(83, 85);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(86, 88);
                  break;
               case 46:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(71, 73);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(48, 2);
                  break;
               case 49:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(49, 2);
                  break;
               case 50:
                  if (curChar == 47)
                     jjAddStates(69, 70);
                  break;
               case 52:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 53:
                  if ((0x2400L & l) != 0L && kind > 131)
                     kind = 131;
                  break;
               case 54:
                  if (curChar == 10 && kind > 131)
                     kind = 131;
                  break;
               case 55:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddStates(89, 91);
                  break;
               case 59:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 58);
                  break;
               case 60:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 58);
                  break;
               case 61:
                  if (curChar == 47 && kind > 132)
                     kind = 132;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 8:
               case 35:
               case 40:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(53, 55);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(94, 95);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(96, 97);
                  break;
               case 45:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 47:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(48, 2);
                  break;
               case 52:
                  jjAddStates(74, 76);
                  break;
               case 57:
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
               case 60:
                  jjCheckNAddTwoStates(60, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(74, 76);
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(60, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 20);
      case 41:
         return jjStopAtPos(0, 21);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x7ffc000000000000L) != 0L)
         {
            jjmatchedKind = 236;
            return 30;
         }
         if ((active1 & 0x10000000004L) != 0L)
            return 4;
         if ((active1 & 0x20000200L) != 0L)
            return 54;
         return -1;
      case 1:
         if ((active1 & 0x5dbc000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active1 & 0x2240000000000000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active1 & 0x5ffc000000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 2;
            return 30;
         }
         return -1;
      case 3:
         if ((active1 & 0x7fc000000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active1 & 0x5800000000000000L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active1 & 0x7c000000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 4;
            return 30;
         }
         if ((active1 & 0x780000000000000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active1 & 0x74000000000000L) != 0L)
            return 30;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_1(0x40000L);
      case 37:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_1(0x400L);
      case 38:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_1(0x2040L);
      case 40:
         return jjStopAtPos(0, 105);
      case 41:
         return jjStopAtPos(0, 106);
      case 42:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_1(0x100L);
      case 43:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_1(0x400800L);
      case 44:
         return jjStopAtPos(0, 111);
      case 45:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_1(0xa01000L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_1(0x4L);
      case 47:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_1(0x200L);
      case 58:
         return jjStopAtPos(0, 101);
      case 59:
         return jjStopAtPos(0, 102);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_1(0x110008L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_1(0x20L);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_1(0xa0010L);
      case 63:
         return jjStopAtPos(0, 103);
      case 91:
         return jjStopAtPos(0, 107);
      case 93:
         return jjStopAtPos(0, 108);
      case 94:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_1(0x4000L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x5400000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x22d8000000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x800000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x4000000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x100000000000000L);
      case 123:
         return jjStopAtPos(0, 109);
      case 124:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_1(0x8080L);
      case 125:
         return jjStopAtPos(0, 110);
      case 126:
         return jjStopAtPos(0, 100);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_1(active1, 0x4L);
      case 60:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active1, 0x8L);
      case 61:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 62:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         return jjMoveStringLiteralDfa2_1(active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active1, 0x80000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active1, 0x20000000000000L);
      case 102:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active1, 0x240000000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active1, 0x800000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active1, 0x5000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active1, 0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active1, 0x508000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active1, 0x4000000000000L);
      case 124:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa2_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(0, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_1(active1, 0x4000000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active1, 0x8000000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_1(active1, 0x700000000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active1, 0x80000000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active1, 0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active1, 0x4000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active1, 0x840000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active1, 0x10000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active1, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa3_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(1, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_1(active1, 0x40000000000000L);
      case 101:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 123, 30);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 124, 30);
         return jjMoveStringLiteralDfa4_1(active1, 0x300000000000000L);
      case 102:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 126, 30);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_1(active1, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active1, 0x420000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active1, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_1(active1, 0x80000000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active1, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa4_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(2, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_1(active1, 0x40000000000000L);
      case 102:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 120, 30);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 121, 30);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 122, 30);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_1(active1, 0x4000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active1, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active1, 0x10000000000000L);
      case 116:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 119, 30);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_1(active1, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(3, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 114, 30);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_1(active1, 0x8000000000000L);
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 117, 30);
         break;
      case 102:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 118, 30);
         break;
      case 116:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 116, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(4, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 115, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, active1, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 65;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 47)
                     jjCheckNAddStates(98, 100);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(101, 107);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 47)
                     jjAddStates(108, 109);
                  else if (curChar == 36)
                  {
                     if (kind > 236)
                        kind = 236;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(110, 112);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(23, 25);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 23:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if (curChar != 36)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(101, 107);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(80, 82);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(80, 82);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(113, 115);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(116, 118);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(86, 88);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(119, 121);
                  break;
               case 49:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(110, 112);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(51, 2);
                  break;
               case 52:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(52, 2);
                  break;
               case 53:
                  if (curChar == 47)
                     jjAddStates(108, 109);
                  break;
               case 55:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(98, 100);
                  break;
               case 56:
                  if ((0x2400L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 57:
                  if (curChar == 10 && kind > 139)
                     kind = 139;
                  break;
               case 58:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 60:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 42)
                     jjCheckNAddStates(122, 124);
                  break;
               case 62:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 61);
                  break;
               case 63:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 61);
                  break;
               case 64:
                  if (curChar == 47 && kind > 140)
                     kind = 140;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(30);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 8:
               case 38:
               case 43:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(53, 55);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(125, 126);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(127, 128);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(129, 130);
                  break;
               case 48:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 50:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(51, 2);
                  break;
               case 55:
                  jjAddStates(98, 100);
                  break;
               case 60:
                  jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
               case 63:
                  jjCheckNAddTwoStates(63, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(98, 100);
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
               case 63:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(63, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 65 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(1, 0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 10 && kind > 127)
                     kind = 127;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 92)
                     jjAddStates(131, 132);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x10000000004L) != 0L)
            return 4;
         if ((active0 & 0xffffffffff800000L) != 0L || (active1 & 0x3L) != 0L || (active2 & 0xffffffffffff8000L) != 0L || (active3 & 0xfffffffffffL) != 0L)
         {
            jjmatchedKind = 236;
            return 29;
         }
         if ((active1 & 0x20000200L) != 0L)
            return 53;
         return -1;
      case 1:
         if ((active0 & 0x3ffffefeff800000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0xfff7ffffffff8000L) != 0L || (active3 & 0xffffffd7faeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0xc000010100000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0x8000000000000L) != 0L || (active3 & 0x28051L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0x6000000000000000L) != 0L || (active3 & 0x10004020L) != 0L)
            return 29;
         if ((active0 & 0x1fffffffff800000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0xffffffffffff8000L) != 0L || (active3 & 0xfffefff3fcfL) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 2;
            return 29;
         }
         return -1;
      case 3:
         if ((active0 & 0x1fffffff800000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0xd7fe9dffbfff8000L) != 0L || (active3 & 0xe77cdfe2f4fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 3;
            }
            return 29;
         }
         if ((active0 & 0x1fe0000000000000L) != 0L || (active2 & 0x2801620040000000L) != 0L || (active3 & 0x18822011080L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x7fffff800000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0xf7afd9ffbeff8000L) != 0L || (active3 & 0x7778cfa2f8fL) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 4;
            return 29;
         }
         if ((active0 & 0x1f800000000000L) != 0L || (active2 & 0x50040001000000L) != 0L || (active3 & 0x80041040040L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0xfeff800000L) != 0L || (active2 & 0xf62dd1cfacab8000L) != 0L || (active3 & 0x13784c8078bL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 5;
            }
            return 29;
         }
         if ((active0 & 0x7f0100000000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0x182083012540000L) != 0L || (active3 & 0x64008322804L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x3e7f800000L) != 0L || (active2 & 0x62d41ce84208000L) != 0L || (active3 & 0x50780c0038bL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 6;
            }
            return 29;
         }
         if ((active0 & 0xc080000000L) != 0L || (active2 & 0xf0009001288b0000L) != 0L || (active3 & 0x3004080400L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0xb000000L) != 0L || (active2 & 0x62d00ce80000000L) != 0L || (active3 & 0x50784c00302L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 236;
               jjmatchedPos = 7;
            }
            return 29;
         }
         if ((active0 & 0x3e74800000L) != 0L || (active2 & 0x410004218000L) != 0L || (active3 & 0x89L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x1409000000L) != 0L || (active2 & 0x40800ce00000000L) != 0L || (active3 & 0x40704c00002L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x2000000L) != 0L || (active2 & 0x225000080000000L) != 0L || (active3 & 0x10080000300L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x1000000L) != 0L || (active2 & 0x40800ce00000000L) != 0L || (active3 & 0x40500c00002L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x1408000000L) != 0L || (active3 & 0x204000000L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active0 & 0x1000000L) != 0L || (active2 & 0x400004200000000L) != 0L || (active3 & 0x40500c00000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 10;
            return 29;
         }
         if ((active2 & 0x8008c00000000L) != 0L || (active3 & 0x2L) != 0L)
            return 29;
         return -1;
      case 11:
         if ((active0 & 0x1000000L) != 0L || (active2 & 0x4000000000L) != 0L || (active3 & 0x400c00000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 11;
            return 29;
         }
         if ((active2 & 0x400000200000000L) != 0L || (active3 & 0x40100000000L) != 0L)
            return 29;
         return -1;
      case 12:
         if ((active0 & 0x1000000L) != 0L || (active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 12;
            return 29;
         }
         if ((active2 & 0x4000000000L) != 0L || (active3 & 0x400800000L) != 0L)
            return 29;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 135);
      case 13:
         return jjStopAtPos(0, 136);
      case 33:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x40000L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x2040L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 105);
      case 41:
         return jjStopAtPos(0, 106);
      case 42:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400800L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 111);
      case 45:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_3(0x0L, 0xa01000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 101);
      case 59:
         return jjStopAtPos(0, 102);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x110008L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x20L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_3(0x0L, 0xa0010L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 103);
      case 91:
         return jjStopAtPos(0, 107);
      case 93:
         return jjStopAtPos(0, 108);
      case 94:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4000L, 0x0L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_3(0x1e8f800000L, 0x0L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x200000000000000L, 0x0L, 0x4000000000400000L, 0x240000L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x1000000000000L, 0x0L, 0x800000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x844000010000000L, 0x0L, 0x40112800200000L, 0x60000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x18000000000L, 0x1L, 0x800008000000L, 0x604103004L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x120080000000000L, 0x0L, 0x0L, 0x13000000L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x2008000000000000L, 0x0L, 0x10000201000000L, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa1_3(0x1000000000000000L, 0x0L, 0x10000000L, 0x100L);
      case 104:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x0L, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0xc000000100000000L, 0x0L, 0x8000000000000L, 0x800051L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x80000000000000L, 0x0L, 0x100000400000000L, 0x20000000L);
      case 109:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x204000000100000L, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x400008042000000L, 0x80000602L);
      case 111:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x80000L, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x20000100008000L, 0x80000000008L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x40040000000L, 0x0L, 0x200a0000000L, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x10720000000000L, 0x2L, 0x3880001004070000L, 0xd008000000L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x4000000000L, 0x0L, 0x1604000000000L, 0x12140028880L);
      case 117:
         return jjMoveStringLiteralDfa1_3(0x2002000000000L, 0x0L, 0x8002080000000000L, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x400000020000000L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_3(0x800000000000L, 0x0L, 0x40000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 109);
      case 124:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x8080L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 110);
      case 126:
         return jjStopAtPos(0, 100);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L);
      case 60:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L);
      case 61:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 62:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_3(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_3(active0, 0x1e88000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x40000000000000L, active1, 0L, active2, 0x1001700400908000L, active3, 0x70000005880L);
      case 99:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x48040000000L, active1, 0L, active2, 0x4820080030000L, active3, 0x1044182004L);
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 63, 29);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0x810800000000000L, active1, 0L, active2, 0x5000000000L, active3, 0x2100000000L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x400000000000L, active1, 0x2L, active2, 0x2910000200040000L, active3, 0x8e20000000L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x28000000000000L, active1, 0L, active2, 0x4040000001000000L, active3, 0x240000L);
      case 110:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x4102002100000000L, active1, 0L, active2, 0x800a000000000000L, active3, 0x11000041L);
      case 111:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x3484010030000000L, active1, 0L, active2, 0x600012842000000L, active3, 0x84000020402L);
      case 112:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x80080000000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000000000L, active1, 0L, active2, 0x20040100280000L, active3, 0x10108L);
      case 115:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00000L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active0, 0x300000000000L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x200000000000000L, active1, 0L, active2, 0x8030000000L, active3, 0x80000220L);
      case 119:
         return jjMoveStringLiteralDfa2_3(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0x2000000L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000000000L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 124:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         break;
      case 95:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x800200000000000L, active1, 0L, active2, 0x21000000000L, active3, 0x48000100L);
      case 98:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0x80000000L, active1, 0L, active2, 0x800000030000L, active3, 0L);
      case 100:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_3(2, 220, 29);
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x80080080000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000800000L, active1, 0L, active2, 0L, active3, 0x400000L);
      case 102:
         return jjMoveStringLiteralDfa3_3(active0, 0x8000000000L, active1, 0L, active2, 0x1000000000000000L, active3, 0x4020000L);
      case 103:
         return jjMoveStringLiteralDfa3_3(active0, 0x400040000000L, active1, 0L, active2, 0L, active3, 0x400L);
      case 104:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x402820600000000L, active1, 0L, active2, 0xc008040110200000L, active3, 0x80002000008L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active0, 0x124000000L, active1, 0L, active2, 0x10000000000L, active3, 0x1c0000L);
      case 109:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x2800008000000000L, active3, 0x80000200L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x84000010000000L, active1, 0L, active2, 0x710000068040000L, active3, 0x68820000000L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active0, 0x18000002000000L, active1, 0L, active2, 0x60000000400000L, active3, 0x10040L);
      case 112:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_3(2, 206, 29);
         return jjMoveStringLiteralDfa3_3(active0, 0x4000000000L, active1, 0L, active2, 0x102800000000L, active3, 0x4L);
      case 113:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 61, 29);
         return jjMoveStringLiteralDfa3_3(active0, 0x100008000000L, active1, 0L, active2, 0x84004200808000L, active3, 0x2100000800L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x60003800000000L, active1, 0L, active2, 0x1600400100000L, active3, 0x10600000080L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 62, 29);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_3(2, 197, 29);
         return jjMoveStringLiteralDfa3_3(active0, 0x12000c0001000000L, active1, 0L, active2, 0x2000000000000L, active3, 0x1001002L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x100010000000000L, active1, 0L, active2, 0x1000000L, active3, 0x4000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 119:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0x200000L);
      case 122:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0x1080400200L);
      case 97:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(3, 204, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0x9008021000000L, active1, 0L, active2, 0x1008000a008000L, active3, 0x4200000L);
      case 98:
         return jjMoveStringLiteralDfa4_3(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0x60000000000L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 58, 29);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 169, 29);
         else if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x2000000010000000L, active3, 0x800000L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 53, 29);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 54, 29);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(3, 158, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0x84008000000L, active1, 0x2L, active2, 0x1180004004080000L, active3, 0x2101180004L);
      case 102:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 55, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x4004000000040000L, active3, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active0, 0x3944000000L, active1, 0L, active2, 0x2000000000000L, active3, 0x2102L);
      case 107:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(3, 221, 29);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 231, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x1400000000000L, active3, 0x10000000080L);
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0x800000000000L, active1, 0L, active2, 0x810000000000L, active3, 0x8000000L);
      case 109:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 56, 29);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_3(3, 208, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x400000000400000L, active3, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa4_3(active0, 0x400600800000L, active1, 0L, active2, 0L, active3, 0x80000000000L);
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 57, 29);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 60, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0x2000080000000L, active1, 0L, active2, 0x200000000000000L, active3, 0x40008L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 59, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0x10000002000000L, active1, 0L, active2, 0x1000800000L, active3, 0x4000020401L);
      case 115:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000000L, active1, 0L, active2, 0x40000201000000L, active3, 0L);
      case 116:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(3, 217, 29);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(3, 227, 29);
         return jjMoveStringLiteralDfa4_3(active0, 0x220010000000L, active1, 0L, active2, 0x8140420330000L, active3, 0x600000000L);
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x140000000000L, active1, 0L, active2, 0x80000000L, active3, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x2800000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x180814100000000L, active3, 0x2108080001L);
      case 99:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(4, 210, 29);
         return jjMoveStringLiteralDfa5_3(active0, 0x120000000000L, active1, 0L, active2, 0x80000000L, active3, 0x5000002000L);
      case 100:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000000000L, active1, 0L, active2, 0x4000000L, active3, 0x400000L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 47, 29);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 170, 29);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 182, 29);
         return jjMoveStringLiteralDfa5_3(active0, 0x400002800000L, active1, 0L, active2, 0x6001010100000L, active3, 0x60000800800L);
      case 103:
         return jjMoveStringLiteralDfa5_3(active0, 0x3804000000L, active1, 0L, active2, 0L, active3, 0x10000000000L);
      case 104:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(4, 152, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0x200010000000L, active1, 0L, active2, 0x8002022e30000L, active3, 0L);
      case 107:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 48, 29);
         break;
      case 108:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 180, 29);
         return jjMoveStringLiteralDfa5_3(active0, 0x10600000000L, active1, 0L, active2, 0x3000000000048000L, active3, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 49, 29);
         return jjMoveStringLiteralDfa5_3(active0, 0x180000000L, active1, 0L, active2, 0x4000000000000000L, active3, 0x106L);
      case 111:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x2L, active2, 0x8400000000000000L, active3, 0x20400L);
      case 112:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0xc00000000L, active3, 0L);
      case 114:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(4, 216, 29);
         return jjMoveStringLiteralDfa5_3(active0, 0xc0000000000L, active1, 0L, active2, 0x80000L, active3, 0x200000008L);
      case 115:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(4, 222, 29);
         return jjMoveStringLiteralDfa5_3(active0, 0x48000000L, active1, 0L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 50, 29);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 51, 29);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 52, 29);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_3(4, 198, 29);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 235, 29);
         return jjMoveStringLiteralDfa5_3(active0, 0x21000000L, active1, 0L, active2, 0x200088200000000L, active3, 0x80100200L);
      case 117:
         return jjMoveStringLiteralDfa5_3(active0, 0x8000000000L, active1, 0L, active2, 0x100000000000L, active3, 0x4000000L);
      case 119:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(3, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0xc400000000000L, active3, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0x2L);
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 45, 29);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_3(5, 150, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 46, 29);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_3(5, 156, 29);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 164, 29);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 177, 29);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 183, 29);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_3(5, 194, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0x2100000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(5, 32, 29);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 40, 29);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(5, 146, 29);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 171, 29);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_3(5, 205, 29);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(5, 212, 29);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 230, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0x4000000000L, active1, 0L, active2, 0x7000000000880000L, active3, 0x80400000L);
      case 102:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_3(5, 65, 29);
         break;
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 41, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0x621000000L, active1, 0L, active2, 0x1000008000000L, active3, 0x200000008L);
      case 108:
         if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active0, 0x8000000000L, active1, 0L, active2, 0x8000L, active3, 0x40004000000L);
      case 109:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(5, 209, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 42, 29);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 43, 29);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 165, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0x3814000000L, active1, 0L, active2, 0x400000000000000L, active3, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x200000000030000L, active3, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x10200000000L, active3, 0L);
      case 114:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(5, 148, 29);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 184, 29);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(5, 219, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0x800000L, active1, 0L, active2, 0x8000900c00000000L, active3, 0x10000000000L);
      case 115:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(5, 213, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0x1400080100L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 44, 29);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(5, 153, 29);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(5, 203, 29);
         return jjMoveStringLiteralDfa6_3(active0, 0x4a000000L, active1, 0L, active2, 0x180000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0x400L);
      case 118:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_3(4, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(4, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0, 0L, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0L, active3, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa7_3(active0, 0x4000000L, active2, 0x200000L, active3, 0x80000000L);
      case 98:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x4000000000000L, active3, 0x200000000L);
      case 99:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(6, 155, 29);
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000L, active2, 0L, active3, 0x400000001L);
      case 100:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(6, 147, 29);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 190, 29);
         break;
      case 101:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(6, 157, 29);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(6, 160, 29);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 172, 29);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 175, 29);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(6, 211, 29);
         return jjMoveStringLiteralDfa7_3(active0, 0x3840000000L, active2, 0x1000000008000L, active3, 0L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 38, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_3(active0, 0x800000L, active2, 0x20400c80000000L, active3, 0x800100L);
      case 108:
         return jjMoveStringLiteralDfa7_3(active0, 0x20000000L, active2, 0x8000004000000L, active3, 0x40000000000L);
      case 109:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 191, 29);
         break;
      case 110:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 188, 29);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 189, 29);
         return jjMoveStringLiteralDfa7_3(active0, 0x600000000L, active2, 0x200000000010000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x400000000000000L, active3, 0x10000000080L);
      case 112:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(6, 202, 29);
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x4000000000L, active3, 0L);
      case 114:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(6, 151, 29);
         return jjMoveStringLiteralDfa7_3(active0, 0x8000000L, active2, 0x8200000000L, active3, 0x2L);
      case 115:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 229, 29);
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0x10000000000L, active3, 0x200L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(6, 31, 29);
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 228, 29);
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0L, active3, 0x4000008L);
      case 117:
         return jjMoveStringLiteralDfa7_3(active0, 0x12000000L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active2, 0L, active3, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_3(5, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(5, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0, 0L, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_3(active0, 0x1000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0L, active3, 0x40000000002L);
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(7, 23, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0L, active3, 0x800000L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(7, 37, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0x1000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_3(7, 28, 29);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(7, 29, 29);
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(7, 154, 29);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(7, 168, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0x400000000L, active2, 0x8000000000L, active3, 0L);
      case 104:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_3(7, 192, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0L, active3, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa8_3(active0, 0x8000000L, active2, 0x208000200000000L, active3, 0x400000L);
      case 107:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0L, active3, 0x200L);
      case 108:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(7, 143, 29);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(7, 149, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0x5000000000000L, active3, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0L, active3, 0x84000000L);
      case 110:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0x20000000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0x80000000L, active3, 0L);
      case 112:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(7, 199, 29);
         break;
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(7, 30, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0x2000000L, active2, 0x4000000000L, active3, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(7, 26, 29);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_3(7, 144, 29);
         break;
      case 116:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_3(7, 174, 29);
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0x400000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0L, active3, 0x10200000000L);
      case 118:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0xc00000000L, active3, 0L);
      case 121:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_3(7, 195, 29);
         break;
      case 122:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active2, 0L, active3, 0x100L);
      default :
         break;
   }
   return jjStartNfa_3(6, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa8_3(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(6, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0, 0L, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_3(active0, 0x1400000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_3(active0, 0x1000000L, active2, 0x8c00000000L, active3, 0x4000000L);
      case 99:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 185, 29);
         return jjMoveStringLiteralDfa9_3(active0, 0x8000000L, active2, 0L, active3, 0x400000L);
      case 100:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 176, 29);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 181, 29);
         break;
      case 101:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 178, 29);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(8, 200, 29);
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0L, active3, 0x400800000L);
      case 105:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x4000000000L, active3, 0x100000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(8, 25, 29);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(8, 159, 29);
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0L, active3, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x400000000000000L, active3, 0L);
      case 112:
         if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 232, 29);
         break;
      case 115:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(8, 201, 29);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(8, 223, 29);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0L, active3, 0x40200000000L);
      case 118:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x200000000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x8000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa9_3(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(7, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0, 0L, active2, active3);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_3(9, 34, 29);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(9, 36, 29);
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0L, active3, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x200000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0L, active3, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x8000000000L, active3, 0x400000000L);
      case 101:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_3(9, 225, 29);
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x8000000000000L, active3, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0L, active3, 0x40000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0L, active3, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x400000000000000L, active3, 0L);
      case 112:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(9, 218, 29);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_3(active0, 0x1000000L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(9, 27, 29);
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0xc00000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x4000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_3(8, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa10_3(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(8, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, active0, 0L, active2, active3);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0L, active3, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0x4000000000L, active3, 0L);
      case 101:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_3(10, 162, 29);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(10, 163, 29);
         break;
      case 104:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_3(10, 193, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0x400000000000000L, active3, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0L, active3, 0x40000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0L, active3, 0x800000L);
      case 114:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_3(10, 179, 29);
         break;
      case 115:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_3(10, 167, 29);
         return jjMoveStringLiteralDfa11_3(active0, 0x1000000L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0x200000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0L, active3, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_3(9, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa11_3(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(9, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, active0, 0L, active2, active3);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_3(11, 186, 29);
         break;
      case 101:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_3(11, 161, 29);
         return jjMoveStringLiteralDfa12_3(active0, 0x1000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_3(active0, 0L, active2, 0L, active3, 0x400000000L);
      case 110:
         if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(11, 234, 29);
         break;
      case 112:
         return jjMoveStringLiteralDfa12_3(active0, 0L, active2, 0L, active3, 0x400000L);
      case 116:
         if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(11, 224, 29);
         return jjMoveStringLiteralDfa12_3(active0, 0L, active2, 0x4000000000L, active3, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_3(10, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa12_3(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(10, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(11, active0, 0L, active2, active3);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(12, 166, 29);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_3(12, 226, 29);
         break;
      case 114:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(12, 215, 29);
         return jjMoveStringLiteralDfa13_3(active0, 0x1000000L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_3(active0, 0L, active2, 0L, active3, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_3(11, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa13_3(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_3(11, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(12, active0, 0L, 0L, active3);
      return 13;
   }
   switch(curChar)
   {
      case 114:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_3(13, 214, 29);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(13, 24, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(12, active0, 0L, 0L, active3);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 64;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 236)
                        kind = 236;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(17, 19);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(23, 25);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 23:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(30, 32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(30, 32);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(33, 35);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(36, 38);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 48:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(17, 19);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(50, 2);
                  break;
               case 51:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(51, 2);
                  break;
               case 52:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 54:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 55:
                  if ((0x2400L & l) != 0L && kind > 131)
                     kind = 131;
                  break;
               case 56:
                  if (curChar == 10 && kind > 131)
                     kind = 131;
                  break;
               case 57:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar == 42)
                     jjCheckNAddStates(45, 47);
                  break;
               case 61:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               case 63:
                  if (curChar == 47 && kind > 132)
                     kind = 132;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(29);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 8:
               case 37:
               case 42:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(53, 55);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 47:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 49:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(50, 2);
                  break;
               case 54:
                  jjAddStates(0, 2);
                  break;
               case 59:
                  jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  jjCheckNAddTwoStates(62, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(62, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 64 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   54, 55, 57, 31, 32, 38, 39, 43, 44, 9, 53, 58, 20, 21, 23, 11, 
   13, 49, 51, 2, 4, 5, 9, 7, 8, 9, 20, 21, 25, 23, 33, 34, 
   9, 36, 37, 9, 41, 42, 9, 43, 44, 9, 46, 47, 9, 60, 61, 63, 
   6, 7, 14, 15, 17, 22, 24, 26, 35, 36, 40, 41, 45, 46, 29, 30, 
   36, 37, 41, 42, 9, 51, 56, 47, 49, 2, 52, 53, 55, 31, 32, 9, 
   34, 35, 9, 39, 40, 9, 44, 45, 9, 58, 59, 61, 33, 34, 38, 39, 
   43, 44, 55, 56, 58, 32, 33, 39, 40, 44, 45, 9, 54, 59, 50, 52, 
   2, 37, 38, 9, 42, 43, 9, 47, 48, 9, 61, 62, 64, 36, 37, 41, 
   42, 46, 47, 2, 3, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, 
"\137\107\145\156\145\162\151\143", "\137\123\164\141\164\151\143\137\141\163\163\145\162\164", 
"\137\116\157\162\145\164\165\162\156", "\137\101\154\151\147\156\141\163", 
"\137\137\162\145\163\164\162\151\143\164", "\143\157\156\164\151\156\165\145", "\166\157\154\141\164\151\154\145", 
"\162\145\147\151\163\164\145\162", "\137\137\143\157\156\163\164", "\151\156\154\151\156\145", 
"\137\137\151\156\154\151\156\145", "\137\137\151\156\154\151\156\145\137\137", 
"\137\137\163\151\147\156\145\144", "\137\137\163\151\147\156\145\144\137\137", 
"\165\156\163\151\147\156\145\144", "\164\171\160\145\144\145\146", "\144\145\146\141\165\154\164", 
"\144\157\165\142\154\145", "\163\167\151\164\143\150", "\162\145\164\165\162\156", 
"\145\170\164\145\162\156", "\163\164\162\165\143\164", "\163\164\141\164\151\143", 
"\163\151\147\156\145\144", "\167\150\151\154\145", "\142\162\145\141\153", "\165\156\151\157\156", 
"\143\157\156\163\164", "\146\154\157\141\164", "\163\150\157\162\164", "\145\154\163\145", 
"\143\141\163\145", "\154\157\156\147", "\145\156\165\155", "\141\165\164\157", 
"\166\157\151\144", "\143\150\141\162", "\147\157\164\157", "\146\157\162", "\151\156\164", 
"\151\146", "\144\157", "\163\151\172\145\157\146", "\56\56\56", "\74\74\75", "\76\76\75", 
"\75\75", "\46\46", "\174\174", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", 
"\46\75", "\136\75", "\174\75", "\74\74", "\76\76", "\41\75", "\76\75", "\74\75", 
"\55\76", "\53\53", "\55\55", "\76", "\74", "\53", "\55", "\52", "\57", "\45", "\75", 
"\46", "\174", "\136", "\41", "\176", "\72", "\73", "\77", "\56", "\50", "\51", 
"\133", "\135", "\173", "\175", "\54", "\43", null, "\160\162\141\147\155\141", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\12", "\15", null, null, null, null, "\157\155\160", 
null, "\160\141\162\141\154\154\145\154", "\163\145\143\164\151\157\156\163", 
"\163\145\143\164\151\157\156", "\163\151\156\147\154\145", "\157\162\144\145\162\145\144", 
"\155\141\163\164\145\162", "\143\162\151\164\151\143\141\154", "\141\164\157\155\151\143", 
"\142\141\162\162\151\145\162", "\146\154\165\163\150", "\156\157\167\141\151\164", 
"\163\143\150\145\144\165\154\145", "\144\171\156\141\155\151\143", "\147\165\151\144\145\144", 
"\162\165\156\164\151\155\145", "\156\157\156\145", "\162\145\144\165\143\164\151\157\156", 
"\160\162\151\166\141\164\145", "\146\151\162\163\164\160\162\151\166\141\164\145", 
"\154\141\163\164\160\162\151\166\141\164\145", "\143\157\160\171\160\162\151\166\141\164\145", "\163\150\141\162\145\144", 
"\143\157\160\171\151\156", "\164\150\162\145\141\144\160\162\151\166\141\164\145", 
"\156\165\155\137\164\150\162\145\141\144\163", "\143\157\154\154\141\160\163\145", "\162\145\141\144", 
"\167\162\151\164\145", "\165\160\144\141\164\145", "\143\141\160\164\165\162\145", 
"\164\141\163\153", "\164\141\163\153\167\141\151\164", "\144\145\143\154\141\162\145", 
"\164\141\163\153\171\151\145\154\144", "\165\156\164\151\145\144", "\155\145\162\147\145\141\142\154\145", 
"\151\156\151\164\151\141\154\151\172\145\162", "\146\151\156\141\154", "\160\162\157\143\137\142\151\156\144", 
"\143\154\157\163\145", "\163\160\162\145\141\144", "\154\151\156\145\141\162", 
"\155\157\156\157\164\157\156\151\143", "\156\157\156\155\157\156\157\164\157\156\151\143", "\163\151\155\144", 
"\163\141\146\145\154\145\156", "\163\151\155\144\154\145\156", "\141\154\151\147\156\145\144", 
"\165\156\151\146\157\162\155", "\151\156\142\162\141\156\143\150", 
"\156\157\164\151\156\142\162\141\156\143\150", "\144\145\160\145\156\144", "\160\162\151\157\162\151\164\171", "\151\156", 
"\157\165\164", "\151\156\157\165\164", "\164\141\163\153\154\157\157\160", 
"\147\162\141\151\156\163\151\172\145", "\156\165\155\137\164\141\163\153\163", "\156\157\147\162\157\165\160", 
"\164\141\162\147\145\164", "\144\141\164\141", "\144\145\166\151\143\145", "\155\141\160", "\164\157", 
"\146\162\157\155", "\164\157\146\162\157\155", "\141\154\154\157\143", 
"\162\145\154\145\141\163\145", "\144\145\154\145\164\145", "\141\154\167\141\171\163", 
"\165\163\145\137\144\145\166\151\143\145\137\160\164\162", "\151\163\137\144\145\166\151\143\145\137\160\164\162", 
"\145\156\164\145\162", "\145\170\151\164", "\144\145\146\141\165\154\164\155\141\160", 
"\163\143\141\154\141\162", "\145\156\144", "\154\151\156\153", "\164\145\141\155\163", 
"\156\165\155\137\164\145\141\155\163", "\164\150\162\145\141\144\137\154\151\155\151\164", 
"\144\151\163\164\162\151\142\165\164\145", "\144\151\163\164\137\163\143\150\145\144\165\154\145", "\150\151\156\164", 
"\163\145\161\137\143\163\164", "\164\150\162\145\141\144\163", "\163\157\165\162\143\145", 
"\163\151\156\153", "\164\141\163\153\147\162\157\165\160", "\143\141\156\143\145\154", 
"\143\141\156\143\145\154\154\141\164\151\157\156", "\160\157\151\156\164", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "AfterCrossbar",
   "Pragma",
   "Omp",
   "AfterAttrib",
   "Cpp",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 4, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
   5, 5, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 3, 5, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffff80d101L, 0x7ffffffffffffL, 0xffffffffffffa180L, 0x1fffffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x8000000000000000L, 0x1e7eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x7f0000L, 0x7ff8000000000000L, 0x4001L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[65];
private final int[] jjstateSet = new int[130];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public CParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 65; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 142)
         {
            jjmatchedKind = 142;
         }
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 22)
         {
            jjmatchedKind = 22;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 128)
         {
            jjmatchedKind = 128;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens = 0;
         break;
      case 17 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens = 0;
         break;
      case 18 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens = 0;
         break;
      case 19 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens = 0;
         break;
      case 20 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens++;
         break;
      case 21 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         attributeMatchingParens--;
         if ( attributeMatchingParens == 0 )
            SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
