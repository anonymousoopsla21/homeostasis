//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( ElementsOfTranslation() )+
    */
   public R visit(TranslationUnit n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ExternalDeclaration()
    *       | UnknownCpp()
    *       | UnknownPragma()
    */
   public R visit(ElementsOfTranslation n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Declaration()
    *       | FunctionDefinition()
    *       | OmpGlobalDirective()
    */
   public R visit(ExternalDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( DeclarationSpecifiers() )?
    * f1 -> Declarator()
    * f2 -> ( DeclarationList() )?
    * f3 -> CompoundStatement()
    */
   public R visit(FunctionDefinition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> DeclarationSpecifiers() ( InitDeclaratorList() )? ";"
    *       | StaticAssertDeclaration()
    */
   public R visit(Declaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <STATIC_ASSERT>
    * f1 -> "("
    * f2 -> ConstantExpression()
    * f3 -> ","
    * f4 -> <STRING_LITERAL>
    * f5 -> ")"
    */
   public R visit(StaticAssertDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( Declaration() )+
    */
   public R visit(DeclarationList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ADeclarationSpecifier() )+
    */
   public R visit(DeclarationSpecifiers n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> StorageClassSpecifier()
    *       | TypeSpecifier()
    *       | TypeQualifier()
    *       | FunctionSpecifier()
    *       | AlignmentSpecifier()
    */
   public R visit(ADeclarationSpecifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INLINE>
    *       | <NORETURN>
    */
   public R visit(FunctionSpecifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> AlignAsTypeName()
    *       | AlignAsConstantExpression()
    */
   public R visit(AlignmentSpecifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ALIGNAS>
    * f1 -> "("
    * f2 -> TypeName()
    * f3 -> ")"
    */
   public R visit(AlignAsTypeName n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ALIGNAS>
    * f1 -> "("
    * f2 -> ConstantExpression()
    * f3 -> ")"
    */
   public R visit(AlignAsConstantExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <AUTO>
    *       | <REGISTER>
    *       | <STATIC>
    *       | <EXTERN>
    *       | <TYPEDEF>
    */
   public R visit(StorageClassSpecifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( <VOID> | <CHAR> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <SIGNED> | <UNSIGNED> | StructOrUnionSpecifier() | EnumSpecifier() | TypedefName() )
    */
   public R visit(TypeSpecifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <RESTRICT>
    *       | <CONST>
    *       | <VOLATILE>
    *       | <CCONST>
    *       | <CSIGNED>
    *       | <CSIGNED2>
    */
   public R visit(TypeQualifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**

    * f0 -> ( StructOrUnionSpecifierWithList() | StructOrUnionSpecifierWithId() )
    */
   public R visit(StructOrUnionSpecifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> StructOrUnion()
    * f1 -> ( <IDENTIFIER> )?
    * f2 -> "{"
    * f3 -> StructDeclarationList()
    * f4 -> "}"
    */
   public R visit(StructOrUnionSpecifierWithList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> StructOrUnion()
    * f1 -> <IDENTIFIER>
    */
   public R visit(StructOrUnionSpecifierWithId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <STRUCT>
    *       | <UNION>
    */
   public R visit(StructOrUnion n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( StructDeclaration() )+
    */
   public R visit(StructDeclarationList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> InitDeclarator()
    * f1 -> ( "," InitDeclarator() )*
    */
   public R visit(InitDeclaratorList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Declarator()
    * f1 -> ( "=" Initializer() )?
    */
   public R visit(InitDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> SpecifierQualifierList()
    * f1 -> StructDeclaratorList()
    * f2 -> ";"
    */
   public R visit(StructDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ASpecifierQualifier() )+
    */
   public R visit(SpecifierQualifierList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> TypeSpecifier()
    *       | TypeQualifier()
    */
   public R visit(ASpecifierQualifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> StructDeclarator()
    * f1 -> ( "," StructDeclarator() )*
    */
   public R visit(StructDeclaratorList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> StructDeclaratorWithDeclarator()
    *       | StructDeclaratorWithBitField()
    */
   public R visit(StructDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Declarator()
    * f1 -> ( ":" ConstantExpression() )?
    */
   public R visit(StructDeclaratorWithDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ":"
    * f1 -> ConstantExpression()
    */
   public R visit(StructDeclaratorWithBitField n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> EnumSpecifierWithList()
    *       | EnumSpecifierWithId()
    */
   public R visit(EnumSpecifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ENUM>
    * f1 -> ( <IDENTIFIER> )?
    * f2 -> "{"
    * f3 -> EnumeratorList()
    * f4 -> "}"
    */
   public R visit(EnumSpecifierWithList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ENUM>
    * f1 -> <IDENTIFIER>
    */
   public R visit(EnumSpecifierWithId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Enumerator()
    * f1 -> ( "," Enumerator() )*
    */
   public R visit(EnumeratorList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ( "=" ConstantExpression() )?
    */
   public R visit(Enumerator n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( Pointer() )?
    * f1 -> DirectDeclarator()
    */
   public R visit(Declarator n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IdentifierOrDeclarator()
    * f1 -> DeclaratorOpList()
    */
   public R visit(DirectDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ADeclaratorOp() )*
    */
   public R visit(DeclaratorOpList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> DimensionSize()
    *       | ParameterTypeListClosed()
    *       | OldParameterListClosed()
    */
   public R visit(ADeclaratorOp n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "["
    * f1 -> ( ConstantExpression() )?
    * f2 -> "]"
    */
   public R visit(DimensionSize n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> ( ParameterTypeList() )?
    * f2 -> ")"
    */
   public R visit(ParameterTypeListClosed n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> ( OldParameterList() )?
    * f2 -> ")"
    */
   public R visit(OldParameterListClosed n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    *       | "(" Declarator() ")"
    */
   public R visit(IdentifierOrDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( "*" | "^" )
    * f1 -> ( TypeQualifierList() )?
    * f2 -> ( Pointer() )?
    */
   public R visit(Pointer n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( TypeQualifier() )+
    */
   public R visit(TypeQualifierList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ParameterList()
    * f1 -> ( "," "..." )?
    */
   public R visit(ParameterTypeList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ParameterDeclaration()
    * f1 -> ( "," ParameterDeclaration() )*
    */
   public R visit(ParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> DeclarationSpecifiers()
    * f1 -> ParameterAbstraction()
    */
   public R visit(ParameterDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Declarator()
    *       | AbstractOptionalDeclarator()
    */
   public R visit(ParameterAbstraction n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( AbstractDeclarator() )?
    */
   public R visit(AbstractOptionalDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ( "," <IDENTIFIER> )*
    */
   public R visit(OldParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> AssignmentExpression()
    *       | ArrayInitializer()
    */
   public R visit(Initializer n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> InitializerList()
    * f2 -> ( "," )?
    * f3 -> "}"
    */
   public R visit(ArrayInitializer n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Initializer()
    * f1 -> ( "," Initializer() )*
    */
   public R visit(InitializerList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> SpecifierQualifierList()
    * f1 -> ( AbstractDeclarator() )?
    */
   public R visit(TypeName n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> AbstractDeclaratorWithPointer()
    *       | DirectAbstractDeclarator()
    */
   public R visit(AbstractDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Pointer()
    * f1 -> ( DirectAbstractDeclarator() )?
    */
   public R visit(AbstractDeclaratorWithPointer n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> AbstractDimensionOrParameter()
    * f1 -> DimensionOrParameterList()
    */
   public R visit(DirectAbstractDeclarator n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> AbstractDeclaratorClosed()
    *       | DimensionSize()
    *       | ParameterTypeListClosed()
    */
   public R visit(AbstractDimensionOrParameter n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> AbstractDeclarator()
    * f2 -> ")"
    */
   public R visit(AbstractDeclaratorClosed n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ADimensionOrParameter() )*
    */
   public R visit(DimensionOrParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> DimensionSize()
    *       | ParameterTypeListClosed()
    */
   public R visit(ADimensionOrParameter n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(TypedefName n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> LabeledStatement()
    *       | ExpressionStatement()
    *       | CompoundStatement()
    *       | SelectionStatement()
    *       | IterationStatement()
    *       | JumpStatement()
    *       | UnknownPragma()
    *       | OmpConstruct()
    *       | OmpDirective()
    *       | UnknownCpp()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> SimpleLabeledStatement()
    *       | CaseLabeledStatement()
    *       | DefaultLabeledStatement()
    */
   public R visit(LabeledStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ":"
    * f2 -> Statement()
    */
   public R visit(SimpleLabeledStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <CASE>
    * f1 -> ConstantExpression()
    * f2 -> ":"
    * f3 -> Statement()
    */
   public R visit(CaseLabeledStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DFLT>
    * f1 -> ":"
    * f2 -> Statement()
    */
   public R visit(DefaultLabeledStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( Expression() )?
    * f1 -> ";"
    */
   public R visit(ExpressionStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( CompoundStatementElement() )*
    * f2 -> "}"
    */
   public R visit(CompoundStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Declaration()
    *       | Statement()
    */
   public R visit(CompoundStatementElement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> IfStatement()
    *       | SwitchStatement()
    */
   public R visit(SelectionStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> ( <ELSE> Statement() )?
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SWITCH>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(SwitchStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> WhileStatement()
    *       | DoStatement()
    *       | ForStatement()
    */
   public R visit(IterationStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <WHILE>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DO>
    * f1 -> Statement()
    * f2 -> <WHILE>
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FOR>
    * f1 -> "("
    * f2 -> ( Expression() )?
    * f3 -> ";"
    * f4 -> ( Expression() )?
    * f5 -> ";"
    * f6 -> ( Expression() )?
    * f7 -> ")"
    * f8 -> Statement()
    */
   public R visit(ForStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> GotoStatement()
    *       | ContinueStatement()
    *       | BreakStatement()
    *       | ReturnStatement()
    */
   public R visit(JumpStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <GOTO>
    * f1 -> <IDENTIFIER>
    * f2 -> ";"
    */
   public R visit(GotoStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <CONTINUE>
    * f1 -> ";"
    */
   public R visit(ContinueStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <BREAK>
    * f1 -> ";"
    */
   public R visit(BreakStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <RETURN>
    * f1 -> ( Expression() )?
    * f2 -> ";"
    */
   public R visit(ReturnStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "#"
    * f1 -> <UNKNOWN_CPP>
    */
   public R visit(UnknownCpp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <OMP_CR>
    *       | <OMP_NL>
    */
   public R visit(OmpEol n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpParallelConstruct()
    *       | OmpForConstruct()
    *       | OmpSectionsConstruct()
    *       | OmpSingleConstruct()
    *       | OmpSimdConstruct()
    *       | OmpForSimdConstruct()
    *       | OmpTaskConstruct()
    *       | OmpTaskLoopSimdConstruct()
    *       | OmpTaskLoopConstruct()
    *       | OmpTargetDataConstruct()
    *       | OmpTargetParallelForSimdConstruct()
    *       | OmpTargetParallelForConstruct()
    *       | OmpTargetParallelConstruct()
    *       | OmpTargetSimdConstruct()
    *       | OmpTargetTeamsDistributeParallelForSimdConstruct()
    *       | OmpTargetTeamsDistributeParallelForConstruct()
    *       | OmpTargetTeamsDistributeSimdConstruct()
    *       | OmpTargetTeamsDistributeConstruct()
    *       | OmpTargetTeamsConstruct()
    *       | OmpTargetConstruct()
    *       | OmpTeamsDistributeParallelForSimdConstruct()
    *       | OmpTeamsDistributeParallelForConstruct()
    *       | OmpTeamsDistributeSimdConstruct()
    *       | OmpTeamsDistributeConstruct()
    *       | OmpTeamsConstruct()
    *       | OmpDistributeSimdConstruct()
    *       | OmpDistributeParallelForSimdConstruct()
    *       | OmpDistributeParallelForConstruct()
    *       | OmpDistributeConstruct()
    *       | OmpParallelForSimdConstruct()
    *       | OmpParallelForConstruct()
    *       | OmpParallelSectionsConstruct()
    *       | OmpMasterConstruct()
    *       | OmpCriticalConstruct()
    *       | OmpTaskGroupConstruct()
    *       | OmpAtomicConstruct()
    *       | OmpOrderedConstruct()
    */
   public R visit(OmpConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTaskyieldDirective()
    *       | OmpTargetEnterDataDirective()
    *       | OmpTargetExitDataDirective()
    *       | OmpTargetUpdateDirective()
    *       | OmpBarrierDirective()
    *       | OmpTaskwaitDirective()
    *       | OmpFlushDirective()
    *       | OmpCancelDirective()
    *       | OmpCancellationPointDirective()
    */
   public R visit(OmpDirective n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "#"
    * f1 -> <PRAGMA>
    * f2 -> <OMP>
    */
   public R visit(OmpPragma n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "#"
    * f1 -> <PRAGMA>
    * f2 -> <UNKNOWN_CPP>
    */
   public R visit(UnknownPragma n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <PARALLEL>
    * f2 -> ( OmpParallelClauseList() )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpParallelConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpParallelClause()
    * f1 -> ( ( "," )? OmpParallelClause() )*
    */
   public R visit(OmpParallelClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfParallelClause()
    *       | OmpNumThreadsClause()
    *       | OmpDfltSharedClause()
    *       | OmpDfltNoneClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpSharedClause()
    *       | OmpCopyinClause()
    *       | OmpReductionClause()
    *       | OmpThreadAffinityMasterClause()
    *       | OmpThreadAffinityCloseClause()
    *       | OmpThreadAffinitySpreadClause()
    */
   public R visit(OmpParallelClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> ( <PARALLEL> <COLON> )?
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(OmpIfParallelClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NUM_THREADS>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpNumThreadsClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DFLT>
    * f1 -> "("
    * f2 -> <SHARED>
    * f3 -> ")"
    */
   public R visit(OmpDfltSharedClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DFLT>
    * f1 -> "("
    * f2 -> <NONE>
    * f3 -> ")"
    */
   public R visit(OmpDfltNoneClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <PRIVATE>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpPrivateClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FIRSTPRIVATE>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpFirstPrivateClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SHARED>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpSharedClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <COPYIN>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpCopyinClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <REDUCTION>
    * f1 -> "("
    * f2 -> ReductionOp()
    * f3 -> ":"
    * f4 -> VariableList()
    * f5 -> ")"
    */
   public R visit(OmpReductionClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> <PROC_BIND>
    * f1 -> "("
    * f2 -> <MASTER>
    * f3 -> ")"
    */
   public R visit(OmpThreadAffinityMasterClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <PROC_BIND>
    * f1 -> "("
    * f2 -> <CLOSE>
    * f3 -> ")"
    */
   public R visit(OmpThreadAffinityCloseClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <PROC_BIND>
    * f1 -> "("
    * f2 -> <SPREAD>
    * f3 -> ")"
    */
   public R visit(OmpThreadAffinitySpreadClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <FOR>
    * f2 -> ( OmpForClauseList() )?
    * f3 -> OmpEol()
    * f4 -> OmpForHeader()
    * f5 -> Statement()
    */
   public R visit(OmpForConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpForClause()
    * f1 -> ( ( "," )? OmpForClause() )*
    */
   public R visit(OmpForClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpLastPrivateClause()
    *       | OmpLinearClause()
    *       | OmpReductionClause()
    *       | OmpScheduleClause()
    *       | OmpCollapseClause()
    *       | OmpOrderedClause()
    *       | OmpNowaitClause()
    */
   public R visit(OmpForClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <LASTPRIVATE>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpLastPrivateClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <LINEAR>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ( <COLON> Expression() )?
    * f4 -> ")"
    */
   public R visit(OmpLinearClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SCHEDULE>
    * f1 -> "("
    * f2 -> ( Modifier() ( "," Modifier() )? <COLON> )?
    * f3 -> ScheduleKind()
    * f4 -> ( "," Expression() )?
    * f5 -> ")"
    */
   public R visit(OmpScheduleClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> <MONOTONIC>
    *       | <NONMONOTONIC>
    *       | <SIMD>
    */
   public R visit(Modifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <STATIC>
    *       | <DYNAMIC>
    *       | <GUIDED>
    *       | <RUNTIME>
    *       | <AUTO>
    */
   public R visit(ScheduleKind n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <COLLAPSE>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpCollapseClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ORDERED>
    * f1 -> ( "(" Expression() ")" )?
    */
   public R visit(OmpOrderedClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NOWAIT>
    */
   public R visit(OmpNowaitClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FOR>
    * f1 -> "("
    * f2 -> OmpForInitExpression()
    * f3 -> ";"
    * f4 -> OmpForCondition()
    * f5 -> ";"
    * f6 -> OmpForReinitExpression()
    * f7 -> ")"
    */
   public R visit(OmpForHeader n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "="
    * f2 -> Expression()
    */
   public R visit(OmpForInitExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpForLTCondition()
    *       | OmpForLECondition()
    *       | OmpForGTCondition()
    *       | OmpForGECondition()
    */
   public R visit(OmpForCondition n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "<"
    * f2 -> Expression()
    */
   public R visit(OmpForLTCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "<="
    * f2 -> Expression()
    */
   public R visit(OmpForLECondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ">"
    * f2 -> Expression()
    */
   public R visit(OmpForGTCondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ">="
    * f2 -> Expression()
    */
   public R visit(OmpForGECondition n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PostIncrementId()
    *       | PostDecrementId()
    *       | PreIncrementId()
    *       | PreDecrementId()
    *       | ShortAssignPlus()
    *       | ShortAssignMinus()
    *       | OmpForAdditive()
    *       | OmpForSubtractive()
    *       | OmpForMultiplicative()
    */
   public R visit(OmpForReinitExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "++"
    */
   public R visit(PostIncrementId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "--"
    */
   public R visit(PostDecrementId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "++"
    * f1 -> <IDENTIFIER>
    */
   public R visit(PreIncrementId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "--"
    * f1 -> <IDENTIFIER>
    */
   public R visit(PreDecrementId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "+="
    * f2 -> Expression()
    */
   public R visit(ShortAssignPlus n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "-="
    * f2 -> Expression()
    */
   public R visit(ShortAssignMinus n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "="
    * f2 -> <IDENTIFIER>
    * f3 -> "+"
    * f4 -> AdditiveExpression()
    */
   public R visit(OmpForAdditive n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "="
    * f2 -> <IDENTIFIER>
    * f3 -> "-"
    * f4 -> AdditiveExpression()
    */
   public R visit(OmpForSubtractive n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "="
    * f2 -> MultiplicativeExpression()
    * f3 -> "+"
    * f4 -> <IDENTIFIER>
    */
   public R visit(OmpForMultiplicative n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <SECTIONS>
    * f2 -> ( OmpSectionsClauseList() )?
    * f3 -> OmpEol()
    * f4 -> SectionsScope()
    */
   public R visit(OmpSectionsConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpSectionsClause()
    * f1 -> ( ( "," )? OmpSectionsClause() )*
    */
   public R visit(OmpSectionsClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpLastPrivateClause()
    *       | OmpReductionClause()
    *       | OmpNowaitClause()
    */
   public R visit(OmpSectionsClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )?
    * f2 -> ( ASection() )*
    * f3 -> "}"
    */
   public R visit(SectionsScope n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <SECTION>
    * f2 -> OmpEol()
    * f3 -> Statement()
    */
   public R visit(ASection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <SINGLE>
    * f2 -> ( OmpSingleClauseList() )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpSingleConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpSingleClause()
    * f1 -> ( OmpSingleClause() )*
    */
   public R visit(OmpSingleClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpCopyPrivateClause()
    *       | OmpNowaitClause()
    */
   public R visit(OmpSingleClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <COPYPRIVATE>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpCopyPrivateClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <SIMD>
    * f2 -> ( OmpSimdClauseList() )?
    * f3 -> OmpEol()
    * f4 -> OmpForHeader()
    * f5 -> Statement()
    */
   public R visit(OmpSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpSimdClause()
    * f1 -> ( ( "," )? OmpSimdClause() )*
    */
   public R visit(OmpSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpSafeLenClause()
    *       | OmpSimdLenClause()
    *       | OmpLinearClause()
    *       | OmpAlignedClause()
    *       | OmpPrivateClause()
    *       | OmpLastPrivateClause()
    *       | OmpReductionClause()
    *       | OmpCollapseClause()
    */
   public R visit(OmpSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SAFELEN>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpSafeLenClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SIMDLEN>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpSimdLenClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ALIGNED>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ( <COLON> Expression() )?
    * f4 -> ")"
    */
   public R visit(OmpAlignedClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <FOR>
    * f2 -> <SIMD>
    * f3 -> ( OmpForSimdClauseList() )?
    * f4 -> OmpEol()
    * f5 -> OmpForHeader()
    * f6 -> Statement()
    */
   public R visit(OmpForSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpForSimdClause()
    * f1 -> ( ( "," )? OmpForSimdClause() )*
    */
   public R visit(OmpForSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpSimdClause()
    *       | OmpForClause()
    */
   public R visit(OmpForSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TASK>
    * f2 -> ( TaskClauseList() )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpTaskConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> TaskClause()
    * f1 -> ( ( "," )? TaskClause() )*
    */
   public R visit(TaskClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfTaskClause()
    *       | OmpFinalClause()
    *       | OmpUntiedClause()
    *       | OmpDfltSharedClause()
    *       | OmpDfltNoneClause()
    *       | OmpMergeableClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpSharedClause()
    *       | OmpDependClause()
    *       | OmpPriorityClause()
    */
   public R visit(TaskClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> ( <TASK> <COLON> )?
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(OmpIfTaskClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FINAL>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpFinalClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <UNTIED>
    */
   public R visit(OmpUntiedClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <MERGEABLE>
    */
   public R visit(OmpMergeableClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DEPEND>
    * f1 -> "("
    * f2 -> DependencyType()
    * f3 -> <COLON>
    * f4 -> VariableList()
    * f5 -> ")"
    */
   public R visit(OmpDependClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IN>
    *       | <OUT>
    *       | <INOUT>
    */
   public R visit(DependencyType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <PRIORITY>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpPriorityClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TASKLOOP>
    * f2 -> <SIMD>
    * f3 -> ( OmpTaskLoopSimdClauseList() )?
    * f4 -> OmpEol()
    * f5 -> OmpForHeader()
    * f6 -> Statement()
    */
   public R visit(OmpTaskLoopSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTaskLoopSimdClause()
    * f1 -> ( ( "," )? OmpTaskLoopSimdClause() )*
    */
   public R visit(OmpTaskLoopSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpSimdClause()
    *       | OmpTaskLoopClause()
    */
   public R visit(OmpTaskLoopSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TASKLOOP>
    * f2 -> ( OmpTaskLoopClauseList() )?
    * f3 -> OmpEol()
    * f4 -> OmpForHeader()
    * f5 -> Statement()
    */
   public R visit(OmpTaskLoopConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTaskLoopClause()
    * f1 -> ( ( "," )? OmpTaskLoopClause() )*
    */
   public R visit(OmpTaskLoopClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfTaskLoopClause()
    *       | OmpSharedClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpLastPrivateClause()
    *       | OmpDfltSharedClause()
    *       | OmpDfltNoneClause()
    *       | OmpGrainSizeClause()
    *       | OmpNumTasksClause()
    *       | OmpCollapseClause()
    *       | OmpFinalClause()
    *       | OmpPriorityClause()
    *       | OmpUntiedClause()
    *       | OmpMergeableClause()
    *       | OmpNoGroupClause()
    */
   public R visit(OmpTaskLoopClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> ( <TASKLOOP> <COLON> )?
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(OmpIfTaskLoopClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <GRAINSIZE>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpGrainSizeClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NUMTASKS>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpNumTasksClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NOGROUP>
    */
   public R visit(OmpNoGroupClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <DATA>
    * f3 -> ( OmpTargetDataClauseList() )?
    * f4 -> OmpEol()
    * f5 -> Statement()
    */
   public R visit(OmpTargetDataConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetDataClause()
    * f1 -> ( ( "," )? OmpTargetDataClause() )*
    */
   public R visit(OmpTargetDataClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfTargetDataClause()
    *       | OmpDeviceClause()
    *       | OmpMapClause()
    *       | OmpUseDevicePtrClause()
    */
   public R visit(OmpTargetDataClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> <TARGET>
    * f3 -> <DATA>
    * f4 -> Expression()
    * f5 -> ")"
    */
   public R visit(OmpIfTargetDataClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> <USEDEVICEPTR>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpUseDevicePtrClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <PARALLEL>
    * f3 -> <FOR>
    * f4 -> <SIMD>
    * f5 -> ( OmpTargetParallelForSimdClauseList() )?
    * f6 -> OmpEol()
    * f7 -> OmpForHeader()
    * f8 -> Statement()
    */
   public R visit(OmpTargetParallelForSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetParallelForSimdClause()
    * f1 -> ( ( "," )? OmpTargetParallelForSimdClause() )*
    */
   public R visit(OmpTargetParallelForSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpSimdClause()
    *       | OmpIfParallelClause()
    *       | OmpNumThreadsClause()
    *       | OmpDfltSharedClause()
    *       | OmpDfltNoneClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpSharedClause()
    *       | OmpReductionClause()
    *       | OmpThreadAffinityMasterClause()
    *       | OmpThreadAffinityCloseClause()
    *       | OmpThreadAffinitySpreadClause()
    *       | OmpLastPrivateClause()
    *       | OmpLinearClause()
    *       | OmpScheduleClause()
    *       | OmpCollapseClause()
    *       | OmpOrderedClause()
    */
   public R visit(OmpTargetParallelForSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <PARALLEL>
    * f3 -> <FOR>
    * f4 -> ( OmpTargetParallelForClauseList() )?
    * f5 -> OmpEol()
    * f6 -> OmpForHeader()
    * f7 -> Statement()
    */
   public R visit(OmpTargetParallelForConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetParallelForClause()
    * f1 -> ( ( "," )? OmpTargetParallelForClause() )*
    */
   public R visit(OmpTargetParallelForClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpIfParallelClause()
    *       | OmpNumThreadsClause()
    *       | OmpDfltSharedClause()
    *       | OmpDfltNoneClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpSharedClause()
    *       | OmpReductionClause()
    *       | OmpThreadAffinityMasterClause()
    *       | OmpThreadAffinityCloseClause()
    *       | OmpThreadAffinitySpreadClause()
    *       | OmpLastPrivateClause()
    *       | OmpLinearClause()
    *       | OmpScheduleClause()
    *       | OmpCollapseClause()
    *       | OmpOrderedClause()
    */
   public R visit(OmpTargetParallelForClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <PARALLEL>
    * f3 -> ( OmpTargetParallelClauseList() )?
    * f4 -> OmpEol()
    * f5 -> Statement()
    */
   public R visit(OmpTargetParallelConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetParallelClause()
    * f1 -> ( ( "," )? OmpTargetParallelClause() )*
    */
   public R visit(OmpTargetParallelClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpIfParallelClause()
    *       | OmpNumThreadsClause()
    *       | OmpDfltSharedClause()
    *       | OmpDfltNoneClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpSharedClause()
    *       | OmpReductionClause()
    *       | OmpThreadAffinityMasterClause()
    *       | OmpThreadAffinityCloseClause()
    *       | OmpThreadAffinitySpreadClause()
    */
   public R visit(OmpTargetParallelClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <SIMD>
    * f3 -> ( OmpTargetSimdClauseList() )?
    * f4 -> OmpEol()
    * f5 -> OmpForHeader()
    * f6 -> Statement()
    */
   public R visit(OmpTargetSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetSimdClause()
    * f1 -> ( ( "," )? OmpTargetSimdClause() )*
    */
   public R visit(OmpTargetSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpSimdClause()
    */
   public R visit(OmpTargetSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TEAMS>
    * f2 -> <DISTRIBUTE>
    * f3 -> <PARALLEL>
    * f4 -> <FOR>
    * f5 -> <SIMD>
    * f6 -> ( OmpTargetTeamsDistributeParallelForSimdClauseList() )?
    * f7 -> OmpEol()
    * f8 -> OmpForHeader()
    * f9 -> Statement()
    */
   public R visit(OmpTargetTeamsDistributeParallelForSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetTeamsDistributeParallelForSimdClause()
    * f1 -> ( ( "," )? OmpTargetTeamsDistributeParallelForSimdClause() )*
    */
   public R visit(OmpTargetTeamsDistributeParallelForSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpTeamsDistributeParallelForSimdClause()
    */
   public R visit(OmpTargetTeamsDistributeParallelForSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <TEAMS>
    * f3 -> <DISTRIBUTE>
    * f4 -> <PARALLEL>
    * f5 -> <FOR>
    * f6 -> ( OmpTargetTeamsDistributeParallelForClauseList() )?
    * f7 -> OmpEol()
    * f8 -> OmpForHeader()
    * f9 -> Statement()
    */
   public R visit(OmpTargetTeamsDistributeParallelForConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetTeamsDistributeParallelForClause()
    * f1 -> ( ( "," )? OmpTargetTeamsDistributeParallelForClause() )*
    */
   public R visit(OmpTargetTeamsDistributeParallelForClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpTeamsDistributeParallelForClause()
    */
   public R visit(OmpTargetTeamsDistributeParallelForClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <TEAMS>
    * f3 -> <DISTRIBUTE>
    * f4 -> <SIMD>
    * f5 -> ( OmpTargetTeamsDistributeSimdClauseList() )?
    * f6 -> OmpEol()
    * f7 -> OmpForHeader()
    * f8 -> Statement()
    */
   public R visit(OmpTargetTeamsDistributeSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetTeamsDistributeSimdClause()
    * f1 -> ( ( "," )? OmpTargetTeamsDistributeSimdClause() )*
    */
   public R visit(OmpTargetTeamsDistributeSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpTeamsDistributeSimdClause()
    */
   public R visit(OmpTargetTeamsDistributeSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <TEAMS>
    * f3 -> <DISTRIBUTE>
    * f4 -> ( OmpTargetTeamsDistributeClauseList() )?
    * f5 -> OmpEol()
    * f6 -> OmpForHeader()
    * f7 -> Statement()
    */
   public R visit(OmpTargetTeamsDistributeConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetTeamsDistributeClause()
    * f1 -> ( ( "," )? OmpTargetTeamsDistributeClause() )*
    */
   public R visit(OmpTargetTeamsDistributeClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpTeamsDistributeClause()
    */
   public R visit(OmpTargetTeamsDistributeClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <TEAMS>
    * f3 -> ( OmpTargetTeamsClauseList() )?
    * f4 -> OmpEol()
    * f5 -> Statement()
    */
   public R visit(OmpTargetTeamsConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetTeamsClause()
    * f1 -> ( ( "," )? OmpTargetTeamsClause() )*
    */
   public R visit(OmpTargetTeamsClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    *       | OmpTeamsClause()
    */
   public R visit(OmpTargetTeamsClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> ( OmpTargetClauseList() )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpTargetConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetClause()
    * f1 -> ( ( "," )? OmpTargetClause() )*
    */
   public R visit(OmpTargetClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfTargetClause()
    *       | OmpDeviceClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpMapClause()
    *       | OmpIsDevicePtrListClause()
    *       | OmpDefaultMapClause()
    *       | OmpNowaitClause()
    *       | OmpDependClause()
    */
   public R visit(OmpTargetClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> ( <TARGET> <COLON> )?
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(OmpIfTargetClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ISDEVICEPTR>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpIsDevicePtrListClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DEFAULTMAP>
    * f1 -> "("
    * f2 -> <TOFROM>
    * f3 -> <COLON>
    * f4 -> <SCALAR>
    * f5 -> ")"
    */
   public R visit(OmpDefaultMapClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TEAMS>
    * f2 -> <DISTRIBUTE>
    * f3 -> <PARALLEL>
    * f4 -> <FOR>
    * f5 -> <SIMD>
    * f6 -> ( OmpTeamsDistributeParallelForSimdClauseList() )?
    * f7 -> OmpEol()
    * f8 -> OmpForHeader()
    * f9 -> Statement()
    */
   public R visit(OmpTeamsDistributeParallelForSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsDistributeParallelForSimdClause()
    * f1 -> ( ( "," )? OmpTeamsDistributeParallelForSimdClause() )*
    */
   public R visit(OmpTeamsDistributeParallelForSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsClause()
    *       | OmpDistributeParallelForSimdClause()
    */
   public R visit(OmpTeamsDistributeParallelForSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TEAMS>
    * f2 -> <DISTRIBUTE>
    * f3 -> <PARALLEL>
    * f4 -> <FOR>
    * f5 -> ( OmpTeamsDistributeParallelForClauseList() )?
    * f6 -> OmpEol()
    * f7 -> OmpForHeader()
    * f8 -> Statement()
    */
   public R visit(OmpTeamsDistributeParallelForConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsDistributeParallelForClause()
    * f1 -> ( ( "," )? OmpTeamsDistributeParallelForClause() )*
    */
   public R visit(OmpTeamsDistributeParallelForClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsClause()
    *       | OmpDistributeParallelForClause()
    */
   public R visit(OmpTeamsDistributeParallelForClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TEAMS>
    * f2 -> <DISTRIBUTE>
    * f3 -> <SIMD>
    * f4 -> ( OmpTeamsDistributeSimdClauseList() )?
    * f5 -> OmpEol()
    * f6 -> OmpForHeader()
    * f7 -> Statement()
    */
   public R visit(OmpTeamsDistributeSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsDistributeSimdClause()
    * f1 -> ( ( "," )? OmpTeamsDistributeSimdClause() )*
    */
   public R visit(OmpTeamsDistributeSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsClause()
    *       | OmpDistributeSimdClause()
    */
   public R visit(OmpTeamsDistributeSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TEAMS>
    * f2 -> <DISTRIBUTE>
    * f3 -> ( OmpTeamsDistributeClauseList() )?
    * f4 -> OmpEol()
    * f5 -> OmpForHeader()
    * f6 -> Statement()
    */
   public R visit(OmpTeamsDistributeConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsDistributeClause()
    * f1 -> ( ( "," )? OmpTeamsDistributeClause() )*
    */
   public R visit(OmpTeamsDistributeClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsClause()
    *       | OmpDistributeClause()
    */
   public R visit(OmpTeamsDistributeClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TEAMS>
    * f2 -> ( OmpTeamsClauseList() )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpTeamsConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTeamsClause()
    * f1 -> ( ( "," )? OmpTeamsClause() )*
    */
   public R visit(OmpTeamsClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpNumTeamsClause()
    *       | OmpThreadLimitClause()
    *       | OmpDfltSharedClause()
    *       | OmpDfltNoneClause()
    *       | OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpSharedClause()
    *       | OmpReductionClause()
    */
   public R visit(OmpTeamsClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NUMTEAMS>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpNumTeamsClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <THREADLIMIT>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpThreadLimitClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DISTRIBUTE>
    * f2 -> <SIMD>
    * f3 -> ( OmpDistributeSimdClauseList() )?
    * f4 -> OmpEol()
    * f5 -> OmpForHeader()
    * f6 -> Statement()
    */
   public R visit(OmpDistributeSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDistributeSimdClause()
    * f1 -> ( ( "," )? OmpDistributeSimdClause() )*
    */
   public R visit(OmpDistributeSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDistributeClause()
    *       | OmpSimdClause()
    */
   public R visit(OmpDistributeSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DISTRIBUTE>
    * f2 -> <PARALLEL>
    * f3 -> <FOR>
    * f4 -> <SIMD>
    * f5 -> ( OmpDistributeParallelForSimdClauseList() )?
    * f6 -> OmpEol()
    * f7 -> OmpForHeader()
    * f8 -> Statement()
    */
   public R visit(OmpDistributeParallelForSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDistributeParallelForSimdClause()
    * f1 -> ( ( "," )? OmpDistributeParallelForSimdClause() )*
    */
   public R visit(OmpDistributeParallelForSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDistributeClause()
    *       | OmpParallelForSimdClause()
    */
   public R visit(OmpDistributeParallelForSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DISTRIBUTE>
    * f2 -> <PARALLEL>
    * f3 -> <FOR>
    * f4 -> ( OmpDistributeParallelForClauseList() )?
    * f5 -> OmpEol()
    * f6 -> OmpForHeader()
    * f7 -> Statement()
    */
   public R visit(OmpDistributeParallelForConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDistributeParallelForClause()
    * f1 -> ( ( "," )? OmpDistributeParallelForClause() )*
    */
   public R visit(OmpDistributeParallelForClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDistributeClause()
    *       | OmpParallelForClause()
    */
   public R visit(OmpDistributeParallelForClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DISTRIBUTE>
    * f2 -> ( OmpDistributeClauseList() )?
    * f3 -> OmpEol()
    * f4 -> OmpForHeader()
    * f5 -> Statement()
    */
   public R visit(OmpDistributeConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDistributeClause()
    * f1 -> ( ( "," )? OmpDistributeClause() )*
    */
   public R visit(OmpDistributeClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPrivateClause()
    *       | OmpFirstPrivateClause()
    *       | OmpLastPrivateClause()
    *       | OmpCollapseClause()
    *       | OmpDistScheduleClause()
    */
   public R visit(OmpDistributeClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DISTSCHEDULE>
    * f1 -> "("
    * f2 -> ScheduleKind()
    * f3 -> ( "," Expression() )?
    * f4 -> ")"
    */
   public R visit(OmpDistScheduleClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <PARALLEL>
    * f2 -> <FOR>
    * f3 -> <SIMD>
    * f4 -> ( OmpParallelForSimdClauseList() )?
    * f5 -> OmpEol()
    * f6 -> OmpForHeader()
    * f7 -> Statement()
    */
   public R visit(OmpParallelForSimdConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpParallelForSimdClause()
    * f1 -> ( ( "," )? OmpParallelForSimdClause() )*
    */
   public R visit(OmpParallelForSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpParallelClause()
    *       | OmpSimdClause()
    *       | OmpLastPrivateClause()
    *       | OmpLinearClause()
    *       | OmpScheduleClause()
    *       | OmpCollapseClause()
    *       | OmpOrderedClause()
    */
   public R visit(OmpParallelForSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <PARALLEL>
    * f2 -> <FOR>
    * f3 -> ( OmpParallelForClauseList() )?
    * f4 -> OmpEol()
    * f5 -> OmpForHeader()
    * f6 -> Statement()
    */
   public R visit(OmpParallelForConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpParallelForClause()
    * f1 -> ( ( "," )? OmpParallelForClause() )*
    */
   public R visit(OmpParallelForClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpParallelClause()
    *       | OmpLastPrivateClause()
    *       | OmpLinearClause()
    *       | OmpScheduleClause()
    *       | OmpCollapseClause()
    *       | OmpOrderedClause()
    */
   public R visit(OmpParallelForClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <PARALLEL>
    * f2 -> <SECTIONS>
    * f3 -> ( OmpParallelSectionsClauseList() )?
    * f4 -> OmpEol()
    * f5 -> SectionsScope()
    */
   public R visit(OmpParallelSectionsConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpParallelClause()
    *       | OmpLastPrivateClause()
    */
   public R visit(OmpParallelSectionsClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <MASTER>
    * f2 -> OmpEol()
    * f3 -> Statement()
    */
   public R visit(OmpMasterConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <CRITICAL>
    * f2 -> ( "(" OmpCriticalName() ")" ( <HINT> "(" Expression() ")" )? )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpCriticalConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> <IDENTIFIER>
    * f2 -> ")"
    */
   public R visit(OmpCriticalName n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TASKGROUP>
    * f2 -> OmpEol()
    * f3 -> Statement()
    */
   public R visit(OmpTaskGroupConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpAtomicDefaultConstruct()
    *       | OmpAtomicClauseConstruct()
    */
   public R visit(OmpAtomicConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <ATOMIC>
    * f2 -> ( <SEQCST> ( "," )? )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpAtomicDefaultConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <ATOMIC>
    * f2 -> ( <SEQCST> ( "," )? )?
    * f3 -> AtomicClause()
    * f4 -> ( <SEQCST> ( "," )? )?
    * f5 -> OmpEol()
    * f6 -> Statement()
    */
   public R visit(OmpAtomicClauseConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> <READ>
    *       | <WRITE>
    *       | <UPDATE>
    *       | <CAPTURE>
    */
   public R visit(AtomicClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <ORDERED>
    * f2 -> ( OmpOrderedClauseList() )?
    * f3 -> OmpEol()
    * f4 -> Statement()
    */
   public R visit(OmpOrderedConstruct n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpOrderedConstructClause()
    * f1 -> ( ( "," )? OmpOrderedConstructClause() )*
    */
   public R visit(OmpOrderedClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpThreadsClause()
    *       | OmpSimdOrderedClause()
    *       | OmpDependOrderedSourceClause()
    *       | OmpDependOrderedSinkClause()
    */
   public R visit(OmpOrderedConstructClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <THREADS>
    */
   public R visit(OmpThreadsClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SIMD>
    */
   public R visit(OmpSimdOrderedClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DEPEND>
    * f1 -> "("
    * f2 -> <SOURCE>
    * f3 -> ")"
    */
   public R visit(OmpDependOrderedSourceClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DEPEND>
    * f1 -> "("
    * f2 -> <SINK>
    * f3 -> <COLON>
    * f4 -> OmpIterationVector()
    * f5 -> ")"
    */
   public R visit(OmpDependOrderedSinkClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIterationDimension()
    * f1 -> ( "," OmpIterationDimension() )*
    */
   public R visit(OmpIterationVector n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpForwardDependence()
    *       | OmpBackwardDependence()
    */
   public R visit(OmpIterationDimension n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "+"
    * f2 -> ConstantExpression()
    */
   public R visit(OmpForwardDependence n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> "-"
    * f2 -> ConstantExpression()
    */
   public R visit(OmpBackwardDependence n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TASKYIELD>
    * f2 -> OmpEol()
    */
   public R visit(OmpTaskyieldDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <ENTER>
    * f3 -> <DATA>
    * f4 -> ( OmpTargetEnterDataClauseList() )?
    */
   public R visit(OmpTargetEnterDataDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetEnterDataClause()
    * f1 -> ( ( "," )? OmpTargetEnterDataClause() )*
    */
   public R visit(OmpTargetEnterDataClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfTargetEnterDataClause()
    *       | OmpDeviceClause()
    *       | OmpMapClause()
    *       | OmpDependClause()
    *       | OmpNowaitClause()
    */
   public R visit(OmpTargetEnterDataClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> ( <TARGET> <ENTER> <DATA> <COLON> )?
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(OmpIfTargetEnterDataClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <DEVICE>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpDeviceClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <MAP>
    * f1 -> "("
    * f2 -> ( ( OmpMapTypeModifier() ( "," )? )? OmpMapType() <COLON> )?
    * f3 -> VariableList()
    * f4 -> ")"
    */
   public R visit(OmpMapClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <ALWAYS>
    */
   public R visit(OmpMapTypeModifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <TO>
    *       | <FROM>
    *       | <TOFROM>
    *       | <ALLOC>
    *       | <RELEASE>
    *       | <DELETE>
    */
   public R visit(OmpMapType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <EXIT>
    * f3 -> <DATA>
    * f4 -> ( OmpTargetExitDataClauseList() )?
    */
   public R visit(OmpTargetExitDataDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetExitDataClause()
    * f1 -> ( ( "," )? OmpTargetExitDataClause() )*
    */
   public R visit(OmpTargetExitDataClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfTargetExitDataClause()
    *       | OmpDeviceClause()
    *       | OmpMapClause()
    *       | OmpDependClause()
    *       | OmpNowaitClause()
    */
   public R visit(OmpTargetExitDataClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> ( <TARGET> <EXIT> <DATA> <COLON> )?
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(OmpIfTargetExitDataClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TARGET>
    * f2 -> <UPDATE>
    * f3 -> OmpTargetUpdateClauseList()
    */
   public R visit(OmpTargetUpdateDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpTargetUpdateClause()
    * f1 -> ( ( "," )? OmpTargetUpdateClause() )*
    */
   public R visit(OmpTargetUpdateClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpIfTargetUpdateClause()
    *       | OmpDeviceClause()
    *       | OmpNowaitClause()
    *       | OmpDependClause()
    *       | OmpToClause()
    *       | OmpFromClause()
    */
   public R visit(OmpTargetUpdateClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> ( <TARGET> <UPDATE> <COLON> )?
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(OmpIfTargetUpdateClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <TO>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpToClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FROM>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpFromClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <BARRIER>
    * f2 -> OmpEol()
    */
   public R visit(OmpBarrierDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <TASKWAIT>
    * f2 -> OmpEol()
    */
   public R visit(OmpTaskwaitDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <FLUSH>
    * f2 -> ( "(" VariableList() ")" )?
    * f3 -> OmpEol()
    */
   public R visit(OmpFlushDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <CANCEL>
    * f2 -> OmpConstructTypeClause()
    * f3 -> ( ( "," )? OmpIfClause() )?
    * f4 -> OmpEol()
    */
   public R visit(OmpCancelDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <PARALLEL>
    *       | <SECTIONS>
    *       | <FOR>
    *       | <TASKGROUP>
    */
   public R visit(OmpConstructTypeClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(OmpIfClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <CANCELLATION>
    * f2 -> <POINT>
    * f3 -> OmpConstructTypeClause()
    * f4 -> OmpEol()
    */
   public R visit(OmpCancellationPointDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDeclareTargetExtendedListDirective()
    *       | OmpDeclareTargetListDirective()
    *       | OmpDeclareTargetDirective()
    *       | OmpDeclareSimdDirective()
    *       | OmpThreadPrivateDirective()
    *       | OmpDeclareReductionDirective()
    */
   public R visit(OmpGlobalDirective n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DECLARE>
    * f2 -> <TARGET>
    * f3 -> "("
    * f4 -> VariableList()
    * f5 -> ")"
    */
   public R visit(OmpDeclareTargetExtendedListDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DECLARE>
    * f2 -> <TARGET>
    * f3 -> OmpDeclareTargetClauseList()
    */
   public R visit(OmpDeclareTargetListDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDeclareTargetClause()
    * f1 -> ( ( "," )? OmpDeclareTargetClause() )*
    */
   public R visit(OmpDeclareTargetClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpToClause()
    *       | OmpLinkClause()
    */
   public R visit(OmpDeclareTargetClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <LINK>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpLinkClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DECLARE>
    * f2 -> <TARGET>
    * f3 -> OmpEol()
    * f4 -> ( FunctionDefinitionOrDeclaration() )*
    * f5 -> OmpPragma()
    * f6 -> <END>
    * f7 -> <DECLARE>
    * f8 -> <TARGET>
    */
   public R visit(OmpDeclareTargetDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDeclareSimdPragmaList()
    * f1 -> FunctionDefinitionOrDeclaration()
    */
   public R visit(OmpDeclareSimdDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDeclareSimdPragma()
    * f1 -> ( OmpDeclareSimdPragma() )*
    */
   public R visit(OmpDeclareSimdPragmaList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DECLARE>
    * f2 -> <SIMD>
    * f3 -> ( OmpDeclareSimdClauseList() )?
    */
   public R visit(OmpDeclareSimdPragma n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpDeclareSimdClause()
    * f1 -> ( ( "," )? OmpDeclareSimdClause() )*
    */
   public R visit(OmpDeclareSimdClauseList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpSimdLenClause()
    *       | OmpLinearClause()
    *       | OmpAlignedClause()
    *       | OmpUniformClause()
    *       | OmpInbranchClause()
    *       | OmpNotinbranchClause()
    */
   public R visit(OmpDeclareSimdClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <UNIFORM>
    * f1 -> "("
    * f2 -> VariableList()
    * f3 -> ")"
    */
   public R visit(OmpUniformClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INBRANCH>
    */
   public R visit(OmpInbranchClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <NOTINBRANCH>
    */
   public R visit(OmpNotinbranchClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Declaration()
    *       | FunctionDefinition()
    */
   public R visit(FunctionDefinitionOrDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <THREADPRIVATE>
    * f2 -> "("
    * f3 -> VariableList()
    * f4 -> ")"
    * f5 -> OmpEol()
    */
   public R visit(OmpThreadPrivateDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> OmpPragma()
    * f1 -> <DECLARE>
    * f2 -> <REDUCTION>
    * f3 -> "("
    * f4 -> ReductionOp()
    * f5 -> ":"
    * f6 -> ReductionTypeList()
    * f7 -> ":"
    * f8 -> Expression()
    * f9 -> ")"
    * f10 -> ( InitializerClause() )?
    * f11 -> OmpEol()
    */
   public R visit(OmpDeclareReductionDirective n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( TypeSpecifier() )*
    */
   public R visit(ReductionTypeList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> AssignInitializerClause()
    *       | ArgumentInitializerClause()
    */
   public R visit(InitializerClause n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INITIALIZER>
    * f1 -> "("
    * f2 -> <IDENTIFIER>
    * f3 -> "="
    * f4 -> Initializer()
    * f5 -> ")"
    */
   public R visit(AssignInitializerClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INITIALIZER>
    * f1 -> "("
    * f2 -> <IDENTIFIER>
    * f3 -> "("
    * f4 -> ExpressionList()
    * f5 -> ")"
    * f6 -> ")"
    */
   public R visit(ArgumentInitializerClause n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    *       | "+"
    *       | "*"
    *       | "-"
    *       | "&"
    *       | "^"
    *       | "|"
    *       | "||"
    *       | "&&"
    */
   public R visit(ReductionOp n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ( "," <IDENTIFIER> )*
    */
   public R visit(VariableList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    */
   public R visit(Expression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> NonConditionalExpression()
    *       | ConditionalExpression()
    */
   public R visit(AssignmentExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> UnaryExpression()
    * f1 -> AssignmentOperator()
    * f2 -> AssignmentExpression()
    */
   public R visit(NonConditionalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "="
    *       | "*="
    *       | "/="
    *       | "%="
    *       | "+="
    *       | "-="
    *       | "<<="
    *       | ">>="
    *       | "&="
    *       | "^="
    *       | "|="
    */
   public R visit(AssignmentOperator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> LogicalORExpression()
    * f1 -> ( "?" Expression() ":" ConditionalExpression() )?
    */
   public R visit(ConditionalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ConditionalExpression()
    */
   public R visit(ConstantExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> LogicalANDExpression()
    * f1 -> ( "||" LogicalORExpression() )?
    */
   public R visit(LogicalORExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> InclusiveORExpression()
    * f1 -> ( "&&" LogicalANDExpression() )?
    */
   public R visit(LogicalANDExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ExclusiveORExpression()
    * f1 -> ( "|" InclusiveORExpression() )?
    */
   public R visit(InclusiveORExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ANDExpression()
    * f1 -> ( "^" ExclusiveORExpression() )?
    */
   public R visit(ExclusiveORExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> EqualityExpression()
    * f1 -> ( "&" ANDExpression() )?
    */
   public R visit(ANDExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> RelationalExpression()
    * f1 -> ( EqualOptionalExpression() )?
    */
   public R visit(EqualityExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> EqualExpression()
    *       | NonEqualExpression()
    */
   public R visit(EqualOptionalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "=="
    * f1 -> EqualityExpression()
    */
   public R visit(EqualExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!="
    * f1 -> EqualityExpression()
    */
   public R visit(NonEqualExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ShiftExpression()
    * f1 -> ( RelationalOptionalExpression() )?
    */
   public R visit(RelationalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> RelationalLTExpression()
    *       | RelationalGTExpression()
    *       | RelationalLEExpression()
    *       | RelationalGEExpression()
    */
   public R visit(RelationalOptionalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "<"
    * f1 -> RelationalExpression()
    */
   public R visit(RelationalLTExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ">"
    * f1 -> RelationalExpression()
    */
   public R visit(RelationalGTExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "<="
    * f1 -> RelationalExpression()
    */
   public R visit(RelationalLEExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ">="
    * f1 -> RelationalExpression()
    */
   public R visit(RelationalGEExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> AdditiveExpression()
    * f1 -> ( ShiftOptionalExpression() )?
    */
   public R visit(ShiftExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ShiftLeftExpression()
    *       | ShiftRightExpression()
    */
   public R visit(ShiftOptionalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> ">>"
    * f1 -> ShiftExpression()
    */
   public R visit(ShiftLeftExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "<<"
    * f1 -> ShiftExpression()
    */
   public R visit(ShiftRightExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> MultiplicativeExpression()
    * f1 -> ( AdditiveOptionalExpression() )?
    */
   public R visit(AdditiveExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> AdditivePlusExpression()
    *       | AdditiveMinusExpression()
    */
   public R visit(AdditiveOptionalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "+"
    * f1 -> AdditiveExpression()
    */
   public R visit(AdditivePlusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "-"
    * f1 -> AdditiveExpression()
    */
   public R visit(AdditiveMinusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> CastExpression()
    * f1 -> ( MultiplicativeOptionalExpression() )?
    */
   public R visit(MultiplicativeExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> MultiplicativeMultiExpression()
    *       | MultiplicativeDivExpression()
    *       | MultiplicativeModExpression()
    */
   public R visit(MultiplicativeOptionalExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "*"
    * f1 -> MultiplicativeExpression()
    */
   public R visit(MultiplicativeMultiExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "/"
    * f1 -> MultiplicativeExpression()
    */
   public R visit(MultiplicativeDivExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "%"
    * f1 -> MultiplicativeExpression()
    */
   public R visit(MultiplicativeModExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> CastExpressionTyped()
    *       | UnaryExpression()
    */
   public R visit(CastExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> TypeName()
    * f2 -> ")"
    * f3 -> CastExpression()
    */
   public R visit(CastExpressionTyped n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> UnaryExpressionPreIncrement()
    *       | UnaryExpressionPreDecrement()
    *       | UnarySizeofExpression()
    *       | UnaryCastExpression()
    *       | PostfixExpression()
    */
   public R visit(UnaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "++"
    * f1 -> UnaryExpression()
    */
   public R visit(UnaryExpressionPreIncrement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "--"
    * f1 -> UnaryExpression()
    */
   public R visit(UnaryExpressionPreDecrement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> UnaryOperator()
    * f1 -> CastExpression()
    */
   public R visit(UnaryCastExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> SizeofTypeName()
    *       | SizeofUnaryExpression()
    */
   public R visit(UnarySizeofExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SIZEOF>
    * f1 -> UnaryExpression()
    */
   public R visit(SizeofUnaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SIZEOF>
    * f1 -> "("
    * f2 -> TypeName()
    * f3 -> ")"
    */
   public R visit(SizeofTypeName n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "&"
    *       | "*"
    *       | "+"
    *       | "-"
    *       | "~"
    *       | "!"
    */
   public R visit(UnaryOperator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> PostfixOperationsList()
    */
   public R visit(PostfixExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( APostfixOperation() )*
    */
   public R visit(PostfixOperationsList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> BracketExpression()
    *       | ArgumentList()
    *       | DotId()
    *       | ArrowId()
    *       | PlusPlus()
    *       | MinusMinus()
    */
   public R visit(APostfixOperation n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "++"
    */
   public R visit(PlusPlus n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "--"
    */
   public R visit(MinusMinus n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "["
    * f1 -> Expression()
    * f2 -> "]"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> ( ExpressionList() )?
    * f2 -> ")"
    */
   public R visit(ArgumentList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "."
    * f1 -> <IDENTIFIER>
    */
   public R visit(DotId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "->"
    * f1 -> <IDENTIFIER>
    */
   public R visit(ArrowId n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    *       | Constant()
    *       | ExpressionClosed()
    *       | GenericSelection()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(ExpressionClosed n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    *       | <FLOATING_POINT_LITERAL>
    *       | <CHARACTER_LITERAL>
    *       | ( <STRING_LITERAL> )+
    */
   public R visit(Constant n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <_GENERIC>
    * f1 -> "("
    * f2 -> AssignmentExpression()
    * f3 -> ","
    * f4 -> GenericAssocList()
    * f5 -> ")"
    */
   public R visit(GenericSelection n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> GenericAssociation()
    * f1 -> ( "," GenericAssociation() )*
    */
   public R visit(GenericAssocList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> TypeName() ":" AssignmentExpression()
    *       | <DFLT> ":" AssignmentExpression()
    */
   public R visit(GenericAssociation n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

}
