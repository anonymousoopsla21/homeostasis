//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(CParser)
import java.util.*;
import syntaxtree.*;
import java.util.Vector;


public class CParser 
{
   public Hashtable types = new Hashtable();
   public boolean flag = true;
   public CParser()
   {
      types = new Hashtable();
      types.put("__builtin_va_list",Boolean.TRUE);
      types.put("_Bool",Boolean.TRUE);
      types.put("bool",Boolean.TRUE);
   }
   public Stack typedefParsingStack = new Stack();
   public boolean isType(String type)
   {
      if ( types.get(type) != null )
      {
         return true;
      }
      return false;
   }
   public void addType(String type)
   {
      types.put(type,Boolean.TRUE);
   }
   public void printTypes()
   {
      Enumeration enum1 = types.keys();
      while ( enum1.hasMoreElements() )
      {
         System.out.println(enum1.nextElement());
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CParser)

TOKEN_MGR_DECLS:{
   int attributeMatchingParens;
}


SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
}

<DEFAULT, AfterCrossbar, Pragma, Omp> TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+ (["l", "L"])?>
   | <CHARACTER_LITERAL: "\'" (~["\'", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
   | <STRING_LITERAL: "\"" (~["\"", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
}

<DEFAULT> MORE :
{
   "__attribute__"
      {
         attributeMatchingParens = 0;
      } : AfterAttrib
   | "__asm"
      {
         attributeMatchingParens = 0;
      } : AfterAttrib
   | "__asm__"
      {
         attributeMatchingParens = 0;
      } : AfterAttrib
   | "asm"
      {
         attributeMatchingParens = 0;
      } : AfterAttrib
}

<AfterAttrib> MORE :
{
   "("
      {
         attributeMatchingParens++;
      }
   | ")"
      {
         attributeMatchingParens--;
         if ( attributeMatchingParens == 0 )
            SwitchTo(DEFAULT);
      }
   | <~[]>
}

<DEFAULT, Omp> TOKEN :
{
   <_GENERIC: "_Generic">
   | <STATIC_ASSERT: "_Static_assert">
   | <NORETURN: "_Noreturn">
   | <ALIGNAS: "_Alignas">
   | <RESTRICT: "__restrict">
   | <CONTINUE: "continue">
   | <VOLATILE: "volatile">
   | <REGISTER: "register">
   | <CCONST: "__const">
   | <INLINE: "inline">
   | <CINLINED: "__inline">
   | <CINLINED2: "__inline__">
   | <CSIGNED: "__signed">
   | <CSIGNED2: "__signed__">
   | <UNSIGNED: "unsigned">
   | <TYPEDEF: "typedef">
   | <DFLT: "default">
   | <DOUBLE: "double">
   | <SWITCH: "switch">
   | <RETURN: "return">
   | <EXTERN: "extern">
   | <STRUCT: "struct">
   | <STATIC: "static">
   | <SIGNED: "signed">
   | <WHILE: "while">
   | <BREAK: "break">
   | <UNION: "union">
   | <CONST: "const">
   | <FLOAT: "float">
   | <SHORT: "short">
   | <ELSE: "else">
   | <CASE: "case">
   | <LONG: "long">
   | <ENUM: "enum">
   | <AUTO: "auto">
   | <VOID: "void">
   | <CHAR: "char">
   | <GOTO: "goto">
   | <FOR: "for">
   | <INT: "int">
   | <IF: "if">
   | <DO: "do">
   | <SIZEOF: "sizeof">
}

<DEFAULT, AfterCrossbar, Pragma, Omp> TOKEN :
{
   <ELLIPSIS: "...">
   | <OP_SLASS: "<<=">
   | <OP_SRASS: ">>=">
   | <OP_EQ: "==">
   | <OP_AND: "&&">
   | <OP_OR: "||">
   | <OP_MULASS: "*=">
   | <OP_DIVASS: "/=">
   | <OP_MODASS: "%=">
   | <OP_ADDASS: "+=">
   | <OP_SUBASS: "-=">
   | <OP_ANDASS: "&=">
   | <OP_XORASS: "^=">
   | <OP_ORASS: "|=">
   | <OP_SL: "<<">
   | <OP_SR: ">>">
   | <OP_NEQ: "!=">
   | <OP_GE: ">=">
   | <OP_LE: "<=">
   | <OP_DEREF: "->">
   | <OP_INCR: "++">
   | <OP_DECR: "--">
   | <OP_GT: ">">
   | <OP_LT: "<">
   | <OP_ADD: "+">
   | <OP_SUB: "-">
   | <OP_MUL: "*">
   | <OP_DIV: "/">
   | <OP_MOD: "%">
   | <OP_ASS: "=">
   | <OP_BITAND: "&">
   | <OP_BITOR: "|">
   | <OP_BITXOR: "^">
   | <OP_NOT: "!">
   | <OP_BITNOT: "~">
   | <COLON: ":">
   | <SEMICOLON: ";">
   | <QUESTION: "?">
   | <DOT: ".">
   | <LEFTPAREN: "(">
   | <RIGHTPAREN: ")">
   | <LEFTBRACKET: "[">
   | <RIGHTBRACKET: "]">
   | <LEFTBRACE: "{">
   | <RIGHTBRACE: "}">
   | <COMMA: ",">
}

TOKEN :
{
   <CROSSBAR: "#"> : AfterCrossbar
}

<AfterCrossbar, Cpp> TOKEN :
{
   <UNKNOWN_CPP: ("\r" | "\n")+> : DEFAULT
}

<AfterCrossbar> TOKEN :
{
   <PRAGMA: "pragma"> : Pragma
}

<AfterCrossbar> MORE :
{
   "include" : Cpp
   | "import" : Cpp
   | "define" : Cpp
   | "ifndef" : Cpp
   | "ident" : Cpp
   | "undef" : Cpp
   | "ifdef" : Cpp
   | "endif" : Cpp
   | "line" : Cpp
   | "else" : Cpp
   | "if" : Cpp
   | "elif" : Cpp
}

<Cpp> SKIP :
{
   <"\\" (("\r" ["\n"]) | "\n")>
}

<Cpp> MORE :
{
   <~[]>
}

<Pragma, Omp> SKIP :
{
   " "
   | "\t"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
}

<Pragma> SKIP :
{
   "\n" : DEFAULT
   | "\r" : DEFAULT
}

<Omp> TOKEN :
{
   <OMP_NL: "\n"> : DEFAULT
   | <OMP_CR: "\r"> : DEFAULT
}

<AfterCrossbar> SKIP :
{
   " "
   | "\t"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
}

<Pragma> TOKEN :
{
   <OMP: "omp"> : Omp
}

<Pragma> MORE :
{
   <~[]> : Cpp
}

<Omp> TOKEN :
{
   <PARALLEL: "parallel">
   | <SECTIONS: "sections">
   | <SECTION: "section">
   | <SINGLE: "single">
   | <ORDERED: "ordered">
   | <MASTER: "master">
   | <CRITICAL: "critical">
   | <ATOMIC: "atomic">
   | <BARRIER: "barrier">
   | <FLUSH: "flush">
   | <NOWAIT: "nowait">
   | <SCHEDULE: "schedule">
   | <DYNAMIC: "dynamic">
   | <GUIDED: "guided">
   | <RUNTIME: "runtime">
   | <NONE: "none">
   | <REDUCTION: "reduction">
   | <PRIVATE: "private">
   | <FIRSTPRIVATE: "firstprivate">
   | <LASTPRIVATE: "lastprivate">
   | <COPYPRIVATE: "copyprivate">
   | <SHARED: "shared">
   | <COPYIN: "copyin">
   | <THREADPRIVATE: "threadprivate">
   | <NUM_THREADS: "num_threads">
   | <COLLAPSE: "collapse">
   | <READ: "read">
   | <WRITE: "write">
   | <UPDATE: "update">
   | <CAPTURE: "capture">
   | <TASK: "task">
   | <TASKWAIT: "taskwait">
   | <DECLARE: "declare">
   | <TASKYIELD: "taskyield">
   | <UNTIED: "untied">
   | <MERGEABLE: "mergeable">
   | <INITIALIZER: "initializer">
   | <FINAL: "final">
   | <PROC_BIND: "proc_bind">
   | <CLOSE: "close">
   | <SPREAD: "spread">
   | <LINEAR: "linear">
   | <MONOTONIC: "monotonic">
   | <NONMONOTONIC: "nonmonotonic">
   | <SIMD: "simd">
   | <SAFELEN: "safelen">
   | <SIMDLEN: "simdlen">
   | <ALIGNED: "aligned">
   | <UNIFORM: "uniform">
   | <INBRANCH: "inbranch">
   | <NOTINBRANCH: "notinbranch">
   | <DEPEND: "depend">
   | <PRIORITY: "priority">
   | <IN: "in">
   | <OUT: "out">
   | <INOUT: "inout">
   | <TASKLOOP: "taskloop">
   | <GRAINSIZE: "grainsize">
   | <NUMTASKS: "num_tasks">
   | <NOGROUP: "nogroup">
   | <TARGET: "target">
   | <DATA: "data">
   | <DEVICE: "device">
   | <MAP: "map">
   | <TO: "to">
   | <FROM: "from">
   | <TOFROM: "tofrom">
   | <ALLOC: "alloc">
   | <RELEASE: "release">
   | <DELETE: "delete">
   | <ALWAYS: "always">
   | <USEDEVICEPTR: "use_device_ptr">
   | <ISDEVICEPTR: "is_device_ptr">
   | <ENTER: "enter">
   | <EXIT: "exit">
   | <DEFAULTMAP: "defaultmap">
   | <SCALAR: "scalar">
   | <END: "end">
   | <LINK: "link">
   | <TEAMS: "teams">
   | <NUMTEAMS: "num_teams">
   | <THREADLIMIT: "thread_limit">
   | <DISTRIBUTE: "distribute">
   | <DISTSCHEDULE: "dist_schedule">
   | <HINT: "hint">
   | <SEQCST: "seq_cst">
   | <THREADS: "threads">
   | <SOURCE: "source">
   | <SINK: "sink">
   | <TASKGROUP: "taskgroup">
   | <CANCEL: "cancel">
   | <CANCELLATION: "cancellation">
   | <POINT: "point">
}

<DEFAULT, AfterCrossbar, Omp> TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z"]>
   | <#DIGIT: ["0"-"9"]>
}

TranslationUnit TranslationUnit() :
{
   NodeList n0 = new NodeList();
   ElementsOfTranslation n1;

   
}
{
   (
      n1=ElementsOfTranslation()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new TranslationUnit(n0); }
}

ElementsOfTranslation ElementsOfTranslation() :
{
   NodeChoice n0;
   ExternalDeclaration n1;
   UnknownCpp n2;
   UnknownPragma n3;

   
}
{
   (
      LOOKAHEAD(4)
      n1=ExternalDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n2=UnknownCpp()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=UnknownPragma()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ElementsOfTranslation(n0); }
}

ExternalDeclaration ExternalDeclaration() :
{
   NodeChoice n0;
   Declaration n1;
   FunctionDefinition n2;
   OmpGlobalDirective n3;

   
}
{
   (
      LOOKAHEAD(Declaration())
      n1=Declaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=FunctionDefinition()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpGlobalDirective()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ExternalDeclaration(n0); }
}

FunctionDefinition FunctionDefinition() :
{
   NodeOptional n0 = new NodeOptional();
   DeclarationSpecifiers n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationList n4;
   CompoundStatement n5;

   
}
{
   (
      LOOKAHEAD(DeclarationSpecifiers())
      n1=DeclarationSpecifiers()
      { n0.addNode(n1); }
   )?
   n2=Declarator()
   (
      n4=DeclarationList()
      { n3.addNode(n4); }
   )?
   n5=CompoundStatement()
   
   { return new FunctionDefinition(n0,n2,n3,n5); }
}

Declaration Declaration() :
{
   NodeChoice n0;
   NodeSequence n1;
   DeclarationSpecifiers n2;
   NodeOptional n3 = new NodeOptional();
   InitDeclaratorList n4;
   NodeToken n5;
   Token n6;
   StaticAssertDeclaration n7;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=DeclarationSpecifiers()
      { n1.addNode(n2); }
      (
         n4=InitDeclaratorList()
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n7=StaticAssertDeclaration()
      { n0 = new NodeChoice(n7, 1); }
   )
   
   { return new Declaration(n0); }
}

StaticAssertDeclaration StaticAssertDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ConstantExpression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<STATIC_ASSERT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ConstantExpression()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<STRING_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new StaticAssertDeclaration(n0,n2,n4,n5,n7,n9); }
}

DeclarationList DeclarationList() :
{
   NodeList n0 = new NodeList();
   Declaration n1;

   
}
{
   (
      LOOKAHEAD(Declaration())
      n1=Declaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new DeclarationList(n0); }
}

DeclarationSpecifiers DeclarationSpecifiers() :
{
   NodeList n0 = new NodeList();
   ADeclarationSpecifier n1;

   
}
{
   (
      n1=ADeclarationSpecifier()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new DeclarationSpecifiers(n0); }
}

ADeclarationSpecifier ADeclarationSpecifier() :
{
   NodeChoice n0;
   StorageClassSpecifier n1;
   TypeSpecifier n2;
   TypeQualifier n3;
   FunctionSpecifier n4;
   AlignmentSpecifier n5;

   
}
{
   (
      n1=StorageClassSpecifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TypeSpecifier()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=TypeQualifier()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=FunctionSpecifier()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=AlignmentSpecifier()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new ADeclarationSpecifier(n0); }
}

FunctionSpecifier FunctionSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<INLINE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<NORETURN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new FunctionSpecifier(n0); }
}

AlignmentSpecifier AlignmentSpecifier() :
{
   NodeChoice n0;
   AlignAsTypeName n1;
   AlignAsConstantExpression n2;

   
}
{
   (
      LOOKAHEAD(AlignAsTypeName())
      n1=AlignAsTypeName()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AlignAsConstantExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new AlignmentSpecifier(n0); }
}

AlignAsTypeName AlignAsTypeName() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TypeName n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<ALIGNAS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TypeName()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AlignAsTypeName(n0,n2,n4,n5); }
}

AlignAsConstantExpression AlignAsConstantExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ConstantExpression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<ALIGNAS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ConstantExpression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AlignAsConstantExpression(n0,n2,n4,n5); }
}

StorageClassSpecifier StorageClassSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<AUTO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<REGISTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<STATIC> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<EXTERN> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<TYPEDEF> { n9 = JTBToolkit.makeNodeToken(n10); }
      
      {
         flag = true;
         typedefParsingStack.push(Boolean.TRUE);
      }
      
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new StorageClassSpecifier(n0); }
}

TypeSpecifier TypeSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   StructOrUnionSpecifier n19;
   EnumSpecifier n20;
   TypedefName n21;

   
}
{
   (
      (
         n2=<VOID> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<SHORT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<INT> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<LONG> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<FLOAT> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<DOUBLE> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<SIGNED> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<UNSIGNED> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n19=StructOrUnionSpecifier()
         { n0 = new NodeChoice(n19, 9); }
      |
         n20=EnumSpecifier()
         { n0 = new NodeChoice(n20, 10); }
      |
         LOOKAHEAD({ (!typedefParsingStack.empty() && ((Boolean)typedefParsingStack.peek()).booleanValue()&& flag == true) || ((typedefParsingStack.empty() || !((Boolean)typedefParsingStack.peek()).booleanValue()) && isType(getToken(1).image)) })
         n21=TypedefName()
         { n0 = new NodeChoice(n21, 11); }
      )
      
   )
   
   {
      if ( (!typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
         flag = false;
   }
   
   
   { return new TypeSpecifier(n0); }
}

TypeQualifier TypeQualifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      n2=<RESTRICT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CONST> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<VOLATILE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<CCONST> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<CSIGNED> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<CSIGNED2> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   )
   
   { return new TypeQualifier(n0); }
}

StructOrUnionSpecifier StructOrUnionSpecifier() :
{
   NodeChoice n0;
   StructOrUnionSpecifierWithList n1;
   StructOrUnionSpecifierWithId n2;

   
}
{
   
   {
      typedefParsingStack.push(Boolean.FALSE);
   }
   
   (
      (
         LOOKAHEAD(4)
         n1=StructOrUnionSpecifierWithList()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=StructOrUnionSpecifierWithId()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   {
      typedefParsingStack.pop();
   }
   
   
   { return new StructOrUnionSpecifier(n0); }
}

StructOrUnionSpecifierWithList StructOrUnionSpecifierWithList() :
{
   StructOrUnion n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   StructDeclarationList n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=StructOrUnion()
   (
      n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   n5="{" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=StructDeclarationList()
   n8="}" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new StructOrUnionSpecifierWithList(n0,n1,n4,n6,n7); }
}

StructOrUnionSpecifierWithId StructOrUnionSpecifierWithId() :
{
   StructOrUnion n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=StructOrUnion()
   n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new StructOrUnionSpecifierWithId(n0,n1); }
}

StructOrUnion StructOrUnion() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<STRUCT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<UNION> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new StructOrUnion(n0); }
}

StructDeclarationList StructDeclarationList() :
{
   NodeList n0 = new NodeList();
   StructDeclaration n1;

   
}
{
   (
      n1=StructDeclaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StructDeclarationList(n0); }
}

InitDeclaratorList InitDeclaratorList() :
{
   InitDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitDeclarator n5;

   
}
{
   n0=InitDeclarator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InitDeclarator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   {
      if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
      {
         typedefParsingStack.pop();
      }
   }
   
   
   { return new InitDeclaratorList(n0,n1); }
}

InitDeclarator InitDeclarator() :
{
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Declarator()
   (
      { n2 = new NodeSequence(2); }
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InitDeclarator(n0,n1); }
}

StructDeclaration StructDeclaration() :
{
   SpecifierQualifierList n0;
   StructDeclaratorList n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=SpecifierQualifierList()
   n1=StructDeclaratorList()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new StructDeclaration(n0,n1,n2); }
}

SpecifierQualifierList SpecifierQualifierList() :
{
   NodeList n0 = new NodeList();
   ASpecifierQualifier n1;

   
}
{
   (
      n1=ASpecifierQualifier()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new SpecifierQualifierList(n0); }
}

ASpecifierQualifier ASpecifierQualifier() :
{
   NodeChoice n0;
   TypeSpecifier n1;
   TypeQualifier n2;

   
}
{
   (
      n1=TypeSpecifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TypeQualifier()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ASpecifierQualifier(n0); }
}

StructDeclaratorList StructDeclaratorList() :
{
   StructDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StructDeclarator n5;

   
}
{
   n0=StructDeclarator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=StructDeclarator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new StructDeclaratorList(n0,n1); }
}

StructDeclarator StructDeclarator() :
{
   NodeChoice n0;
   StructDeclaratorWithDeclarator n1;
   StructDeclaratorWithBitField n2;

   
}
{
   (
      n1=StructDeclaratorWithDeclarator()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=StructDeclaratorWithBitField()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new StructDeclarator(n0); }
}

StructDeclaratorWithDeclarator StructDeclaratorWithDeclarator() :
{
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ConstantExpression n5;

   
}
{
   n0=Declarator()
   (
      { n2 = new NodeSequence(2); }
      n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ConstantExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new StructDeclaratorWithDeclarator(n0,n1); }
}

StructDeclaratorWithBitField StructDeclaratorWithBitField() :
{
   NodeToken n0;
   Token n1;
   ConstantExpression n2;

   
}
{
   n1=":" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ConstantExpression()
   
   { return new StructDeclaratorWithBitField(n0,n2); }
}

EnumSpecifier EnumSpecifier() :
{
   NodeChoice n0;
   EnumSpecifierWithList n1;
   EnumSpecifierWithId n2;

   
}
{
   (
      LOOKAHEAD(3)
      n1=EnumSpecifierWithList()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=EnumSpecifierWithId()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new EnumSpecifier(n0); }
}

EnumSpecifierWithList EnumSpecifierWithList() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   EnumeratorList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<ENUM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6="{" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=EnumeratorList()
   n9="}" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new EnumSpecifierWithList(n0,n2,n5,n7,n8); }
}

EnumSpecifierWithId EnumSpecifierWithId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<ENUM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new EnumSpecifierWithId(n0,n2); }
}

EnumeratorList EnumeratorList() :
{
   Enumerator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Enumerator n5;

   
}
{
   n0=Enumerator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Enumerator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new EnumeratorList(n0,n1); }
}

Enumerator Enumerator() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=ConstantExpression()
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Enumerator(n0,n2); }
}

Declarator Declarator() :
{
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectDeclarator n2;

   
}
{
   (
      n1=Pointer()
      { n0.addNode(n1); }
   )?
   n2=DirectDeclarator()
   
   { return new Declarator(n0,n2); }
}

DirectDeclarator DirectDeclarator() :
{
   IdentifierOrDeclarator n0;
   DeclaratorOpList n1;

   
}
{
   n0=IdentifierOrDeclarator()
   n1=DeclaratorOpList()
   
   { return new DirectDeclarator(n0,n1); }
}

DeclaratorOpList DeclaratorOpList() :
{
   NodeListOptional n0 = new NodeListOptional();
   ADeclaratorOp n1;

   
}
{
   (
      n1=ADeclaratorOp()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new DeclaratorOpList(n0); }
}

ADeclaratorOp ADeclaratorOp() :
{
   NodeChoice n0;
   DimensionSize n1;
   ParameterTypeListClosed n2;
   OldParameterListClosed n3;

   
}
{
   (
      n1=DimensionSize()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n2=ParameterTypeListClosed()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OldParameterListClosed()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ADeclaratorOp(n0); }
}

DimensionSize DimensionSize() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ConstantExpression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=ConstantExpression()
      { n2.addNode(n3); }
   )?
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new DimensionSize(n0,n2,n4); }
}

ParameterTypeListClosed ParameterTypeListClosed() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ParameterTypeList n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=ParameterTypeList()
      { n2.addNode(n3); }
   )?
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ParameterTypeListClosed(n0,n2,n4); }
}

OldParameterListClosed OldParameterListClosed() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   OldParameterList n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=OldParameterList()
      { n2.addNode(n3); }
   )?
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new OldParameterListClosed(n0,n2,n4); }
}

IdentifierOrDeclarator IdentifierOrDeclarator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Declarator n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      
      {
         if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
         {
            addType(n2.image);
         }
      }
      
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(3); }
      n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=Declarator()
      { n3.addNode(n6); }
      n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new IdentifierOrDeclarator(n0); }
}

Pointer Pointer() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   TypeQualifierList n6;
   NodeOptional n7 = new NodeOptional();
   Pointer n8;

   
}
{
   (
      (
         n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="^" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n6=TypeQualifierList()
      { n5.addNode(n6); }
   )?
   (
      n8=Pointer()
      { n7.addNode(n8); }
   )?
   
   { return new Pointer(n0,n5,n7); }
}

TypeQualifierList TypeQualifierList() :
{
   NodeList n0 = new NodeList();
   TypeQualifier n1;

   
}
{
   (
      n1=TypeQualifier()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new TypeQualifierList(n0); }
}

ParameterTypeList ParameterTypeList() :
{
   ParameterList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=ParameterList()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6="..." { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ParameterTypeList(n0,n1); }
}

ParameterList ParameterList() :
{
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;

   
}
{
   n0=ParameterDeclaration()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ParameterDeclaration()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ParameterList(n0,n1); }
}

ParameterDeclaration ParameterDeclaration() :
{
   DeclarationSpecifiers n0;
   ParameterAbstraction n1;

   
}
{
   n0=DeclarationSpecifiers()
   n1=ParameterAbstraction()
   
   { return new ParameterDeclaration(n0,n1); }
}

ParameterAbstraction ParameterAbstraction() :
{
   NodeChoice n0;
   Declarator n1;
   AbstractOptionalDeclarator n2;

   
}
{
   (
      LOOKAHEAD(Declarator())
      n1=Declarator()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AbstractOptionalDeclarator()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ParameterAbstraction(n0); }
}

AbstractOptionalDeclarator AbstractOptionalDeclarator() :
{
   NodeOptional n0 = new NodeOptional();
   AbstractDeclarator n1;

   
}
{
   (
      n1=AbstractDeclarator()
      { n0.addNode(n1); }
   )?
   
   { return new AbstractOptionalDeclarator(n0); }
}

OldParameterList OldParameterList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new OldParameterList(n0,n2); }
}

Initializer Initializer() :
{
   NodeChoice n0;
   AssignmentExpression n1;
   ArrayInitializer n2;

   
}
{
   (
      n1=AssignmentExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ArrayInitializer()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Initializer(n0); }
}

ArrayInitializer ArrayInitializer() :
{
   NodeToken n0;
   Token n1;
   InitializerList n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=InitializerList()
   (
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new ArrayInitializer(n0,n2,n3,n6); }
}

InitializerList InitializerList() :
{
   Initializer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Initializer()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new InitializerList(n0,n1); }
}

TypeName TypeName() :
{
   SpecifierQualifierList n0;
   NodeOptional n1 = new NodeOptional();
   AbstractDeclarator n2;

   
}
{
   n0=SpecifierQualifierList()
   (
      n2=AbstractDeclarator()
      { n1.addNode(n2); }
   )?
   
   { return new TypeName(n0,n1); }
}

AbstractDeclarator AbstractDeclarator() :
{
   NodeChoice n0;
   AbstractDeclaratorWithPointer n1;
   DirectAbstractDeclarator n2;

   
}
{
   (
      LOOKAHEAD(3)
      n1=AbstractDeclaratorWithPointer()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DirectAbstractDeclarator()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new AbstractDeclarator(n0); }
}

AbstractDeclaratorWithPointer AbstractDeclaratorWithPointer() :
{
   Pointer n0;
   NodeOptional n1 = new NodeOptional();
   DirectAbstractDeclarator n2;

   
}
{
   n0=Pointer()
   (
      n2=DirectAbstractDeclarator()
      { n1.addNode(n2); }
   )?
   
   { return new AbstractDeclaratorWithPointer(n0,n1); }
}

DirectAbstractDeclarator DirectAbstractDeclarator() :
{
   AbstractDimensionOrParameter n0;
   DimensionOrParameterList n1;

   
}
{
   n0=AbstractDimensionOrParameter()
   n1=DimensionOrParameterList()
   
   { return new DirectAbstractDeclarator(n0,n1); }
}

AbstractDimensionOrParameter AbstractDimensionOrParameter() :
{
   NodeChoice n0;
   AbstractDeclaratorClosed n1;
   DimensionSize n2;
   ParameterTypeListClosed n3;

   
}
{
   (
      LOOKAHEAD(3)
      n1=AbstractDeclaratorClosed()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DimensionSize()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ParameterTypeListClosed()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new AbstractDimensionOrParameter(n0); }
}

AbstractDeclaratorClosed AbstractDeclaratorClosed() :
{
   NodeToken n0;
   Token n1;
   AbstractDeclarator n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AbstractDeclarator()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new AbstractDeclaratorClosed(n0,n2,n3); }
}

DimensionOrParameterList DimensionOrParameterList() :
{
   NodeListOptional n0 = new NodeListOptional();
   ADimensionOrParameter n1;

   
}
{
   (
      n1=ADimensionOrParameter()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new DimensionOrParameterList(n0); }
}

ADimensionOrParameter ADimensionOrParameter() :
{
   NodeChoice n0;
   DimensionSize n1;
   ParameterTypeListClosed n2;

   
}
{
   (
      n1=DimensionSize()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ParameterTypeListClosed()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ADimensionOrParameter(n0); }
}

TypedefName TypedefName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TypedefName(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   LabeledStatement n1;
   ExpressionStatement n2;
   CompoundStatement n3;
   SelectionStatement n4;
   IterationStatement n5;
   JumpStatement n6;
   UnknownPragma n7;
   OmpConstruct n8;
   OmpDirective n9;
   UnknownCpp n10;

   
}
{
   (
      LOOKAHEAD(2)
      n1=LabeledStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ExpressionStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=CompoundStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=SelectionStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=IterationStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=JumpStatement()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(4)
      n7=UnknownPragma()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(OmpConstruct())
      n8=OmpConstruct()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(2)
      n9=OmpDirective()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=UnknownCpp()
      { n0 = new NodeChoice(n10, 9); }
   )
   
   { return new Statement(n0); }
}

LabeledStatement LabeledStatement() :
{
   NodeChoice n0;
   SimpleLabeledStatement n1;
   CaseLabeledStatement n2;
   DefaultLabeledStatement n3;

   
}
{
   (
      n1=SimpleLabeledStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CaseLabeledStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=DefaultLabeledStatement()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new LabeledStatement(n0); }
}

SimpleLabeledStatement SimpleLabeledStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=":" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Statement()
   
   { return new SimpleLabeledStatement(n0,n2,n4); }
}

CaseLabeledStatement CaseLabeledStatement() :
{
   NodeToken n0;
   Token n1;
   ConstantExpression n2;
   NodeToken n3;
   Token n4;
   Statement n5;

   
}
{
   n1=<CASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ConstantExpression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Statement()
   
   { return new CaseLabeledStatement(n0,n2,n3,n5); }
}

DefaultLabeledStatement DefaultLabeledStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;

   
}
{
   n1=<DFLT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=":" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Statement()
   
   { return new DefaultLabeledStatement(n0,n2,n4); }
}

ExpressionStatement ExpressionStatement() :
{
   NodeOptional n0 = new NodeOptional();
   Expression n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=Expression()
      { n0.addNode(n1); }
   )?
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExpressionStatement(n0,n2); }
}

CompoundStatement CompoundStatement() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   CompoundStatementElement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=CompoundStatementElement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CompoundStatement(n0,n2,n4); }
}

CompoundStatementElement CompoundStatementElement() :
{
   NodeChoice n0;
   Declaration n1;
   Statement n2;

   
}
{
   (
      LOOKAHEAD(Declaration())
      n1=Declaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Statement()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new CompoundStatementElement(n0); }
}

SelectionStatement SelectionStatement() :
{
   NodeChoice n0;
   IfStatement n1;
   SwitchStatement n2;

   
}
{
   (
      n1=IfStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SwitchStatement()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new SelectionStatement(n0); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Statement n12;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   (
      LOOKAHEAD(2)
      { n9 = new NodeSequence(2); }
      n11=<ELSE> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=Statement()
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8); }
}

SwitchStatement SwitchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<SWITCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new SwitchStatement(n0,n2,n4,n5,n7); }
}

IterationStatement IterationStatement() :
{
   NodeChoice n0;
   WhileStatement n1;
   DoStatement n2;
   ForStatement n3;

   
}
{
   (
      n1=WhileStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DoStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ForStatement()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new IterationStatement(n0); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<WHILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

DoStatement DoStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<DO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   n4=<WHILE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new DoStatement(n0,n2,n3,n5,n7,n8,n10); }
}

ForStatement ForStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Expression n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   Expression n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   Expression n13;
   NodeToken n14;
   Token n15;
   Statement n16;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=Expression()
      { n4.addNode(n5); }
   )?
   n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=Expression()
      { n8.addNode(n9); }
   )?
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      n13=Expression()
      { n12.addNode(n13); }
   )?
   n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Statement()
   
   { return new ForStatement(n0,n2,n4,n6,n8,n10,n12,n14,n16); }
}

JumpStatement JumpStatement() :
{
   NodeChoice n0;
   GotoStatement n1;
   ContinueStatement n2;
   BreakStatement n3;
   ReturnStatement n4;

   
}
{
   (
      n1=GotoStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ContinueStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BreakStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=ReturnStatement()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new JumpStatement(n0); }
}

GotoStatement GotoStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<GOTO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new GotoStatement(n0,n2,n4); }
}

ContinueStatement ContinueStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<CONTINUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ContinueStatement(n0,n2); }
}

BreakStatement BreakStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<BREAK> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new BreakStatement(n0,n2); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<RETURN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Expression()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ReturnStatement(n0,n2,n4); }
}

UnknownCpp UnknownCpp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="#" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<UNKNOWN_CPP> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new UnknownCpp(n0,n2); }
}

OmpEol OmpEol() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<OMP_CR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<OMP_NL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new OmpEol(n0); }
}

OmpConstruct OmpConstruct() :
{
   NodeChoice n0;
   OmpParallelConstruct n1;
   OmpForConstruct n2;
   OmpSectionsConstruct n3;
   OmpSingleConstruct n4;
   OmpSimdConstruct n5;
   OmpForSimdConstruct n6;
   OmpTaskConstruct n7;
   OmpTaskLoopSimdConstruct n8;
   OmpTaskLoopConstruct n9;
   OmpTargetDataConstruct n10;
   OmpTargetParallelForSimdConstruct n11;
   OmpTargetParallelForConstruct n12;
   OmpTargetParallelConstruct n13;
   OmpTargetSimdConstruct n14;
   OmpTargetTeamsDistributeParallelForSimdConstruct n15;
   OmpTargetTeamsDistributeParallelForConstruct n16;
   OmpTargetTeamsDistributeSimdConstruct n17;
   OmpTargetTeamsDistributeConstruct n18;
   OmpTargetTeamsConstruct n19;
   OmpTargetConstruct n20;
   OmpTeamsDistributeParallelForSimdConstruct n21;
   OmpTeamsDistributeParallelForConstruct n22;
   OmpTeamsDistributeSimdConstruct n23;
   OmpTeamsDistributeConstruct n24;
   OmpTeamsConstruct n25;
   OmpDistributeSimdConstruct n26;
   OmpDistributeParallelForSimdConstruct n27;
   OmpDistributeParallelForConstruct n28;
   OmpDistributeConstruct n29;
   OmpParallelForSimdConstruct n30;
   OmpParallelForConstruct n31;
   OmpParallelSectionsConstruct n32;
   OmpMasterConstruct n33;
   OmpCriticalConstruct n34;
   OmpTaskGroupConstruct n35;
   OmpAtomicConstruct n36;
   OmpOrderedConstruct n37;

   
}
{
   (
      LOOKAHEAD(6)
      n1=OmpParallelConstruct()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(4)
      n2=OmpForConstruct()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(4)
      n3=OmpSectionsConstruct()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(4)
      n4=OmpSingleConstruct()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(4)
      n5=OmpSimdConstruct()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(5)
      n6=OmpForSimdConstruct()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(4)
      n7=OmpTaskConstruct()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(5)
      n8=OmpTaskLoopSimdConstruct()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(4)
      n9=OmpTaskLoopConstruct()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(5)
      n10=OmpTargetDataConstruct()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(7)
      n11=OmpTargetParallelForSimdConstruct()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(6)
      n12=OmpTargetParallelForConstruct()
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(5)
      n13=OmpTargetParallelConstruct()
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(5)
      n14=OmpTargetSimdConstruct()
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(9)
      n15=OmpTargetTeamsDistributeParallelForSimdConstruct()
      { n0 = new NodeChoice(n15, 14); }
   |
      LOOKAHEAD(8)
      n16=OmpTargetTeamsDistributeParallelForConstruct()
      { n0 = new NodeChoice(n16, 15); }
   |
      LOOKAHEAD(7)
      n17=OmpTargetTeamsDistributeSimdConstruct()
      { n0 = new NodeChoice(n17, 16); }
   |
      LOOKAHEAD(6)
      n18=OmpTargetTeamsDistributeConstruct()
      { n0 = new NodeChoice(n18, 17); }
   |
      LOOKAHEAD(5)
      n19=OmpTargetTeamsConstruct()
      { n0 = new NodeChoice(n19, 18); }
   |
      LOOKAHEAD(4)
      n20=OmpTargetConstruct()
      { n0 = new NodeChoice(n20, 19); }
   |
      LOOKAHEAD(8)
      n21=OmpTeamsDistributeParallelForSimdConstruct()
      { n0 = new NodeChoice(n21, 20); }
   |
      LOOKAHEAD(7)
      n22=OmpTeamsDistributeParallelForConstruct()
      { n0 = new NodeChoice(n22, 21); }
   |
      LOOKAHEAD(6)
      n23=OmpTeamsDistributeSimdConstruct()
      { n0 = new NodeChoice(n23, 22); }
   |
      LOOKAHEAD(5)
      n24=OmpTeamsDistributeConstruct()
      { n0 = new NodeChoice(n24, 23); }
   |
      LOOKAHEAD(4)
      n25=OmpTeamsConstruct()
      { n0 = new NodeChoice(n25, 24); }
   |
      LOOKAHEAD(5)
      n26=OmpDistributeSimdConstruct()
      { n0 = new NodeChoice(n26, 25); }
   |
      LOOKAHEAD(7)
      n27=OmpDistributeParallelForSimdConstruct()
      { n0 = new NodeChoice(n27, 26); }
   |
      LOOKAHEAD(5)
      n28=OmpDistributeParallelForConstruct()
      { n0 = new NodeChoice(n28, 27); }
   |
      LOOKAHEAD(4)
      n29=OmpDistributeConstruct()
      { n0 = new NodeChoice(n29, 28); }
   |
      LOOKAHEAD(6)
      n30=OmpParallelForSimdConstruct()
      { n0 = new NodeChoice(n30, 29); }
   |
      LOOKAHEAD(6)
      n31=OmpParallelForConstruct()
      { n0 = new NodeChoice(n31, 30); }
   |
      LOOKAHEAD(6)
      n32=OmpParallelSectionsConstruct()
      { n0 = new NodeChoice(n32, 31); }
   |
      LOOKAHEAD(4)
      n33=OmpMasterConstruct()
      { n0 = new NodeChoice(n33, 32); }
   |
      LOOKAHEAD(4)
      n34=OmpCriticalConstruct()
      { n0 = new NodeChoice(n34, 33); }
   |
      LOOKAHEAD(4)
      n35=OmpTaskGroupConstruct()
      { n0 = new NodeChoice(n35, 34); }
   |
      LOOKAHEAD(4)
      n36=OmpAtomicConstruct()
      { n0 = new NodeChoice(n36, 35); }
   |
      n37=OmpOrderedConstruct()
      { n0 = new NodeChoice(n37, 36); }
   )
   
   { return new OmpConstruct(n0); }
}

OmpDirective OmpDirective() :
{
   NodeChoice n0;
   OmpTaskyieldDirective n1;
   OmpTargetEnterDataDirective n2;
   OmpTargetExitDataDirective n3;
   OmpTargetUpdateDirective n4;
   OmpBarrierDirective n5;
   OmpTaskwaitDirective n6;
   OmpFlushDirective n7;
   OmpCancelDirective n8;
   OmpCancellationPointDirective n9;

   
}
{
   (
      LOOKAHEAD(4)
      n1=OmpTaskyieldDirective()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(6)
      n2=OmpTargetEnterDataDirective()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(6)
      n3=OmpTargetExitDataDirective()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(5)
      n4=OmpTargetUpdateDirective()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(4)
      n5=OmpBarrierDirective()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(4)
      n6=OmpTaskwaitDirective()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(4)
      n7=OmpFlushDirective()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(4)
      n8=OmpCancelDirective()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpCancellationPointDirective()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new OmpDirective(n0); }
}

OmpPragma OmpPragma() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="#" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PRAGMA> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<OMP> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new OmpPragma(n0,n2,n4); }
}

UnknownPragma UnknownPragma() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="#" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PRAGMA> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<UNKNOWN_CPP> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new UnknownPragma(n0,n2,n4); }
}

OmpParallelConstruct OmpParallelConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpParallelClauseList n4;
   OmpEol n5;
   Statement n6;

   
}
{
   n0=OmpPragma()
   n2=<PARALLEL> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpParallelClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=Statement()
   
   { return new OmpParallelConstruct(n0,n1,n3,n5,n6); }
}

OmpParallelClauseList OmpParallelClauseList() :
{
   OmpParallelClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpParallelClause n6;

   
}
{
   n0=OmpParallelClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpParallelClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpParallelClauseList(n0,n1); }
}

OmpParallelClause OmpParallelClause() :
{
   NodeChoice n0;
   OmpIfParallelClause n1;
   OmpNumThreadsClause n2;
   OmpDfltSharedClause n3;
   OmpDfltNoneClause n4;
   OmpPrivateClause n5;
   OmpFirstPrivateClause n6;
   OmpSharedClause n7;
   OmpCopyinClause n8;
   OmpReductionClause n9;
   OmpThreadAffinityMasterClause n10;
   OmpThreadAffinityCloseClause n11;
   OmpThreadAffinitySpreadClause n12;

   
}
{
   (
      n1=OmpIfParallelClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpNumThreadsClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(3)
      n3=OmpDfltSharedClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpDfltNoneClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpPrivateClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpSharedClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpCopyinClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpReductionClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(3)
      n10=OmpThreadAffinityMasterClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(3)
      n11=OmpThreadAffinityCloseClause()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=OmpThreadAffinitySpreadClause()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new OmpParallelClause(n0); }
}

OmpIfParallelClause OmpIfParallelClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7=<PARALLEL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<COLON> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n10=Expression()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new OmpIfParallelClause(n0,n2,n4,n10,n11); }
}

OmpNumThreadsClause OmpNumThreadsClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<NUM_THREADS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpNumThreadsClause(n0,n2,n4,n5); }
}

OmpDfltSharedClause OmpDfltSharedClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<DFLT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SHARED> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new OmpDfltSharedClause(n0,n2,n4,n6); }
}

OmpDfltNoneClause OmpDfltNoneClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<DFLT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<NONE> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new OmpDfltNoneClause(n0,n2,n4,n6); }
}

OmpPrivateClause OmpPrivateClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<PRIVATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpPrivateClause(n0,n2,n4,n5); }
}

OmpFirstPrivateClause OmpFirstPrivateClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<FIRSTPRIVATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpFirstPrivateClause(n0,n2,n4,n5); }
}

OmpSharedClause OmpSharedClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<SHARED> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpSharedClause(n0,n2,n4,n5); }
}

OmpCopyinClause OmpCopyinClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<COPYIN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpCopyinClause(n0,n2,n4,n5); }
}

OmpReductionClause OmpReductionClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ReductionOp n4;
   NodeToken n5;
   Token n6;
   VariableList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<REDUCTION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ReductionOp()
   n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=VariableList()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new OmpReductionClause(n0,n2,n4,n5,n7,n8); }
}

OmpThreadAffinityMasterClause OmpThreadAffinityMasterClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<PROC_BIND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<MASTER> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new OmpThreadAffinityMasterClause(n0,n2,n4,n6); }
}

OmpThreadAffinityCloseClause OmpThreadAffinityCloseClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<PROC_BIND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<CLOSE> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new OmpThreadAffinityCloseClause(n0,n2,n4,n6); }
}

OmpThreadAffinitySpreadClause OmpThreadAffinitySpreadClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<PROC_BIND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SPREAD> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new OmpThreadAffinitySpreadClause(n0,n2,n4,n6); }
}

OmpForConstruct OmpForConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpForClauseList n4;
   OmpEol n5;
   OmpForHeader n6;
   Statement n7;

   
}
{
   n0=OmpPragma()
   n2=<FOR> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpForClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=OmpForHeader()
   n7=Statement()
   
   { return new OmpForConstruct(n0,n1,n3,n5,n6,n7); }
}

OmpForClauseList OmpForClauseList() :
{
   OmpForClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpForClause n6;

   
}
{
   n0=OmpForClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpForClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpForClauseList(n0,n1); }
}

OmpForClause OmpForClause() :
{
   NodeChoice n0;
   OmpPrivateClause n1;
   OmpFirstPrivateClause n2;
   OmpLastPrivateClause n3;
   OmpLinearClause n4;
   OmpReductionClause n5;
   OmpScheduleClause n6;
   OmpCollapseClause n7;
   OmpOrderedClause n8;
   OmpNowaitClause n9;

   
}
{
   (
      n1=OmpPrivateClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpLastPrivateClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpLinearClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpReductionClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpScheduleClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpCollapseClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpOrderedClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpNowaitClause()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new OmpForClause(n0); }
}

OmpLastPrivateClause OmpLastPrivateClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<LASTPRIVATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpLastPrivateClause(n0,n2,n4,n5); }
}

OmpLinearClause OmpLinearClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Expression n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<LINEAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   (
      { n6 = new NodeSequence(2); }
      n8=<COLON> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Expression()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new OmpLinearClause(n0,n2,n4,n5,n10); }
}

OmpScheduleClause OmpScheduleClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   Modifier n6;
   NodeOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Modifier n11;
   NodeToken n12;
   Token n13;
   ScheduleKind n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Expression n19;
   NodeToken n20;
   Token n21;

   
}
{
   n1=<SCHEDULE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n7 = new NodeOptional(); }
      { n5 = new NodeSequence(3); }
      n6=Modifier()
      { n5.addNode(n6); }
      (
         { n8 = new NodeSequence(2); }
         n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n11=Modifier()
         { n8.addNode(n11); }
         { n7.addNode(n8); }
      )?
      { n5.addNode(n7); }
      n13=<COLON> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n5.addNode(n12); }
      { n4.addNode(n5); }
   )?
   n14=ScheduleKind()
   (
      { n16 = new NodeSequence(2); }
      n18="," { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      n19=Expression()
      { n16.addNode(n19); }
      { n15.addNode(n16); }
   )?
   n21=")" { n20 = JTBToolkit.makeNodeToken(n21); }
   
   { return new OmpScheduleClause(n0,n2,n4,n14,n15,n20); }
}

Modifier Modifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<MONOTONIC> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<NONMONOTONIC> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<SIMD> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new Modifier(n0); }
}

ScheduleKind ScheduleKind() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<STATIC> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DYNAMIC> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<GUIDED> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<RUNTIME> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<AUTO> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new ScheduleKind(n0); }
}

OmpCollapseClause OmpCollapseClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<COLLAPSE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpCollapseClause(n0,n2,n4,n5); }
}

OmpOrderedClause OmpOrderedClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<ORDERED> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=Expression()
      { n3.addNode(n6); }
      n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new OmpOrderedClause(n0,n2); }
}

OmpNowaitClause OmpNowaitClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NOWAIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpNowaitClause(n0); }
}

OmpForHeader OmpForHeader() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   OmpForInitExpression n4;
   NodeToken n5;
   Token n6;
   OmpForCondition n7;
   NodeToken n8;
   Token n9;
   OmpForReinitExpression n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=OmpForInitExpression()
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=OmpForCondition()
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=OmpForReinitExpression()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new OmpForHeader(n0,n2,n4,n5,n7,n8,n10,n11); }
}

OmpForInitExpression OmpForInitExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new OmpForInitExpression(n0,n2,n4); }
}

OmpForCondition OmpForCondition() :
{
   NodeChoice n0;
   OmpForLTCondition n1;
   OmpForLECondition n2;
   OmpForGTCondition n3;
   OmpForGECondition n4;

   
}
{
   (
      LOOKAHEAD(2)
      n1=OmpForLTCondition()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=OmpForLECondition()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=OmpForGTCondition()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpForGECondition()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new OmpForCondition(n0); }
}

OmpForLTCondition OmpForLTCondition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="<" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new OmpForLTCondition(n0,n2,n4); }
}

OmpForLECondition OmpForLECondition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="<=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new OmpForLECondition(n0,n2,n4); }
}

OmpForGTCondition OmpForGTCondition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=">" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new OmpForGTCondition(n0,n2,n4); }
}

OmpForGECondition OmpForGECondition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=">=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new OmpForGECondition(n0,n2,n4); }
}

OmpForReinitExpression OmpForReinitExpression() :
{
   NodeChoice n0;
   PostIncrementId n1;
   PostDecrementId n2;
   PreIncrementId n3;
   PreDecrementId n4;
   ShortAssignPlus n5;
   ShortAssignMinus n6;
   OmpForAdditive n7;
   OmpForSubtractive n8;
   OmpForMultiplicative n9;

   
}
{
   (
      LOOKAHEAD(PostIncrementId())
      n1=PostIncrementId()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(PostDecrementId())
      n2=PostDecrementId()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(PreIncrementId())
      n3=PreIncrementId()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(PreDecrementId())
      n4=PreDecrementId()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(2)
      n5=ShortAssignPlus()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(2)
      n6=ShortAssignMinus()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(4)
      n7=OmpForAdditive()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(4)
      n8=OmpForSubtractive()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpForMultiplicative()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new OmpForReinitExpression(n0); }
}

PostIncrementId PostIncrementId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="++" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PostIncrementId(n0,n2); }
}

PostDecrementId PostDecrementId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="--" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PostDecrementId(n0,n2); }
}

PreIncrementId PreIncrementId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PreIncrementId(n0,n2); }
}

PreDecrementId PreDecrementId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PreDecrementId(n0,n2); }
}

ShortAssignPlus ShortAssignPlus() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="+=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new ShortAssignPlus(n0,n2,n4); }
}

ShortAssignMinus ShortAssignMinus() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="-=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   
   { return new ShortAssignMinus(n0,n2,n4); }
}

OmpForAdditive OmpForAdditive() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   AdditiveExpression n8;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="+" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=AdditiveExpression()
   
   { return new OmpForAdditive(n0,n2,n4,n6,n8); }
}

OmpForSubtractive OmpForSubtractive() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   AdditiveExpression n8;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="-" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=AdditiveExpression()
   
   { return new OmpForSubtractive(n0,n2,n4,n6,n8); }
}

OmpForMultiplicative OmpForMultiplicative() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   MultiplicativeExpression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=MultiplicativeExpression()
   n6="+" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new OmpForMultiplicative(n0,n2,n4,n5,n7); }
}

OmpSectionsConstruct OmpSectionsConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpSectionsClauseList n4;
   OmpEol n5;
   SectionsScope n6;

   
}
{
   n0=OmpPragma()
   n2=<SECTIONS> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpSectionsClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=SectionsScope()
   
   { return new OmpSectionsConstruct(n0,n1,n3,n5,n6); }
}

OmpSectionsClauseList OmpSectionsClauseList() :
{
   OmpSectionsClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpSectionsClause n6;

   
}
{
   n0=OmpSectionsClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpSectionsClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpSectionsClauseList(n0,n1); }
}

OmpSectionsClause OmpSectionsClause() :
{
   NodeChoice n0;
   OmpPrivateClause n1;
   OmpFirstPrivateClause n2;
   OmpLastPrivateClause n3;
   OmpReductionClause n4;
   OmpNowaitClause n5;

   
}
{
   (
      n1=OmpPrivateClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpLastPrivateClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpReductionClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpNowaitClause()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new OmpSectionsClause(n0); }
}

SectionsScope SectionsScope() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Statement n3;
   NodeListOptional n4 = new NodeListOptional();
   ASection n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(7)
      n3=Statement()
      { n2.addNode(n3); }
   )?
   (
      n5=ASection()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new SectionsScope(n0,n2,n4,n6); }
}

ASection ASection() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   OmpEol n3;
   Statement n4;

   
}
{
   n0=OmpPragma()
   n2=<SECTION> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=OmpEol()
   n4=Statement()
   
   { return new ASection(n0,n1,n3,n4); }
}

OmpSingleConstruct OmpSingleConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpSingleClauseList n4;
   OmpEol n5;
   Statement n6;

   
}
{
   n0=OmpPragma()
   n2=<SINGLE> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpSingleClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=Statement()
   
   { return new OmpSingleConstruct(n0,n1,n3,n5,n6); }
}

OmpSingleClauseList OmpSingleClauseList() :
{
   OmpSingleClause n0;
   NodeListOptional n1 = new NodeListOptional();
   OmpSingleClause n2;

   
}
{
   n0=OmpSingleClause()
   (
      n2=OmpSingleClause()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpSingleClauseList(n0,n1); }
}

OmpSingleClause OmpSingleClause() :
{
   NodeChoice n0;
   OmpPrivateClause n1;
   OmpFirstPrivateClause n2;
   OmpCopyPrivateClause n3;
   OmpNowaitClause n4;

   
}
{
   (
      n1=OmpPrivateClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpCopyPrivateClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpNowaitClause()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new OmpSingleClause(n0); }
}

OmpCopyPrivateClause OmpCopyPrivateClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<COPYPRIVATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpCopyPrivateClause(n0,n2,n4,n5); }
}

OmpSimdConstruct OmpSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpSimdClauseList n4;
   OmpEol n5;
   OmpForHeader n6;
   Statement n7;

   
}
{
   n0=OmpPragma()
   n2=<SIMD> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpSimdClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=OmpForHeader()
   n7=Statement()
   
   { return new OmpSimdConstruct(n0,n1,n3,n5,n6,n7); }
}

OmpSimdClauseList OmpSimdClauseList() :
{
   OmpSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpSimdClause n6;

   
}
{
   n0=OmpSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpSimdClauseList(n0,n1); }
}

OmpSimdClause OmpSimdClause() :
{
   NodeChoice n0;
   OmpSafeLenClause n1;
   OmpSimdLenClause n2;
   OmpLinearClause n3;
   OmpAlignedClause n4;
   OmpPrivateClause n5;
   OmpLastPrivateClause n6;
   OmpReductionClause n7;
   OmpCollapseClause n8;

   
}
{
   (
      n1=OmpSafeLenClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpSimdLenClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpLinearClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpAlignedClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpPrivateClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpLastPrivateClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpReductionClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpCollapseClause()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new OmpSimdClause(n0); }
}

OmpSafeLenClause OmpSafeLenClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<SAFELEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpSafeLenClause(n0,n2,n4,n5); }
}

OmpSimdLenClause OmpSimdLenClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<SIMDLEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpSimdLenClause(n0,n2,n4,n5); }
}

OmpAlignedClause OmpAlignedClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Expression n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<ALIGNED> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   (
      { n6 = new NodeSequence(2); }
      n8=<COLON> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Expression()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new OmpAlignedClause(n0,n2,n4,n5,n10); }
}

OmpForSimdConstruct OmpForSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpForSimdClauseList n6;
   OmpEol n7;
   OmpForHeader n8;
   Statement n9;

   
}
{
   n0=OmpPragma()
   n2=<FOR> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SIMD> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpForSimdClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=OmpForHeader()
   n9=Statement()
   
   { return new OmpForSimdConstruct(n0,n1,n3,n5,n7,n8,n9); }
}

OmpForSimdClauseList OmpForSimdClauseList() :
{
   OmpForSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpForSimdClause n6;

   
}
{
   n0=OmpForSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpForSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpForSimdClauseList(n0,n1); }
}

OmpForSimdClause OmpForSimdClause() :
{
   NodeChoice n0;
   OmpSimdClause n1;
   OmpForClause n2;

   
}
{
   (
      LOOKAHEAD(OmpSimdClause())
      n1=OmpSimdClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpForClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpForSimdClause(n0); }
}

OmpTaskConstruct OmpTaskConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   TaskClauseList n4;
   OmpEol n5;
   Statement n6;

   
}
{
   n0=OmpPragma()
   n2=<TASK> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=TaskClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=Statement()
   
   { return new OmpTaskConstruct(n0,n1,n3,n5,n6); }
}

TaskClauseList TaskClauseList() :
{
   TaskClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   TaskClause n6;

   
}
{
   n0=TaskClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=TaskClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new TaskClauseList(n0,n1); }
}

TaskClause TaskClause() :
{
   NodeChoice n0;
   OmpIfTaskClause n1;
   OmpFinalClause n2;
   OmpUntiedClause n3;
   OmpDfltSharedClause n4;
   OmpDfltNoneClause n5;
   OmpMergeableClause n6;
   OmpPrivateClause n7;
   OmpFirstPrivateClause n8;
   OmpSharedClause n9;
   OmpDependClause n10;
   OmpPriorityClause n11;

   
}
{
   (
      n1=OmpIfTaskClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpFinalClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpUntiedClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(3)
      n4=OmpDfltSharedClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpDfltNoneClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpMergeableClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpPrivateClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpSharedClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=OmpDependClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=OmpPriorityClause()
      { n0 = new NodeChoice(n11, 10); }
   )
   
   { return new TaskClause(n0); }
}

OmpIfTaskClause OmpIfTaskClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7=<TASK> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<COLON> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n10=Expression()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new OmpIfTaskClause(n0,n2,n4,n10,n11); }
}

OmpFinalClause OmpFinalClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<FINAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpFinalClause(n0,n2,n4,n5); }
}

OmpUntiedClause OmpUntiedClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<UNTIED> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpUntiedClause(n0); }
}

OmpMergeableClause OmpMergeableClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<MERGEABLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpMergeableClause(n0); }
}

OmpDependClause OmpDependClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   DependencyType n4;
   NodeToken n5;
   Token n6;
   VariableList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<DEPEND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=DependencyType()
   n6=<COLON> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=VariableList()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new OmpDependClause(n0,n2,n4,n5,n7,n8); }
}

DependencyType DependencyType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<IN> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<OUT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<INOUT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new DependencyType(n0); }
}

OmpPriorityClause OmpPriorityClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<PRIORITY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpPriorityClause(n0,n2,n4,n5); }
}

OmpTaskLoopSimdConstruct OmpTaskLoopSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpTaskLoopSimdClauseList n6;
   OmpEol n7;
   OmpForHeader n8;
   Statement n9;

   
}
{
   n0=OmpPragma()
   n2=<TASKLOOP> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SIMD> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpTaskLoopSimdClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=OmpForHeader()
   n9=Statement()
   
   { return new OmpTaskLoopSimdConstruct(n0,n1,n3,n5,n7,n8,n9); }
}

OmpTaskLoopSimdClauseList OmpTaskLoopSimdClauseList() :
{
   OmpTaskLoopSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTaskLoopSimdClause n6;

   
}
{
   n0=OmpTaskLoopSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTaskLoopSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTaskLoopSimdClauseList(n0,n1); }
}

OmpTaskLoopSimdClause OmpTaskLoopSimdClause() :
{
   NodeChoice n0;
   OmpSimdClause n1;
   OmpTaskLoopClause n2;

   
}
{
   (
      LOOKAHEAD(OmpSimdClause())
      n1=OmpSimdClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpTaskLoopClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTaskLoopSimdClause(n0); }
}

OmpTaskLoopConstruct OmpTaskLoopConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpTaskLoopClauseList n4;
   OmpEol n5;
   OmpForHeader n6;
   Statement n7;

   
}
{
   n0=OmpPragma()
   n2=<TASKLOOP> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpTaskLoopClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=OmpForHeader()
   n7=Statement()
   
   { return new OmpTaskLoopConstruct(n0,n1,n3,n5,n6,n7); }
}

OmpTaskLoopClauseList OmpTaskLoopClauseList() :
{
   OmpTaskLoopClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTaskLoopClause n6;

   
}
{
   n0=OmpTaskLoopClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTaskLoopClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTaskLoopClauseList(n0,n1); }
}

OmpTaskLoopClause OmpTaskLoopClause() :
{
   NodeChoice n0;
   OmpIfTaskLoopClause n1;
   OmpSharedClause n2;
   OmpPrivateClause n3;
   OmpFirstPrivateClause n4;
   OmpLastPrivateClause n5;
   OmpDfltSharedClause n6;
   OmpDfltNoneClause n7;
   OmpGrainSizeClause n8;
   OmpNumTasksClause n9;
   OmpCollapseClause n10;
   OmpFinalClause n11;
   OmpPriorityClause n12;
   OmpUntiedClause n13;
   OmpMergeableClause n14;
   OmpNoGroupClause n15;

   
}
{
   (
      n1=OmpIfTaskLoopClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpSharedClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpPrivateClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpLastPrivateClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(3)
      n6=OmpDfltSharedClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpDfltNoneClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpGrainSizeClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpNumTasksClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=OmpCollapseClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=OmpFinalClause()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=OmpPriorityClause()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=OmpUntiedClause()
      { n0 = new NodeChoice(n13, 12); }
   |
      n14=OmpMergeableClause()
      { n0 = new NodeChoice(n14, 13); }
   |
      n15=OmpNoGroupClause()
      { n0 = new NodeChoice(n15, 14); }
   )
   
   { return new OmpTaskLoopClause(n0); }
}

OmpIfTaskLoopClause OmpIfTaskLoopClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7=<TASKLOOP> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<COLON> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n10=Expression()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new OmpIfTaskLoopClause(n0,n2,n4,n10,n11); }
}

OmpGrainSizeClause OmpGrainSizeClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<GRAINSIZE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpGrainSizeClause(n0,n2,n4,n5); }
}

OmpNumTasksClause OmpNumTasksClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<NUMTASKS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpNumTasksClause(n0,n2,n4,n5); }
}

OmpNoGroupClause OmpNoGroupClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NOGROUP> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpNoGroupClause(n0); }
}

OmpTargetDataConstruct OmpTargetDataConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpTargetDataClauseList n6;
   OmpEol n7;
   Statement n8;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<DATA> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpTargetDataClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=Statement()
   
   { return new OmpTargetDataConstruct(n0,n1,n3,n5,n7,n8); }
}

OmpTargetDataClauseList OmpTargetDataClauseList() :
{
   OmpTargetDataClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetDataClause n6;

   
}
{
   n0=OmpTargetDataClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetDataClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetDataClauseList(n0,n1); }
}

OmpTargetDataClause OmpTargetDataClause() :
{
   NodeChoice n0;
   OmpIfTargetDataClause n1;
   OmpDeviceClause n2;
   OmpMapClause n3;
   OmpUseDevicePtrClause n4;

   
}
{
   (
      n1=OmpIfTargetDataClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDeviceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpMapClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpUseDevicePtrClause()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new OmpTargetDataClause(n0); }
}

OmpIfTargetDataClause OmpIfTargetDataClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<TARGET> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<DATA> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new OmpIfTargetDataClause(n0,n2,n4,n6,n8,n9); }
}

OmpUseDevicePtrClause OmpUseDevicePtrClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<USEDEVICEPTR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpUseDevicePtrClause(n0,n2,n4,n5); }
}

OmpTargetParallelForSimdConstruct OmpTargetParallelForSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   OmpTargetParallelForSimdClauseList n10;
   OmpEol n11;
   OmpForHeader n12;
   Statement n13;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PARALLEL> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SIMD> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=OmpTargetParallelForSimdClauseList()
      { n9.addNode(n10); }
   )?
   n11=OmpEol()
   n12=OmpForHeader()
   n13=Statement()
   
   { return new OmpTargetParallelForSimdConstruct(n0,n1,n3,n5,n7,n9,n11,n12,n13); }
}

OmpTargetParallelForSimdClauseList OmpTargetParallelForSimdClauseList() :
{
   OmpTargetParallelForSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetParallelForSimdClause n6;

   
}
{
   n0=OmpTargetParallelForSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetParallelForSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetParallelForSimdClauseList(n0,n1); }
}

OmpTargetParallelForSimdClause OmpTargetParallelForSimdClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpSimdClause n2;
   OmpIfParallelClause n3;
   OmpNumThreadsClause n4;
   OmpDfltSharedClause n5;
   OmpDfltNoneClause n6;
   OmpPrivateClause n7;
   OmpFirstPrivateClause n8;
   OmpSharedClause n9;
   OmpReductionClause n10;
   OmpThreadAffinityMasterClause n11;
   OmpThreadAffinityCloseClause n12;
   OmpThreadAffinitySpreadClause n13;
   OmpLastPrivateClause n14;
   OmpLinearClause n15;
   OmpScheduleClause n16;
   OmpCollapseClause n17;
   OmpOrderedClause n18;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(OmpSimdClause())
      n2=OmpSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpIfParallelClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpNumThreadsClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(3)
      n5=OmpDfltSharedClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpDfltNoneClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpPrivateClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpSharedClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=OmpReductionClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(3)
      n11=OmpThreadAffinityMasterClause()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(3)
      n12=OmpThreadAffinityCloseClause()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=OmpThreadAffinitySpreadClause()
      { n0 = new NodeChoice(n13, 12); }
   |
      n14=OmpLastPrivateClause()
      { n0 = new NodeChoice(n14, 13); }
   |
      n15=OmpLinearClause()
      { n0 = new NodeChoice(n15, 14); }
   |
      n16=OmpScheduleClause()
      { n0 = new NodeChoice(n16, 15); }
   |
      n17=OmpCollapseClause()
      { n0 = new NodeChoice(n17, 16); }
   |
      n18=OmpOrderedClause()
      { n0 = new NodeChoice(n18, 17); }
   )
   
   { return new OmpTargetParallelForSimdClause(n0); }
}

OmpTargetParallelForConstruct OmpTargetParallelForConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   OmpTargetParallelForClauseList n8;
   OmpEol n9;
   OmpForHeader n10;
   Statement n11;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PARALLEL> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=OmpTargetParallelForClauseList()
      { n7.addNode(n8); }
   )?
   n9=OmpEol()
   n10=OmpForHeader()
   n11=Statement()
   
   { return new OmpTargetParallelForConstruct(n0,n1,n3,n5,n7,n9,n10,n11); }
}

OmpTargetParallelForClauseList OmpTargetParallelForClauseList() :
{
   OmpTargetParallelForClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetParallelForClause n6;

   
}
{
   n0=OmpTargetParallelForClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetParallelForClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetParallelForClauseList(n0,n1); }
}

OmpTargetParallelForClause OmpTargetParallelForClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpIfParallelClause n2;
   OmpNumThreadsClause n3;
   OmpDfltSharedClause n4;
   OmpDfltNoneClause n5;
   OmpPrivateClause n6;
   OmpFirstPrivateClause n7;
   OmpSharedClause n8;
   OmpReductionClause n9;
   OmpThreadAffinityMasterClause n10;
   OmpThreadAffinityCloseClause n11;
   OmpThreadAffinitySpreadClause n12;
   OmpLastPrivateClause n13;
   OmpLinearClause n14;
   OmpScheduleClause n15;
   OmpCollapseClause n16;
   OmpOrderedClause n17;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpIfParallelClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpNumThreadsClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(3)
      n4=OmpDfltSharedClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpDfltNoneClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpPrivateClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpSharedClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpReductionClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(3)
      n10=OmpThreadAffinityMasterClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(3)
      n11=OmpThreadAffinityCloseClause()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=OmpThreadAffinitySpreadClause()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=OmpLastPrivateClause()
      { n0 = new NodeChoice(n13, 12); }
   |
      n14=OmpLinearClause()
      { n0 = new NodeChoice(n14, 13); }
   |
      n15=OmpScheduleClause()
      { n0 = new NodeChoice(n15, 14); }
   |
      n16=OmpCollapseClause()
      { n0 = new NodeChoice(n16, 15); }
   |
      n17=OmpOrderedClause()
      { n0 = new NodeChoice(n17, 16); }
   )
   
   { return new OmpTargetParallelForClause(n0); }
}

OmpTargetParallelConstruct OmpTargetParallelConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpTargetParallelClauseList n6;
   OmpEol n7;
   Statement n8;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PARALLEL> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpTargetParallelClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=Statement()
   
   { return new OmpTargetParallelConstruct(n0,n1,n3,n5,n7,n8); }
}

OmpTargetParallelClauseList OmpTargetParallelClauseList() :
{
   OmpTargetParallelClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetParallelClause n6;

   
}
{
   n0=OmpTargetParallelClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetParallelClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetParallelClauseList(n0,n1); }
}

OmpTargetParallelClause OmpTargetParallelClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpIfParallelClause n2;
   OmpNumThreadsClause n3;
   OmpDfltSharedClause n4;
   OmpDfltNoneClause n5;
   OmpPrivateClause n6;
   OmpFirstPrivateClause n7;
   OmpSharedClause n8;
   OmpReductionClause n9;
   OmpThreadAffinityMasterClause n10;
   OmpThreadAffinityCloseClause n11;
   OmpThreadAffinitySpreadClause n12;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpIfParallelClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpNumThreadsClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(3)
      n4=OmpDfltSharedClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpDfltNoneClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpPrivateClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpSharedClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpReductionClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(3)
      n10=OmpThreadAffinityMasterClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(3)
      n11=OmpThreadAffinityCloseClause()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=OmpThreadAffinitySpreadClause()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new OmpTargetParallelClause(n0); }
}

OmpTargetSimdConstruct OmpTargetSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpTargetSimdClauseList n6;
   OmpEol n7;
   OmpForHeader n8;
   Statement n9;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SIMD> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpTargetSimdClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=OmpForHeader()
   n9=Statement()
   
   { return new OmpTargetSimdConstruct(n0,n1,n3,n5,n7,n8,n9); }
}

OmpTargetSimdClauseList OmpTargetSimdClauseList() :
{
   OmpTargetSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetSimdClause n6;

   
}
{
   n0=OmpTargetSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetSimdClauseList(n0,n1); }
}

OmpTargetSimdClause OmpTargetSimdClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpSimdClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTargetSimdClause(n0); }
}

OmpTargetTeamsDistributeParallelForSimdConstruct OmpTargetTeamsDistributeParallelForSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   OmpTargetTeamsDistributeParallelForSimdClauseList n12;
   OmpEol n13;
   OmpForHeader n14;
   Statement n15;

   
}
{
   n0=OmpPragma()
   n2=<TEAMS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<DISTRIBUTE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<PARALLEL> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<FOR> { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=<SIMD> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=OmpTargetTeamsDistributeParallelForSimdClauseList()
      { n11.addNode(n12); }
   )?
   n13=OmpEol()
   n14=OmpForHeader()
   n15=Statement()
   
   { return new OmpTargetTeamsDistributeParallelForSimdConstruct(n0,n1,n3,n5,n7,n9,n11,n13,n14,n15); }
}

OmpTargetTeamsDistributeParallelForSimdClauseList OmpTargetTeamsDistributeParallelForSimdClauseList() :
{
   OmpTargetTeamsDistributeParallelForSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetTeamsDistributeParallelForSimdClause n6;

   
}
{
   n0=OmpTargetTeamsDistributeParallelForSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetTeamsDistributeParallelForSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetTeamsDistributeParallelForSimdClauseList(n0,n1); }
}

OmpTargetTeamsDistributeParallelForSimdClause OmpTargetTeamsDistributeParallelForSimdClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpTeamsDistributeParallelForSimdClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpTeamsDistributeParallelForSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTargetTeamsDistributeParallelForSimdClause(n0); }
}

OmpTargetTeamsDistributeParallelForConstruct OmpTargetTeamsDistributeParallelForConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   OmpTargetTeamsDistributeParallelForClauseList n12;
   OmpEol n13;
   OmpForHeader n14;
   Statement n15;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<TEAMS> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<DISTRIBUTE> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<PARALLEL> { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=<FOR> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=OmpTargetTeamsDistributeParallelForClauseList()
      { n11.addNode(n12); }
   )?
   n13=OmpEol()
   n14=OmpForHeader()
   n15=Statement()
   
   { return new OmpTargetTeamsDistributeParallelForConstruct(n0,n1,n3,n5,n7,n9,n11,n13,n14,n15); }
}

OmpTargetTeamsDistributeParallelForClauseList OmpTargetTeamsDistributeParallelForClauseList() :
{
   OmpTargetTeamsDistributeParallelForClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetTeamsDistributeParallelForClause n6;

   
}
{
   n0=OmpTargetTeamsDistributeParallelForClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetTeamsDistributeParallelForClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetTeamsDistributeParallelForClauseList(n0,n1); }
}

OmpTargetTeamsDistributeParallelForClause OmpTargetTeamsDistributeParallelForClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpTeamsDistributeParallelForClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpTeamsDistributeParallelForClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTargetTeamsDistributeParallelForClause(n0); }
}

OmpTargetTeamsDistributeSimdConstruct OmpTargetTeamsDistributeSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   OmpTargetTeamsDistributeSimdClauseList n10;
   OmpEol n11;
   OmpForHeader n12;
   Statement n13;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<TEAMS> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<DISTRIBUTE> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SIMD> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=OmpTargetTeamsDistributeSimdClauseList()
      { n9.addNode(n10); }
   )?
   n11=OmpEol()
   n12=OmpForHeader()
   n13=Statement()
   
   { return new OmpTargetTeamsDistributeSimdConstruct(n0,n1,n3,n5,n7,n9,n11,n12,n13); }
}

OmpTargetTeamsDistributeSimdClauseList OmpTargetTeamsDistributeSimdClauseList() :
{
   OmpTargetTeamsDistributeSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetTeamsDistributeSimdClause n6;

   
}
{
   n0=OmpTargetTeamsDistributeSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetTeamsDistributeSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetTeamsDistributeSimdClauseList(n0,n1); }
}

OmpTargetTeamsDistributeSimdClause OmpTargetTeamsDistributeSimdClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpTeamsDistributeSimdClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpTeamsDistributeSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTargetTeamsDistributeSimdClause(n0); }
}

OmpTargetTeamsDistributeConstruct OmpTargetTeamsDistributeConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   OmpTargetTeamsDistributeClauseList n8;
   OmpEol n9;
   OmpForHeader n10;
   Statement n11;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<TEAMS> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<DISTRIBUTE> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=OmpTargetTeamsDistributeClauseList()
      { n7.addNode(n8); }
   )?
   n9=OmpEol()
   n10=OmpForHeader()
   n11=Statement()
   
   { return new OmpTargetTeamsDistributeConstruct(n0,n1,n3,n5,n7,n9,n10,n11); }
}

OmpTargetTeamsDistributeClauseList OmpTargetTeamsDistributeClauseList() :
{
   OmpTargetTeamsDistributeClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetTeamsDistributeClause n6;

   
}
{
   n0=OmpTargetTeamsDistributeClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetTeamsDistributeClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetTeamsDistributeClauseList(n0,n1); }
}

OmpTargetTeamsDistributeClause OmpTargetTeamsDistributeClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpTeamsDistributeClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpTeamsDistributeClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTargetTeamsDistributeClause(n0); }
}

OmpTargetTeamsConstruct OmpTargetTeamsConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpTargetTeamsClauseList n6;
   OmpEol n7;
   Statement n8;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<TEAMS> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpTargetTeamsClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=Statement()
   
   { return new OmpTargetTeamsConstruct(n0,n1,n3,n5,n7,n8); }
}

OmpTargetTeamsClauseList OmpTargetTeamsClauseList() :
{
   OmpTargetTeamsClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetTeamsClause n6;

   
}
{
   n0=OmpTargetTeamsClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetTeamsClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetTeamsClauseList(n0,n1); }
}

OmpTargetTeamsClause OmpTargetTeamsClause() :
{
   NodeChoice n0;
   OmpTargetClause n1;
   OmpTeamsClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTargetClause())
      n1=OmpTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpTeamsClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTargetTeamsClause(n0); }
}

OmpTargetConstruct OmpTargetConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpTargetClauseList n4;
   OmpEol n5;
   Statement n6;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpTargetClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=Statement()
   
   { return new OmpTargetConstruct(n0,n1,n3,n5,n6); }
}

OmpTargetClauseList OmpTargetClauseList() :
{
   OmpTargetClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetClause n6;

   
}
{
   n0=OmpTargetClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetClauseList(n0,n1); }
}

OmpTargetClause OmpTargetClause() :
{
   NodeChoice n0;
   OmpIfTargetClause n1;
   OmpDeviceClause n2;
   OmpPrivateClause n3;
   OmpFirstPrivateClause n4;
   OmpMapClause n5;
   OmpIsDevicePtrListClause n6;
   OmpDefaultMapClause n7;
   OmpNowaitClause n8;
   OmpDependClause n9;

   
}
{
   (
      n1=OmpIfTargetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDeviceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpPrivateClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpMapClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpIsDevicePtrListClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpDefaultMapClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpNowaitClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=OmpDependClause()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new OmpTargetClause(n0); }
}

OmpIfTargetClause OmpIfTargetClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7=<TARGET> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<COLON> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n10=Expression()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new OmpIfTargetClause(n0,n2,n4,n10,n11); }
}

OmpIsDevicePtrListClause OmpIsDevicePtrListClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<ISDEVICEPTR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpIsDevicePtrListClause(n0,n2,n4,n5); }
}

OmpDefaultMapClause OmpDefaultMapClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<DEFAULTMAP> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<TOFROM> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<COLON> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<SCALAR> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new OmpDefaultMapClause(n0,n2,n4,n6,n8,n10); }
}

OmpTeamsDistributeParallelForSimdConstruct OmpTeamsDistributeParallelForSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   OmpTeamsDistributeParallelForSimdClauseList n12;
   OmpEol n13;
   OmpForHeader n14;
   Statement n15;

   
}
{
   n0=OmpPragma()
   n2=<TEAMS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<DISTRIBUTE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<PARALLEL> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<FOR> { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=<SIMD> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=OmpTeamsDistributeParallelForSimdClauseList()
      { n11.addNode(n12); }
   )?
   n13=OmpEol()
   n14=OmpForHeader()
   n15=Statement()
   
   { return new OmpTeamsDistributeParallelForSimdConstruct(n0,n1,n3,n5,n7,n9,n11,n13,n14,n15); }
}

OmpTeamsDistributeParallelForSimdClauseList OmpTeamsDistributeParallelForSimdClauseList() :
{
   OmpTeamsDistributeParallelForSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTeamsDistributeParallelForSimdClause n6;

   
}
{
   n0=OmpTeamsDistributeParallelForSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTeamsDistributeParallelForSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTeamsDistributeParallelForSimdClauseList(n0,n1); }
}

OmpTeamsDistributeParallelForSimdClause OmpTeamsDistributeParallelForSimdClause() :
{
   NodeChoice n0;
   OmpTeamsClause n1;
   OmpDistributeParallelForSimdClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTeamsClause())
      n1=OmpTeamsClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDistributeParallelForSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTeamsDistributeParallelForSimdClause(n0); }
}

OmpTeamsDistributeParallelForConstruct OmpTeamsDistributeParallelForConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   OmpTeamsDistributeParallelForClauseList n10;
   OmpEol n11;
   OmpForHeader n12;
   Statement n13;

   
}
{
   n0=OmpPragma()
   n2=<TEAMS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<DISTRIBUTE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<PARALLEL> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<FOR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=OmpTeamsDistributeParallelForClauseList()
      { n9.addNode(n10); }
   )?
   n11=OmpEol()
   n12=OmpForHeader()
   n13=Statement()
   
   { return new OmpTeamsDistributeParallelForConstruct(n0,n1,n3,n5,n7,n9,n11,n12,n13); }
}

OmpTeamsDistributeParallelForClauseList OmpTeamsDistributeParallelForClauseList() :
{
   OmpTeamsDistributeParallelForClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTeamsDistributeParallelForClause n6;

   
}
{
   n0=OmpTeamsDistributeParallelForClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTeamsDistributeParallelForClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTeamsDistributeParallelForClauseList(n0,n1); }
}

OmpTeamsDistributeParallelForClause OmpTeamsDistributeParallelForClause() :
{
   NodeChoice n0;
   OmpTeamsClause n1;
   OmpDistributeParallelForClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTeamsClause())
      n1=OmpTeamsClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDistributeParallelForClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTeamsDistributeParallelForClause(n0); }
}

OmpTeamsDistributeSimdConstruct OmpTeamsDistributeSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   OmpTeamsDistributeSimdClauseList n8;
   OmpEol n9;
   OmpForHeader n10;
   Statement n11;

   
}
{
   n0=OmpPragma()
   n2=<TEAMS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<DISTRIBUTE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<SIMD> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=OmpTeamsDistributeSimdClauseList()
      { n7.addNode(n8); }
   )?
   n9=OmpEol()
   n10=OmpForHeader()
   n11=Statement()
   
   { return new OmpTeamsDistributeSimdConstruct(n0,n1,n3,n5,n7,n9,n10,n11); }
}

OmpTeamsDistributeSimdClauseList OmpTeamsDistributeSimdClauseList() :
{
   OmpTeamsDistributeSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTeamsDistributeSimdClause n6;

   
}
{
   n0=OmpTeamsDistributeSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTeamsDistributeSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTeamsDistributeSimdClauseList(n0,n1); }
}

OmpTeamsDistributeSimdClause OmpTeamsDistributeSimdClause() :
{
   NodeChoice n0;
   OmpTeamsClause n1;
   OmpDistributeSimdClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTeamsClause())
      n1=OmpTeamsClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDistributeSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTeamsDistributeSimdClause(n0); }
}

OmpTeamsDistributeConstruct OmpTeamsDistributeConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpTeamsDistributeClauseList n6;
   OmpEol n7;
   OmpForHeader n8;
   Statement n9;

   
}
{
   n0=OmpPragma()
   n2=<TEAMS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<DISTRIBUTE> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpTeamsDistributeClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=OmpForHeader()
   n9=Statement()
   
   { return new OmpTeamsDistributeConstruct(n0,n1,n3,n5,n7,n8,n9); }
}

OmpTeamsDistributeClauseList OmpTeamsDistributeClauseList() :
{
   OmpTeamsDistributeClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTeamsDistributeClause n6;

   
}
{
   n0=OmpTeamsDistributeClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTeamsDistributeClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTeamsDistributeClauseList(n0,n1); }
}

OmpTeamsDistributeClause OmpTeamsDistributeClause() :
{
   NodeChoice n0;
   OmpTeamsClause n1;
   OmpDistributeClause n2;

   
}
{
   (
      LOOKAHEAD(OmpTeamsClause())
      n1=OmpTeamsClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDistributeClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpTeamsDistributeClause(n0); }
}

OmpTeamsConstruct OmpTeamsConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpTeamsClauseList n4;
   OmpEol n5;
   Statement n6;

   
}
{
   n0=OmpPragma()
   n2=<TEAMS> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpTeamsClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=Statement()
   
   { return new OmpTeamsConstruct(n0,n1,n3,n5,n6); }
}

OmpTeamsClauseList OmpTeamsClauseList() :
{
   OmpTeamsClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTeamsClause n6;

   
}
{
   n0=OmpTeamsClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTeamsClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTeamsClauseList(n0,n1); }
}

OmpTeamsClause OmpTeamsClause() :
{
   NodeChoice n0;
   OmpNumTeamsClause n1;
   OmpThreadLimitClause n2;
   OmpDfltSharedClause n3;
   OmpDfltNoneClause n4;
   OmpPrivateClause n5;
   OmpFirstPrivateClause n6;
   OmpSharedClause n7;
   OmpReductionClause n8;

   
}
{
   (
      n1=OmpNumTeamsClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpThreadLimitClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(3)
      n3=OmpDfltSharedClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpDfltNoneClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpPrivateClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpSharedClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=OmpReductionClause()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new OmpTeamsClause(n0); }
}

OmpNumTeamsClause OmpNumTeamsClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<NUMTEAMS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpNumTeamsClause(n0,n2,n4,n5); }
}

OmpThreadLimitClause OmpThreadLimitClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<THREADLIMIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpThreadLimitClause(n0,n2,n4,n5); }
}

OmpDistributeSimdConstruct OmpDistributeSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpDistributeSimdClauseList n6;
   OmpEol n7;
   OmpForHeader n8;
   Statement n9;

   
}
{
   n0=OmpPragma()
   n2=<DISTRIBUTE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SIMD> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpDistributeSimdClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=OmpForHeader()
   n9=Statement()
   
   { return new OmpDistributeSimdConstruct(n0,n1,n3,n5,n7,n8,n9); }
}

OmpDistributeSimdClauseList OmpDistributeSimdClauseList() :
{
   OmpDistributeSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpDistributeSimdClause n6;

   
}
{
   n0=OmpDistributeSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpDistributeSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpDistributeSimdClauseList(n0,n1); }
}

OmpDistributeSimdClause OmpDistributeSimdClause() :
{
   NodeChoice n0;
   OmpDistributeClause n1;
   OmpSimdClause n2;

   
}
{
   (
      LOOKAHEAD(OmpDistributeClause())
      n1=OmpDistributeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpDistributeSimdClause(n0); }
}

OmpDistributeParallelForSimdConstruct OmpDistributeParallelForSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   OmpDistributeParallelForSimdClauseList n10;
   OmpEol n11;
   OmpForHeader n12;
   Statement n13;

   
}
{
   n0=OmpPragma()
   n2=<DISTRIBUTE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PARALLEL> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SIMD> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=OmpDistributeParallelForSimdClauseList()
      { n9.addNode(n10); }
   )?
   n11=OmpEol()
   n12=OmpForHeader()
   n13=Statement()
   
   { return new OmpDistributeParallelForSimdConstruct(n0,n1,n3,n5,n7,n9,n11,n12,n13); }
}

OmpDistributeParallelForSimdClauseList OmpDistributeParallelForSimdClauseList() :
{
   OmpDistributeParallelForSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpDistributeParallelForSimdClause n6;

   
}
{
   n0=OmpDistributeParallelForSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpDistributeParallelForSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpDistributeParallelForSimdClauseList(n0,n1); }
}

OmpDistributeParallelForSimdClause OmpDistributeParallelForSimdClause() :
{
   NodeChoice n0;
   OmpDistributeClause n1;
   OmpParallelForSimdClause n2;

   
}
{
   (
      LOOKAHEAD(OmpDistributeClause())
      n1=OmpDistributeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpParallelForSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpDistributeParallelForSimdClause(n0); }
}

OmpDistributeParallelForConstruct OmpDistributeParallelForConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   OmpDistributeParallelForClauseList n8;
   OmpEol n9;
   OmpForHeader n10;
   Statement n11;

   
}
{
   n0=OmpPragma()
   n2=<DISTRIBUTE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PARALLEL> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=OmpDistributeParallelForClauseList()
      { n7.addNode(n8); }
   )?
   n9=OmpEol()
   n10=OmpForHeader()
   n11=Statement()
   
   { return new OmpDistributeParallelForConstruct(n0,n1,n3,n5,n7,n9,n10,n11); }
}

OmpDistributeParallelForClauseList OmpDistributeParallelForClauseList() :
{
   OmpDistributeParallelForClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpDistributeParallelForClause n6;

   
}
{
   n0=OmpDistributeParallelForClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpDistributeParallelForClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpDistributeParallelForClauseList(n0,n1); }
}

OmpDistributeParallelForClause OmpDistributeParallelForClause() :
{
   NodeChoice n0;
   OmpDistributeClause n1;
   OmpParallelForClause n2;

   
}
{
   (
      LOOKAHEAD(OmpDistributeClause())
      n1=OmpDistributeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpParallelForClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpDistributeParallelForClause(n0); }
}

OmpDistributeConstruct OmpDistributeConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpDistributeClauseList n4;
   OmpEol n5;
   OmpForHeader n6;
   Statement n7;

   
}
{
   n0=OmpPragma()
   n2=<DISTRIBUTE> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpDistributeClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=OmpForHeader()
   n7=Statement()
   
   { return new OmpDistributeConstruct(n0,n1,n3,n5,n6,n7); }
}

OmpDistributeClauseList OmpDistributeClauseList() :
{
   OmpDistributeClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpDistributeClause n6;

   
}
{
   n0=OmpDistributeClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpDistributeClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpDistributeClauseList(n0,n1); }
}

OmpDistributeClause OmpDistributeClause() :
{
   NodeChoice n0;
   OmpPrivateClause n1;
   OmpFirstPrivateClause n2;
   OmpLastPrivateClause n3;
   OmpCollapseClause n4;
   OmpDistScheduleClause n5;

   
}
{
   (
      n1=OmpPrivateClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpFirstPrivateClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpLastPrivateClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpCollapseClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpDistScheduleClause()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new OmpDistributeClause(n0); }
}

OmpDistScheduleClause OmpDistScheduleClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ScheduleKind n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Expression n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<DISTSCHEDULE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ScheduleKind()
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Expression()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new OmpDistScheduleClause(n0,n2,n4,n5,n10); }
}

OmpParallelForSimdConstruct OmpParallelForSimdConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   OmpParallelForSimdClauseList n8;
   OmpEol n9;
   OmpForHeader n10;
   Statement n11;

   
}
{
   n0=OmpPragma()
   n2=<PARALLEL> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<FOR> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<SIMD> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=OmpParallelForSimdClauseList()
      { n7.addNode(n8); }
   )?
   n9=OmpEol()
   n10=OmpForHeader()
   n11=Statement()
   
   { return new OmpParallelForSimdConstruct(n0,n1,n3,n5,n7,n9,n10,n11); }
}

OmpParallelForSimdClauseList OmpParallelForSimdClauseList() :
{
   OmpParallelForSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpParallelForSimdClause n6;

   
}
{
   n0=OmpParallelForSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpParallelForSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpParallelForSimdClauseList(n0,n1); }
}

OmpParallelForSimdClause OmpParallelForSimdClause() :
{
   NodeChoice n0;
   OmpParallelClause n1;
   OmpSimdClause n2;
   OmpLastPrivateClause n3;
   OmpLinearClause n4;
   OmpScheduleClause n5;
   OmpCollapseClause n6;
   OmpOrderedClause n7;

   
}
{
   (
      LOOKAHEAD(OmpParallelClause())
      n1=OmpParallelClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(OmpSimdClause())
      n2=OmpSimdClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpLastPrivateClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpLinearClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpScheduleClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpCollapseClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=OmpOrderedClause()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new OmpParallelForSimdClause(n0); }
}

OmpParallelForConstruct OmpParallelForConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpParallelForClauseList n6;
   OmpEol n7;
   OmpForHeader n8;
   Statement n9;

   
}
{
   n0=OmpPragma()
   n2=<PARALLEL> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<FOR> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpParallelForClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=OmpForHeader()
   n9=Statement()
   
   { return new OmpParallelForConstruct(n0,n1,n3,n5,n7,n8,n9); }
}

OmpParallelForClauseList OmpParallelForClauseList() :
{
   OmpParallelForClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpParallelForClause n6;

   
}
{
   n0=OmpParallelForClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpParallelForClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpParallelForClauseList(n0,n1); }
}

OmpParallelForClause OmpParallelForClause() :
{
   NodeChoice n0;
   OmpParallelClause n1;
   OmpLastPrivateClause n2;
   OmpLinearClause n3;
   OmpScheduleClause n4;
   OmpCollapseClause n5;
   OmpOrderedClause n6;

   
}
{
   (
      LOOKAHEAD(OmpParallelClause())
      n1=OmpParallelClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpLastPrivateClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpLinearClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpScheduleClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpCollapseClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpOrderedClause()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new OmpParallelForClause(n0); }
}

OmpParallelSectionsConstruct OmpParallelSectionsConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpParallelSectionsClauseList n6;
   OmpEol n7;
   SectionsScope n8;

   
}
{
   n0=OmpPragma()
   n2=<PARALLEL> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SECTIONS> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpParallelSectionsClauseList()
      { n5.addNode(n6); }
   )?
   n7=OmpEol()
   n8=SectionsScope()
   
   { return new OmpParallelSectionsConstruct(n0,n1,n3,n5,n7,n8); }
}

OmpParallelSectionsClauseList OmpParallelSectionsClauseList() :
{
   NodeChoice n0;
   OmpParallelClause n1;
   OmpLastPrivateClause n2;

   
}
{
   (
      LOOKAHEAD(OmpParallelClause())
      n1=OmpParallelClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpLastPrivateClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpParallelSectionsClauseList(n0); }
}

OmpMasterConstruct OmpMasterConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   OmpEol n3;
   Statement n4;

   
}
{
   n0=OmpPragma()
   n2=<MASTER> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=OmpEol()
   n4=Statement()
   
   { return new OmpMasterConstruct(n0,n1,n3,n4); }
}

OmpCriticalConstruct OmpCriticalConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   OmpCriticalName n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   Expression n16;
   NodeToken n17;
   Token n18;
   OmpEol n19;
   Statement n20;

   
}
{
   n0=OmpPragma()
   n2=<CRITICAL> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      { n10 = new NodeOptional(); }
      { n4 = new NodeSequence(4); }
      n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=OmpCriticalName()
      { n4.addNode(n7); }
      n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      (
         { n11 = new NodeSequence(4); }
         n13=<HINT> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n15="(" { n14 = JTBToolkit.makeNodeToken(n15); }
         { n11.addNode(n14); }
         n16=Expression()
         { n11.addNode(n16); }
         n18=")" { n17 = JTBToolkit.makeNodeToken(n18); }
         { n11.addNode(n17); }
         { n10.addNode(n11); }
      )?
      { n4.addNode(n10); }
      { n3.addNode(n4); }
   )?
   n19=OmpEol()
   n20=Statement()
   
   { return new OmpCriticalConstruct(n0,n1,n3,n19,n20); }
}

OmpCriticalName OmpCriticalName() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new OmpCriticalName(n0,n2,n4); }
}

OmpTaskGroupConstruct OmpTaskGroupConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   OmpEol n3;
   Statement n4;

   
}
{
   n0=OmpPragma()
   n2=<TASKGROUP> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=OmpEol()
   n4=Statement()
   
   { return new OmpTaskGroupConstruct(n0,n1,n3,n4); }
}

OmpAtomicConstruct OmpAtomicConstruct() :
{
   NodeChoice n0;
   OmpAtomicDefaultConstruct n1;
   OmpAtomicClauseConstruct n2;

   
}
{
   (
      LOOKAHEAD(OmpPragma() <ATOMIC> ( <SEQCST> ( "," )? )? OmpEol())
      n1=OmpAtomicDefaultConstruct()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpAtomicClauseConstruct()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpAtomicConstruct(n0); }
}

OmpAtomicDefaultConstruct OmpAtomicDefaultConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   OmpEol n10;
   Statement n11;

   
}
{
   n0=OmpPragma()
   n2=<ATOMIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      { n7 = new NodeOptional(); }
      { n4 = new NodeSequence(2); }
      n6=<SEQCST> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   n10=OmpEol()
   n11=Statement()
   
   { return new OmpAtomicDefaultConstruct(n0,n1,n3,n10,n11); }
}

OmpAtomicClauseConstruct OmpAtomicClauseConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   AtomicClause n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   OmpEol n18;
   Statement n19;

   
}
{
   n0=OmpPragma()
   n2=<ATOMIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      { n7 = new NodeOptional(); }
      { n4 = new NodeSequence(2); }
      n6=<SEQCST> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   n10=AtomicClause()
   (
      { n15 = new NodeOptional(); }
      { n12 = new NodeSequence(2); }
      n14=<SEQCST> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      (
         n17="," { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n18=OmpEol()
   n19=Statement()
   
   { return new OmpAtomicClauseConstruct(n0,n1,n3,n10,n11,n18,n19); }
}

AtomicClause AtomicClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<READ> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<WRITE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<UPDATE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<CAPTURE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new AtomicClause(n0); }
}

OmpOrderedConstruct OmpOrderedConstruct() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   OmpOrderedClauseList n4;
   OmpEol n5;
   Statement n6;

   
}
{
   n0=OmpPragma()
   n2=<ORDERED> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=OmpOrderedClauseList()
      { n3.addNode(n4); }
   )?
   n5=OmpEol()
   n6=Statement()
   
   { return new OmpOrderedConstruct(n0,n1,n3,n5,n6); }
}

OmpOrderedClauseList OmpOrderedClauseList() :
{
   OmpOrderedConstructClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpOrderedConstructClause n6;

   
}
{
   n0=OmpOrderedConstructClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpOrderedConstructClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpOrderedClauseList(n0,n1); }
}

OmpOrderedConstructClause OmpOrderedConstructClause() :
{
   NodeChoice n0;
   OmpThreadsClause n1;
   OmpSimdOrderedClause n2;
   OmpDependOrderedSourceClause n3;
   OmpDependOrderedSinkClause n4;

   
}
{
   (
      n1=OmpThreadsClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpSimdOrderedClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(3)
      n3=OmpDependOrderedSourceClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpDependOrderedSinkClause()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new OmpOrderedConstructClause(n0); }
}

OmpThreadsClause OmpThreadsClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<THREADS> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpThreadsClause(n0); }
}

OmpSimdOrderedClause OmpSimdOrderedClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<SIMD> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpSimdOrderedClause(n0); }
}

OmpDependOrderedSourceClause OmpDependOrderedSourceClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<DEPEND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SOURCE> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new OmpDependOrderedSourceClause(n0,n2,n4,n6); }
}

OmpDependOrderedSinkClause OmpDependOrderedSinkClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   OmpIterationVector n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<DEPEND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SINK> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<COLON> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=OmpIterationVector()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new OmpDependOrderedSinkClause(n0,n2,n4,n6,n8,n9); }
}

OmpIterationVector OmpIterationVector() :
{
   OmpIterationDimension n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   OmpIterationDimension n5;

   
}
{
   n0=OmpIterationDimension()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=OmpIterationDimension()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpIterationVector(n0,n1); }
}

OmpIterationDimension OmpIterationDimension() :
{
   NodeChoice n0;
   OmpForwardDependence n1;
   OmpBackwardDependence n2;

   
}
{
   (
      LOOKAHEAD(2)
      n1=OmpForwardDependence()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpBackwardDependence()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpIterationDimension(n0); }
}

OmpForwardDependence OmpForwardDependence() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ConstantExpression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="+" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ConstantExpression()
   
   { return new OmpForwardDependence(n0,n2,n4); }
}

OmpBackwardDependence OmpBackwardDependence() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ConstantExpression n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="-" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ConstantExpression()
   
   { return new OmpBackwardDependence(n0,n2,n4); }
}

OmpTaskyieldDirective OmpTaskyieldDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   OmpEol n3;

   
}
{
   n0=OmpPragma()
   n2=<TASKYIELD> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=OmpEol()
   
   { return new OmpTaskyieldDirective(n0,n1,n3); }
}

OmpTargetEnterDataDirective OmpTargetEnterDataDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   OmpTargetEnterDataClauseList n8;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<ENTER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<DATA> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      LOOKAHEAD(OmpTargetEnterDataClause())
      n8=OmpTargetEnterDataClauseList()
      { n7.addNode(n8); }
   )?
   
   { return new OmpTargetEnterDataDirective(n0,n1,n3,n5,n7); }
}

OmpTargetEnterDataClauseList OmpTargetEnterDataClauseList() :
{
   OmpTargetEnterDataClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetEnterDataClause n6;

   
}
{
   n0=OmpTargetEnterDataClause()
   (
      LOOKAHEAD(( "," )? OmpTargetEnterDataClause())
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetEnterDataClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetEnterDataClauseList(n0,n1); }
}

OmpTargetEnterDataClause OmpTargetEnterDataClause() :
{
   NodeChoice n0;
   OmpIfTargetEnterDataClause n1;
   OmpDeviceClause n2;
   OmpMapClause n3;
   OmpDependClause n4;
   OmpNowaitClause n5;

   
}
{
   (
      n1=OmpIfTargetEnterDataClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDeviceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpMapClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpDependClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpNowaitClause()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new OmpTargetEnterDataClause(n0); }
}

OmpIfTargetEnterDataClause OmpIfTargetEnterDataClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Expression n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(4); }
      n7=<TARGET> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<ENTER> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      n11=<DATA> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      n13=<COLON> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n5.addNode(n12); }
      { n4.addNode(n5); }
   )?
   n14=Expression()
   n16=")" { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new OmpIfTargetEnterDataClause(n0,n2,n4,n14,n15); }
}

OmpDeviceClause OmpDeviceClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<DEVICE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpDeviceClause(n0,n2,n4,n5); }
}

OmpMapClause OmpMapClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeOptional n6;
   NodeSequence n7;
   OmpMapTypeModifier n8;
   NodeOptional n9;
   NodeToken n10;
   Token n11;
   OmpMapType n12;
   NodeToken n13;
   Token n14;
   VariableList n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1=<MAP> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n6 = new NodeOptional(); }
      { n5 = new NodeSequence(3); }
      (
         { n9 = new NodeOptional(); }
         { n7 = new NodeSequence(2); }
         n8=OmpMapTypeModifier()
         { n7.addNode(n8); }
         (
            n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n7.addNode(n9); }
         { n6.addNode(n7); }
      )?
      { n5.addNode(n6); }
      n12=OmpMapType()
      { n5.addNode(n12); }
      n14=<COLON> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n5.addNode(n13); }
      { n4.addNode(n5); }
   )?
   n15=VariableList()
   n17=")" { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new OmpMapClause(n0,n2,n4,n15,n16); }
}

OmpMapTypeModifier OmpMapTypeModifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<ALWAYS> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpMapTypeModifier(n0); }
}

OmpMapType OmpMapType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      n2=<TO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FROM> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<TOFROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<ALLOC> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<RELEASE> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<DELETE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   )
   
   { return new OmpMapType(n0); }
}

OmpTargetExitDataDirective OmpTargetExitDataDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   OmpTargetExitDataClauseList n8;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<EXIT> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<DATA> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      LOOKAHEAD(OmpTargetExitDataClause())
      n8=OmpTargetExitDataClauseList()
      { n7.addNode(n8); }
   )?
   
   { return new OmpTargetExitDataDirective(n0,n1,n3,n5,n7); }
}

OmpTargetExitDataClauseList OmpTargetExitDataClauseList() :
{
   OmpTargetExitDataClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetExitDataClause n6;

   
}
{
   n0=OmpTargetExitDataClause()
   (
      LOOKAHEAD(( "," )? OmpTargetExitDataClause())
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetExitDataClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetExitDataClauseList(n0,n1); }
}

OmpTargetExitDataClause OmpTargetExitDataClause() :
{
   NodeChoice n0;
   OmpIfTargetExitDataClause n1;
   OmpDeviceClause n2;
   OmpMapClause n3;
   OmpDependClause n4;
   OmpNowaitClause n5;

   
}
{
   (
      n1=OmpIfTargetExitDataClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDeviceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpMapClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpDependClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpNowaitClause()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new OmpTargetExitDataClause(n0); }
}

OmpIfTargetExitDataClause OmpIfTargetExitDataClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Expression n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(4); }
      n7=<TARGET> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<EXIT> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      n11=<DATA> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      n13=<COLON> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n5.addNode(n12); }
      { n4.addNode(n5); }
   )?
   n14=Expression()
   n16=")" { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new OmpIfTargetExitDataClause(n0,n2,n4,n14,n15); }
}

OmpTargetUpdateDirective OmpTargetUpdateDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   OmpTargetUpdateClauseList n5;

   
}
{
   n0=OmpPragma()
   n2=<TARGET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<UPDATE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=OmpTargetUpdateClauseList()
   
   { return new OmpTargetUpdateDirective(n0,n1,n3,n5); }
}

OmpTargetUpdateClauseList OmpTargetUpdateClauseList() :
{
   OmpTargetUpdateClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpTargetUpdateClause n6;

   
}
{
   n0=OmpTargetUpdateClause()
   (
      LOOKAHEAD(( "," )? OmpTargetUpdateClause())
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpTargetUpdateClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpTargetUpdateClauseList(n0,n1); }
}

OmpTargetUpdateClause OmpTargetUpdateClause() :
{
   NodeChoice n0;
   OmpIfTargetUpdateClause n1;
   OmpDeviceClause n2;
   OmpNowaitClause n3;
   OmpDependClause n4;
   OmpToClause n5;
   OmpFromClause n6;

   
}
{
   (
      n1=OmpIfTargetUpdateClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpDeviceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpNowaitClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpDependClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpToClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpFromClause()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new OmpTargetUpdateClause(n0); }
}

OmpIfTargetUpdateClause OmpIfTargetUpdateClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(3); }
      n7=<TARGET> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<UPDATE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      n11=<COLON> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      { n4.addNode(n5); }
   )?
   n12=Expression()
   n14=")" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new OmpIfTargetUpdateClause(n0,n2,n4,n12,n13); }
}

OmpToClause OmpToClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<TO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpToClause(n0,n2,n4,n5); }
}

OmpFromClause OmpFromClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<FROM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpFromClause(n0,n2,n4,n5); }
}

OmpBarrierDirective OmpBarrierDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   OmpEol n3;

   
}
{
   n0=OmpPragma()
   n2=<BARRIER> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=OmpEol()
   
   { return new OmpBarrierDirective(n0,n1,n3); }
}

OmpTaskwaitDirective OmpTaskwaitDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   OmpEol n3;

   
}
{
   n0=OmpPragma()
   n2=<TASKWAIT> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=OmpEol()
   
   { return new OmpTaskwaitDirective(n0,n1,n3); }
}

OmpFlushDirective OmpFlushDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   VariableList n7;
   NodeToken n8;
   Token n9;
   OmpEol n10;

   
}
{
   n0=OmpPragma()
   n2=<FLUSH> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      { n4 = new NodeSequence(3); }
      n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=VariableList()
      { n4.addNode(n7); }
      n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      { n3.addNode(n4); }
   )?
   n10=OmpEol()
   
   { return new OmpFlushDirective(n0,n1,n3,n10); }
}

OmpCancelDirective OmpCancelDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   OmpConstructTypeClause n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeOptional n6;
   NodeToken n7;
   Token n8;
   OmpIfClause n9;
   OmpEol n10;

   
}
{
   n0=OmpPragma()
   n2=<CANCEL> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=OmpConstructTypeClause()
   (
      { n6 = new NodeOptional(); }
      { n5 = new NodeSequence(2); }
      (
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n5.addNode(n6); }
      n9=OmpIfClause()
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )?
   n10=OmpEol()
   
   { return new OmpCancelDirective(n0,n1,n3,n4,n10); }
}

OmpConstructTypeClause OmpConstructTypeClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<PARALLEL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<SECTIONS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<TASKGROUP> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new OmpConstructTypeClause(n0); }
}

OmpIfClause OmpIfClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpIfClause(n0,n2,n4,n5); }
}

OmpCancellationPointDirective OmpCancellationPointDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   OmpConstructTypeClause n5;
   OmpEol n6;

   
}
{
   n0=OmpPragma()
   n2=<CANCELLATION> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<POINT> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=OmpConstructTypeClause()
   n6=OmpEol()
   
   { return new OmpCancellationPointDirective(n0,n1,n3,n5,n6); }
}

OmpGlobalDirective OmpGlobalDirective() :
{
   NodeChoice n0;
   OmpDeclareTargetExtendedListDirective n1;
   OmpDeclareTargetListDirective n2;
   OmpDeclareTargetDirective n3;
   OmpDeclareSimdDirective n4;
   OmpThreadPrivateDirective n5;
   OmpDeclareReductionDirective n6;

   
}
{
   (
      LOOKAHEAD(6)
      n1=OmpDeclareTargetExtendedListDirective()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(6)
      n2=OmpDeclareTargetListDirective()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(5)
      n3=OmpDeclareTargetDirective()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(5)
      n4=OmpDeclareSimdDirective()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(4)
      n5=OmpThreadPrivateDirective()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpDeclareReductionDirective()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new OmpGlobalDirective(n0); }
}

OmpDeclareTargetExtendedListDirective OmpDeclareTargetExtendedListDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   VariableList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=OmpPragma()
   n2=<DECLARE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<TARGET> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=VariableList()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new OmpDeclareTargetExtendedListDirective(n0,n1,n3,n5,n7,n8); }
}

OmpDeclareTargetListDirective OmpDeclareTargetListDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   OmpDeclareTargetClauseList n5;

   
}
{
   n0=OmpPragma()
   n2=<DECLARE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<TARGET> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=OmpDeclareTargetClauseList()
   
   { return new OmpDeclareTargetListDirective(n0,n1,n3,n5); }
}

OmpDeclareTargetClauseList OmpDeclareTargetClauseList() :
{
   OmpDeclareTargetClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpDeclareTargetClause n6;

   
}
{
   n0=OmpDeclareTargetClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpDeclareTargetClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpDeclareTargetClauseList(n0,n1); }
}

OmpDeclareTargetClause OmpDeclareTargetClause() :
{
   NodeChoice n0;
   OmpToClause n1;
   OmpLinkClause n2;

   
}
{
   (
      n1=OmpToClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpLinkClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OmpDeclareTargetClause(n0); }
}

OmpLinkClause OmpLinkClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<LINK> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpLinkClause(n0,n2,n4,n5); }
}

OmpDeclareTargetDirective OmpDeclareTargetDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   OmpEol n5;
   NodeListOptional n6 = new NodeListOptional();
   FunctionDefinitionOrDeclaration n7;
   OmpPragma n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   
}
{
   n0=OmpPragma()
   n2=<DECLARE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<TARGET> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=OmpEol()
   (
      n7=FunctionDefinitionOrDeclaration()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n8=OmpPragma()
   n10=<END> { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=<DECLARE> { n11 = JTBToolkit.makeNodeToken(n12); }
   n14=<TARGET> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new OmpDeclareTargetDirective(n0,n1,n3,n5,n6,n8,n9,n11,n13); }
}

OmpDeclareSimdDirective OmpDeclareSimdDirective() :
{
   OmpDeclareSimdPragmaList n0;
   FunctionDefinitionOrDeclaration n1;

   
}
{
   n0=OmpDeclareSimdPragmaList()
   n1=FunctionDefinitionOrDeclaration()
   
   { return new OmpDeclareSimdDirective(n0,n1); }
}

OmpDeclareSimdPragmaList OmpDeclareSimdPragmaList() :
{
   OmpDeclareSimdPragma n0;
   NodeListOptional n1 = new NodeListOptional();
   OmpDeclareSimdPragma n2;

   
}
{
   n0=OmpDeclareSimdPragma()
   (
      n2=OmpDeclareSimdPragma()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpDeclareSimdPragmaList(n0,n1); }
}

OmpDeclareSimdPragma OmpDeclareSimdPragma() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   OmpDeclareSimdClauseList n6;

   
}
{
   n0=OmpPragma()
   n2=<DECLARE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SIMD> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=OmpDeclareSimdClauseList()
      { n5.addNode(n6); }
   )?
   
   { return new OmpDeclareSimdPragma(n0,n1,n3,n5); }
}

OmpDeclareSimdClauseList OmpDeclareSimdClauseList() :
{
   OmpDeclareSimdClause n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   OmpDeclareSimdClause n6;

   
}
{
   n0=OmpDeclareSimdClause()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=OmpDeclareSimdClause()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OmpDeclareSimdClauseList(n0,n1); }
}

OmpDeclareSimdClause OmpDeclareSimdClause() :
{
   NodeChoice n0;
   OmpSimdLenClause n1;
   OmpLinearClause n2;
   OmpAlignedClause n3;
   OmpUniformClause n4;
   OmpInbranchClause n5;
   OmpNotinbranchClause n6;

   
}
{
   (
      n1=OmpSimdLenClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OmpLinearClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OmpAlignedClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OmpUniformClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OmpInbranchClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=OmpNotinbranchClause()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new OmpDeclareSimdClause(n0); }
}

OmpUniformClause OmpUniformClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VariableList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<UNIFORM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VariableList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new OmpUniformClause(n0,n2,n4,n5); }
}

OmpInbranchClause OmpInbranchClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INBRANCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpInbranchClause(n0); }
}

OmpNotinbranchClause OmpNotinbranchClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NOTINBRANCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new OmpNotinbranchClause(n0); }
}

FunctionDefinitionOrDeclaration FunctionDefinitionOrDeclaration() :
{
   NodeChoice n0;
   Declaration n1;
   FunctionDefinition n2;

   
}
{
   (
      LOOKAHEAD(Declaration())
      n1=Declaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=FunctionDefinition()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new FunctionDefinitionOrDeclaration(n0); }
}

OmpThreadPrivateDirective OmpThreadPrivateDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   VariableList n5;
   NodeToken n6;
   Token n7;
   OmpEol n8;

   
}
{
   n0=OmpPragma()
   n2=<THREADPRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=VariableList()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=OmpEol()
   
   { return new OmpThreadPrivateDirective(n0,n1,n3,n5,n6,n8); }
}

OmpDeclareReductionDirective OmpDeclareReductionDirective() :
{
   OmpPragma n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   ReductionOp n7;
   NodeToken n8;
   Token n9;
   ReductionTypeList n10;
   NodeToken n11;
   Token n12;
   Expression n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   InitializerClause n17;
   OmpEol n18;

   
}
{
   n0=OmpPragma()
   n2=<DECLARE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<REDUCTION> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=ReductionOp()
   n9=":" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=ReductionTypeList()
   n12=":" { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=Expression()
   n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
   (
      n17=InitializerClause()
      { n16.addNode(n17); }
   )?
   n18=OmpEol()
   
   { return new OmpDeclareReductionDirective(n0,n1,n3,n5,n7,n8,n10,n11,n13,n14,n16,n18); }
}

ReductionTypeList ReductionTypeList() :
{
   NodeListOptional n0 = new NodeListOptional();
   TypeSpecifier n1;

   
}
{
   (
      n1=TypeSpecifier()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new ReductionTypeList(n0); }
}

InitializerClause InitializerClause() :
{
   NodeChoice n0;
   AssignInitializerClause n1;
   ArgumentInitializerClause n2;

   
}
{
   (
      LOOKAHEAD(5)
      n1=AssignInitializerClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ArgumentInitializerClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new InitializerClause(n0); }
}

AssignInitializerClause AssignInitializerClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Initializer n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<INITIALIZER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Initializer()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new AssignInitializerClause(n0,n2,n4,n6,n8,n9); }
}

ArgumentInitializerClause ArgumentInitializerClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ExpressionList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<INITIALIZER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=ExpressionList()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ArgumentInitializerClause(n0,n2,n4,n6,n8,n9,n11); }
}

ReductionOp ReductionOp() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;

   
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="+" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="*" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="-" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="&" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="^" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="|" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="||" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="&&" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   )
   
   { return new ReductionOp(n0); }
}

VariableList VariableList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new VariableList(n0,n2); }
}

Expression Expression() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Expression(n0,n1); }
}

AssignmentExpression AssignmentExpression() :
{
   NodeChoice n0;
   NonConditionalExpression n1;
   ConditionalExpression n2;

   
}
{
   (
      LOOKAHEAD(UnaryExpression() AssignmentOperator())
      n1=NonConditionalExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n2=ConditionalExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new AssignmentExpression(n0); }
}

NonConditionalExpression NonConditionalExpression() :
{
   UnaryExpression n0;
   AssignmentOperator n1;
   AssignmentExpression n2;

   
}
{
   n0=UnaryExpression()
   n1=AssignmentOperator()
   n2=AssignmentExpression()
   
   { return new NonConditionalExpression(n0,n1,n2); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="*=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="/=" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="%=" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="+=" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="-=" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="<<=" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=">>=" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="&=" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="^=" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="|=" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   )
   
   { return new AssignmentOperator(n0); }
}

ConditionalExpression ConditionalExpression() :
{
   LogicalORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   ConditionalExpression n8;

   
}
{
   n0=LogicalORExpression()
   (
      { n2 = new NodeSequence(4); }
      n4="?" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      n7=":" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      n8=ConditionalExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new ConditionalExpression(n0,n1); }
}

ConstantExpression ConstantExpression() :
{
   ConditionalExpression n0;

   
}
{
   n0=ConditionalExpression()
   
   { return new ConstantExpression(n0); }
}

LogicalORExpression LogicalORExpression() :
{
   LogicalANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalORExpression n5;

   
}
{
   n0=LogicalANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="||" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalORExpression(n0,n1); }
}

LogicalANDExpression LogicalANDExpression() :
{
   InclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalANDExpression n5;

   
}
{
   n0=InclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalANDExpression(n0,n1); }
}

InclusiveORExpression InclusiveORExpression() :
{
   ExclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveORExpression n5;

   
}
{
   n0=ExclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="|" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InclusiveORExpression(n0,n1); }
}

ExclusiveORExpression ExclusiveORExpression() :
{
   ANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveORExpression n5;

   
}
{
   n0=ANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="^" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ExclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ExclusiveORExpression(n0,n1); }
}

ANDExpression ANDExpression() :
{
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ANDExpression n5;

   
}
{
   n0=EqualityExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ANDExpression(n0,n1); }
}

EqualityExpression EqualityExpression() :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   EqualOptionalExpression n2;

   
}
{
   n0=RelationalExpression()
   (
      n2=EqualOptionalExpression()
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

EqualOptionalExpression EqualOptionalExpression() :
{
   NodeChoice n0;
   EqualExpression n1;
   NonEqualExpression n2;

   
}
{
   (
      n1=EqualExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=NonEqualExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new EqualOptionalExpression(n0); }
}

EqualExpression EqualExpression() :
{
   NodeToken n0;
   Token n1;
   EqualityExpression n2;

   
}
{
   n1="==" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EqualityExpression()
   
   { return new EqualExpression(n0,n2); }
}

NonEqualExpression NonEqualExpression() :
{
   NodeToken n0;
   Token n1;
   EqualityExpression n2;

   
}
{
   n1="!=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EqualityExpression()
   
   { return new NonEqualExpression(n0,n2); }
}

RelationalExpression RelationalExpression() :
{
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   RelationalOptionalExpression n2;

   
}
{
   n0=ShiftExpression()
   (
      n2=RelationalOptionalExpression()
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExpression(n0,n1); }
}

RelationalOptionalExpression RelationalOptionalExpression() :
{
   NodeChoice n0;
   RelationalLTExpression n1;
   RelationalGTExpression n2;
   RelationalLEExpression n3;
   RelationalGEExpression n4;

   
}
{
   (
      n1=RelationalLTExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=RelationalGTExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=RelationalLEExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RelationalGEExpression()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new RelationalOptionalExpression(n0); }
}

RelationalLTExpression RelationalLTExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1="<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalLTExpression(n0,n2); }
}

RelationalGTExpression RelationalGTExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1=">" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalGTExpression(n0,n2); }
}

RelationalLEExpression RelationalLEExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1="<=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalLEExpression(n0,n2); }
}

RelationalGEExpression RelationalGEExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1=">=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalGEExpression(n0,n2); }
}

ShiftExpression ShiftExpression() :
{
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   ShiftOptionalExpression n2;

   
}
{
   n0=AdditiveExpression()
   (
      n2=ShiftOptionalExpression()
      { n1.addNode(n2); }
   )?
   
   { return new ShiftExpression(n0,n1); }
}

ShiftOptionalExpression ShiftOptionalExpression() :
{
   NodeChoice n0;
   ShiftLeftExpression n1;
   ShiftRightExpression n2;

   
}
{
   (
      n1=ShiftLeftExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ShiftRightExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ShiftOptionalExpression(n0); }
}

ShiftLeftExpression ShiftLeftExpression() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1=">>" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new ShiftLeftExpression(n0,n2); }
}

ShiftRightExpression ShiftRightExpression() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new ShiftRightExpression(n0,n2); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeOptional n1 = new NodeOptional();
   AdditiveOptionalExpression n2;

   
}
{
   n0=MultiplicativeExpression()
   (
      n2=AdditiveOptionalExpression()
      { n1.addNode(n2); }
   )?
   
   { return new AdditiveExpression(n0,n1); }
}

AdditiveOptionalExpression AdditiveOptionalExpression() :
{
   NodeChoice n0;
   AdditivePlusExpression n1;
   AdditiveMinusExpression n2;

   
}
{
   (
      n1=AdditivePlusExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AdditiveMinusExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new AdditiveOptionalExpression(n0); }
}

AdditivePlusExpression AdditivePlusExpression() :
{
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;

   
}
{
   n1="+" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AdditiveExpression()
   
   { return new AdditivePlusExpression(n0,n2); }
}

AdditiveMinusExpression AdditiveMinusExpression() :
{
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;

   
}
{
   n1="-" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AdditiveExpression()
   
   { return new AdditiveMinusExpression(n0,n2); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   CastExpression n0;
   NodeOptional n1 = new NodeOptional();
   MultiplicativeOptionalExpression n2;

   
}
{
   n0=CastExpression()
   (
      n2=MultiplicativeOptionalExpression()
      { n1.addNode(n2); }
   )?
   
   { return new MultiplicativeExpression(n0,n1); }
}

MultiplicativeOptionalExpression MultiplicativeOptionalExpression() :
{
   NodeChoice n0;
   MultiplicativeMultiExpression n1;
   MultiplicativeDivExpression n2;
   MultiplicativeModExpression n3;

   
}
{
   (
      n1=MultiplicativeMultiExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=MultiplicativeDivExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=MultiplicativeModExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new MultiplicativeOptionalExpression(n0); }
}

MultiplicativeMultiExpression MultiplicativeMultiExpression() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new MultiplicativeMultiExpression(n0,n2); }
}

MultiplicativeDivExpression MultiplicativeDivExpression() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="/" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new MultiplicativeDivExpression(n0,n2); }
}

MultiplicativeModExpression MultiplicativeModExpression() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new MultiplicativeModExpression(n0,n2); }
}

CastExpression CastExpression() :
{
   NodeChoice n0;
   CastExpressionTyped n1;
   UnaryExpression n2;

   
}
{
   (
      LOOKAHEAD("(" TypeName() ")" CastExpression())
      n1=CastExpressionTyped()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=UnaryExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new CastExpression(n0); }
}

CastExpressionTyped CastExpressionTyped() :
{
   NodeToken n0;
   Token n1;
   TypeName n2;
   NodeToken n3;
   Token n4;
   CastExpression n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeName()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=CastExpression()
   
   { return new CastExpressionTyped(n0,n2,n3,n5); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   UnaryExpressionPreIncrement n1;
   UnaryExpressionPreDecrement n2;
   UnarySizeofExpression n3;
   UnaryCastExpression n4;
   PostfixExpression n5;

   
}
{
   (
      n1=UnaryExpressionPreIncrement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=UnaryExpressionPreDecrement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=UnarySizeofExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=UnaryCastExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=PostfixExpression()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new UnaryExpression(n0); }
}

UnaryExpressionPreIncrement UnaryExpressionPreIncrement() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new UnaryExpressionPreIncrement(n0,n2); }
}

UnaryExpressionPreDecrement UnaryExpressionPreDecrement() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new UnaryExpressionPreDecrement(n0,n2); }
}

UnaryCastExpression UnaryCastExpression() :
{
   UnaryOperator n0;
   CastExpression n1;

   
}
{
   n0=UnaryOperator()
   n1=CastExpression()
   
   { return new UnaryCastExpression(n0,n1); }
}

UnarySizeofExpression UnarySizeofExpression() :
{
   NodeChoice n0;
   SizeofTypeName n1;
   SizeofUnaryExpression n2;

   
}
{
   (
      LOOKAHEAD(SizeofTypeName())
      n1=SizeofTypeName()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SizeofUnaryExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new UnarySizeofExpression(n0); }
}

SizeofUnaryExpression SizeofUnaryExpression() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1=<SIZEOF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new SizeofUnaryExpression(n0,n2); }
}

SizeofTypeName SizeofTypeName() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TypeName n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<SIZEOF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TypeName()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new SizeofTypeName(n0,n2,n4,n5); }
}

UnaryOperator UnaryOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      n2="&" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="*" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="+" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="-" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="~" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="!" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   )
   
   { return new UnaryOperator(n0); }
}

PostfixExpression PostfixExpression() :
{
   PrimaryExpression n0;
   PostfixOperationsList n1;

   
}
{
   n0=PrimaryExpression()
   n1=PostfixOperationsList()
   
   { return new PostfixExpression(n0,n1); }
}

PostfixOperationsList PostfixOperationsList() :
{
   NodeListOptional n0 = new NodeListOptional();
   APostfixOperation n1;

   
}
{
   (
      n1=APostfixOperation()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new PostfixOperationsList(n0); }
}

APostfixOperation APostfixOperation() :
{
   NodeChoice n0;
   BracketExpression n1;
   ArgumentList n2;
   DotId n3;
   ArrowId n4;
   PlusPlus n5;
   MinusMinus n6;

   
}
{
   (
      n1=BracketExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ArgumentList()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=DotId()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=ArrowId()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=PlusPlus()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=MinusMinus()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new APostfixOperation(n0); }
}

PlusPlus PlusPlus() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlusPlus(n0); }
}

MinusMinus MinusMinus() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new MinusMinus(n0); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BracketExpression(n0,n2,n3); }
}

ArgumentList ArgumentList() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ExpressionList n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(ExpressionList())
      n3=ExpressionList()
      { n2.addNode(n3); }
   )?
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArgumentList(n0,n2,n4); }
}

DotId DotId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new DotId(n0,n2); }
}

ArrowId ArrowId() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="->" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ArrowId(n0,n2); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Constant n3;
   ExpressionClosed n4;
   GenericSelection n5;

   
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=Constant()
      { n0 = new NodeChoice(n3, 1); }
   |
      n4=ExpressionClosed()
      { n0 = new NodeChoice(n4, 2); }
   |
      n5=GenericSelection()
      { n0 = new NodeChoice(n5, 3); }
   )
   
   { return new PrimaryExpression(n0); }
}

ExpressionClosed ExpressionClosed() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ExpressionClosed(n0,n2,n3); }
}

ExpressionList ExpressionList() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpressionList(n0,n1); }
}

Constant Constant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeList n7 = new NodeList();
   NodeToken n8;
   Token n9;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHARACTER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      (
         n9=<STRING_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new Constant(n0); }
}

GenericSelection GenericSelection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   AssignmentExpression n4;
   NodeToken n5;
   Token n6;
   GenericAssocList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<_GENERIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=AssignmentExpression()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=GenericAssocList()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new GenericSelection(n0,n2,n4,n5,n7,n8); }
}

GenericAssocList GenericAssocList() :
{
   GenericAssociation n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   GenericAssociation n5;

   
}
{
   n0=GenericAssociation()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=GenericAssociation()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new GenericAssocList(n0,n1); }
}

GenericAssociation GenericAssociation() :
{
   NodeChoice n0;
   NodeSequence n1;
   TypeName n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   AssignmentExpression n11;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=TypeName()
      { n1.addNode(n2); }
      n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      n5=AssignmentExpression()
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n6 = new NodeSequence(3); }
      n8=<DFLT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10=":" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      n11=AssignmentExpression()
      { n6.addNode(n11); }
      { n0 = new NodeChoice(n6, 1); }
   )
   
   { return new GenericAssociation(n0); }
}
